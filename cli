#!/usr/bin/env python3


import os
import random
import sys
import gc
import hashlib
import marshal

#gc.set_debug(gc.DEBUG_LEAK)


def check_ver():
    vi = sys.version_info

    if vi.major >= 3 and vi.minor >= 8:
        return

    for x in ('/root/python/bin:/Users/pg/18/bin:' + os.environ.get('PATH', '/bin:/usr/bin:/usr/local/bin')).split(':'):
        for v in ('3.8', '3.9', '3.10'):
            path = x + '/python' + v

            if os.path.isfile(path):
                os.execvp(path, [path] + sys.argv)

    raise Exception('we need python 3.8')


check_ver()


def find_me(g):
    for f in (lambda: __file__, lambda: sys.argv[0], lambda: os.path.abspath(os.getcwd()) + '/cli'):
        p = os.path.abspath(f())

        if os.path.isfile(p):
            return p

    raise Exception('can not find myself')


class Globals(dict):
    def __init__(self, cache):
        self.__dict__ = self
        self.cache = cache
        self.md5 = hashlib.md5
        self.dumps = marshal.dumps
        self.do_compile = compile
        self.hit = 0
        self.miss = 0
        
    def key(self, data):
        return self.md5(self.dumps(data)).hexdigest()
        
    def compile(self, a, b, c):
        key = self.key([a, b, c])

        if key not in self.cache:
            self.miss += 1
            self.cache[key] = self.do_compile(a, b, c)
        else:
            self.hit += 1
            
        return self.cache[key]
        

def real_main():
    file_data = None
    #REPLACEME

    if file_data:
        g = Globals(fd['compile_cache'])
    else:
        g = Globals({})

    g.script_path = find_me(g)
    g.script_dir = os.path.dirname(g.script_path)
    g.file_data = file_data
    
    if g.file_data:
        data = dict((x['name'], x) for x in g.file_data)['ut/stagea.py']['data']
    else:
        with open(g.script_dir + '/ut/stagea.py') as f:
            data = f.read()

    ctx = {'_globals': g}
    exec(compile(data +'\nmain(_globals)\n', '__main__', 'exec'), ctx)
    ctx.clear()


if __name__ == '__main__':        
    real_main()
