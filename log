{'name': 'darwin/x86_64/pl/yash.py', 'path': '/Users/pg83/newhope/plugins/yash.py', 'data': '@y.package\ndef yash0():\n    opts = [\n        \'--enable-socket\',\n        \'--enable-printf\',\n        \'--enable-lineedit\',\n        \'--enable-history\',\n        \'--enable-double-bracket\',\n        \'--enable-dirstack\',\n        \'--enable-array\',\n    ]\n\n    return {\n        \'code\': """\n            source fetch "https://github.com/magicant/yash/archive/ae772d184ae4362df66f646fc6b7ff8164030a7b.zip" 0\n            mv ./yash* ./xxx\n            mv ./xxx/* ./\n            export LDFLAGS="$LDFLAGS $LIBS"\n            export CFLAGS="-Dwordfree=yash_wordfree $CFLAGS"\n            $YSHELL ./configure --prefix=$IDIR {opts}\n            echo \'install-rec:\' > doc/Makefile\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         """.replace(\'{opts}\', \' \'.join(opts)),\n        \'version\': \'2.49\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'intl\', \'ncurses\', \'xz\', \'tar\', \'asciidoc\', \'python\'],\n            \'provides\': [\n                {\'env\': \'YSHELL_OPT\', \'value\': \'{pkgroot}/bin/yash\'},\n                {\'env\': \'YASH\', \'value\': \'{pkgroot}/bin/yash\'},\n            ],\n        },\n    }\n', 'burn': '3635e4d13c5d7d44'}
{'name': 'darwin/x86_64/pl/glib.py', 'path': '/Users/pg83/newhope/plugins/glib.py', 'data': '@y.package\ndef glib0():\n    return {\n        \'code\': """\n             source fetch "http://ftp.acc.umu.se/pub/gnome/sources/glib/2.30/glib-{version}.tar.xz" 1\n             export CFLAGS="-D_GNU_SOURCE=1 -I$(pwd)/inc $CFLAGS"\n             (mkdir inc && cd inc && mkdir sys && cd sys && echo \'#include <sys/sysmacros.h>\' > mkdev.h)\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libiconv=gnu --disable-nls || exit 1\n             echo \'#!\'$YSHELL > tmp && cat libtool >> tmp && mv tmp libtool && chmod +x libtool\n             $YMAKE -j $NTHRS || exit 1\n             $YMAKE install\n        """,\n        \'version\': \'2.30.3\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'iconv\', \'intl\', \'libffi\', \'pkg-config-int\', \'coreutils\', \'python\', \'zlib\', \'dash\', \'pcre\', \'slibtool\'],\n            \'provides\': [\n                {\n                    \'lib\': \'glib-2.0\', \n                    \'extra\': [\n                        {\'libs\': \'-framework CoreServices -framework CoreFoundation\'},\n                        {\'ipath\': \'{pkgroot}/include/glib-2.0\'},\n                        {\'ipath\': \'{pkgroot}/lib/glib-2.0/include\'},\n                    ],\n                },\n            ],\n        },\n    }\n', 'burn': '30d11e344bc08e5d'}
{'name': 'darwin/x86_64/pl/make.py', 'path': '/Users/pg83/newhope/plugins/make.py', 'data': '@y.package\ndef make0():\n    def it():\n        yield \'source fetch "http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-{version}.tar.gz" 1\'\n        yield \'$YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\'\n        yield \'$YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-load || exit 1\'\n        yield \'$YMAKE -j $NTHRS\'\n        yield \'$YMAKE install\'\n\n    return {\n        \'code\': \'\\n\'.join(it()),\n        \'version\': \'4.2\',\n        \'meta\': {\n            \'kind\': [\'tool\', \'box\'],\n            \'depends\': [\'make-boot\'],\n            \'contains\': [\'make-boot\'],\n            \'provides\': [\n                {\'env\': \'YMAKE\', \'value\': \'{pkgroot}/bin/make\'},\n            ],\n        },\n    }\n', 'burn': 'e8d2c0ac95f89a04'}
{'name': 'darwin/x86_64/pl/zlib.py', 'path': '/Users/pg83/newhope/plugins/zlib.py', 'data': '@y.package\ndef zlib0():\n    return {\n        \'code\': """\n            source fetch "http://zlib.net/zlib-{version}.tar.gz" 1\n            export LDFLAGS="$LDFLAGS $LIBS"\n            export TEST_LDFLAGS="$LDFLAGS -L. libz.a"\n            $YSHELL ./configure $COFLAGS --static --64 --prefix=$IDIR || exit 1\n            $YMAKE -j $NTHRS TEST_LDFLAGS="$TEST_LDFLAGS"\n            $YMAKE install\n        """,\n        \'version\': \'1.2.11\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'z\', \'configure\': {\'opt\': \'--with-z={pkgroot}\'}},\n                {\'env\': \'ZLIB_CFLAGS\', \'value\': \'"-I{pkgroot}/include"\'},\n                {\'env\': \'ZLIB_LIBS\', \'value\': \'"-L{pkgroot}/lib -lz"\'},\n            ],\n        },\n    }\n', 'burn': '1ee49b1bbab4acd3'}
{'name': 'darwin/x86_64/pl/tar.py', 'path': '/Users/pg83/newhope/plugins/tar.py', 'data': '@y.package\ndef tar0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/tar/tar-{version}.tar.gz" 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR\n             $YMAKE -j $NTHRS && $YMAKE install\n        """,\n        \'version\': \'1.32\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'gzip\', \'bzip2\', \'xz\', \'unrar\'],\n            \'provides\': [\n                {\'env\': \'YGNUTAR\', \'value\': \'{pkgroot}/bin/tar\'},\n            ],\n        },\n    }\n', 'burn': '938fcc2be23e8cb5'}
{'name': 'darwin/x86_64/pl/libidn2.py', 'path': '/Users/pg83/newhope/plugins/libidn2.py', 'data': '@y.package\ndef libidn20():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/libidn/libidn2-{version}.tar.gz" 1\n\n             ln -s "$CC" ./gcc\n             ln -s "$CC" ./cc\n             export PATH="$(pwd):$PATH"\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.2.0\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'intl\', \'iconv\', \'libunistring\', \'pkg-config\'],\n            \'provides\': [\n                {\'lib\': \'idn2\', \'configure\': {\'opt\': \'--with-libidn2={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '237c6ddd6ffa8ab4'}
{'name': 'darwin/x86_64/pl/gawk.py', 'path': '/Users/pg83/newhope/plugins/gawk.py', 'data': '@y.package\ndef gawk0():\n    return {\n        \'code\': """\n             source fetch "https://mirror.tochlab.net/pub/gnu/gawk/gawk-{version}.tar.xz" 1\n\n             ln -s $AR ./ar\n             export PATH="$(pwd):$PATH"\n             export CFLAGS="-Derr=gawk_err $CFLAGS"\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin/awk_exec --disable-shared --enable-static --disable-extensions || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'5.0.1\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'readline\', \'libsigsegv\', \'c++\'],\n            \'soft\': [\'mpfr\', \'gmp\'],\n        },\n    }\n', 'burn': '39549971d10a787a'}
{'name': 'darwin/x86_64/pl/libffi.py', 'path': '/Users/pg83/newhope/plugins/libffi.py', 'data': '@y.package\ndef libffi0():\n    return {\n        \'code\': """\n             source fetch "https://sourceware.org/ftp/libffi/libffi-{version}.tar.gz" 1\n\n             sed -e \'/^includesdir/ s/$(libdir).*$/$(includedir)/\' \\\n                 -i include/Makefile.in\n\n             sed -e \'/^includedir/ s/=.*$/=@includedir@/\' \\\n                 -e \'s/^Cflags: -I${includedir}/Cflags:/\' \\\n                 -i libffi.pc.in\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.2.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'sed\'],\n            \'provides\': [\n                {\'lib\': \'ffi\'},\n            ],\n        },\n    }\n', 'burn': 'aa935573d400eb85'}
{'name': 'darwin/x86_64/pl/bison.py', 'path': '/Users/pg83/newhope/plugins/bison.py', 'data': '@y.package\ndef bison0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/bison/bison-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-relocatable || exit 1\n             $YMAKE -j $NTHRS || true\n             $YMAKE || true\n             $YMAKE\n             $YMAKE install\n        """,\n        \'version\': \'3.4.2\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'c++\', \'m4\', \'iconv\', \'intl\', \'xz\', \'perl5\']\n        },\n    }\n\n', 'burn': 'eaa93fceb714446c'}
{'name': 'darwin/x86_64/pl/gettext_tiny.py', 'path': '/Users/pg83/newhope/plugins/gettext_tiny.py', 'data': '#@y.package\ndef gettext_tiny0():\n    return {\n        \'code\': """\n            source fetch "https://github.com/sabotage-linux/gettext-tiny/archive/{version}.zip" 0\n            cd gettext*\n            $YMAKE -j $NTHRS AR="$AR" RANLIB="$RANLIB" CC="$CC" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS $LIBS" LIBINTL="MUSL" all || exit 1\n            $YMAKE LIBINTL="MUSL" DESTDIR="$IDIR" prefix=/ install\n        """,\n        \'version\': \'55a2119d06403e05808d89eedc9e94a20e87cbd3\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'depends\': [\'iconv\'],\n            \'provides\': [\n                {\'lib\': \'intl\', \'configure\': {\'opt\': \'--with-libintl-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '4bc91ff2e611b9c4'}
{'name': 'darwin/x86_64/pl/bzip2.py', 'path': '/Users/pg83/newhope/plugins/bzip2.py', 'data': '@y.package\ndef bzip20():\n    return {\n        \'code\': """\n            source fetch "https://sourceware.org/pub/bzip2/bzip2-{version}.tar.gz" 1\n            $YMAKE -j $NTHRS CC=$CC AR=$AR RANLIB=$RANLIB LDFLAGS="$LDFLAGS $LIBS" CFLAGS="$CFLAGS" PREFIX="$IDIR" install\n        """,\n        \'version\': \'1.0.8\',\n        \'meta\': {\n            \'kind\': [\'library\', \'box\', \'tool\'],\n            \'provides\': [\n                {\'lib\': \'bz2\'},\n                {\'env\': \'YBZIP2\', \'value\': \'{pkgroot}/bin/bzip2\'},\n            ],\n        },\n    }\n', 'burn': '60a0449b57dded55'}
{'name': 'darwin/x86_64/pl/libedit.py', 'path': '/Users/pg83/newhope/plugins/libedit.py', 'data': '@y.package\ndef libedit0():\n    return {\n        \'code\': """\n             source fetch "http://thrysoee.dk/editline/libedit-{version}.tar.gz" 1\n             export CFLAGS="-D__STDC_ISO_10646__=1 $CFLAGS"\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'20191025-3.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'ncurses\', \'termcap\'],\n            \'provides\': [\n                {\'lib\': \'edit\'},\n            ],\n        },\n    }\n', 'burn': '21b99ed4d0429872'}
{'name': 'darwin/x86_64/pl/toybox.py', 'path': '/Users/pg83/newhope/plugins/toybox.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def toybox0():\n        return {\n            \'os\': \'linux\',\n            \'code\': \'\'\'\n                mkdir -p $IDIR/bin\n                cd $IDIR/bin\n                source fetch "http://www.landley.net/toybox/downloads/binaries/{version}/toybox-x86_64" 0\n                cp toybox-* toybox\n                chmod +x toybox\n            \'\'\',\n            \'version\': \'0.8.1\',\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'provides\': [\n                    {\'env\': \'TOYBOX\', \'value\': \'{pkgroot}/bin/toybox\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '2345eb92a39fbc19'}
{'name': 'darwin/x86_64/pl/busybox.py', 'path': '/Users/pg83/newhope/plugins/busybox.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def busybox0():\n        return {\n            \'os\': \'linux\',\n            \'code\': """\n                mkdir -p $IDIR/bin\n                cd $IDIR/bin\n                source fetch "https://www.busybox.net/downloads/binaries/{version}-defconfig-multiarch-musl/busybox-x86_64" 0\n                mv busybox-* busybox\n                chmod +x busybox\n            """,\n            \'version\': \'1.31.0\',\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'provides\': [\n                    {\'env\': \'BUSYBOX\', \'value\': \'{pkgroot}/bin/busybox\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '44e865278b0c2e7c'}
{'name': 'darwin/x86_64/pl/xz.py', 'path': '/Users/pg83/newhope/plugins/xz.py', 'data': '@y.package\ndef xz0():\n    return {\n        \'code\': """\n             source fetch "https://sourceforge.net/projects/lzmautils/files/xz-{version}.tar.gz/download" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --disable-threads && $YMAKE -j $NTHRS && $YMAKE install\n        """,\n        \'version\': \'5.2.4\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'provides\': [\n                {\'lib\': \'lzma\'},\n                {\'env\': \'YXZ\', \'value\': \'{pkgroot}/bin/xz\'},\n                {\'env\': \'YXZCAT\', \'value\': \'{pkgroot}/bin/xzcat\'},\n            ],\n        },\n    }\n', 'burn': 'b0c93dee1008d80d'}
{'name': 'darwin/x86_64/pl/libarchive.py', 'path': '/Users/pg83/newhope/plugins/libarchive.py', 'data': '@y.package\ndef libarchive0():\n    return {\n        \'code\': """\n             source fetch "https://libarchive.org/downloads/libarchive-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.4.0\',\n        \'meta\': {\n            \'kind\': [\'library\', \'tool\', \'box\'],\n            \'depends\': [\'zlib\', \'bzip2\', \'xz\'],\n            \'provides\': [\n                {\'lib\': \'archive\'},\n                {\'env\': \'YTAR\', \'value\': \'{pkgroot}/bin/bsdtar\'},\n            ],\n        },\n    }\n', 'burn': '859c6c61d6558a79'}
{'name': 'darwin/x86_64/pl/yasm.py', 'path': '/Users/pg83/newhope/plugins/yasm.py', 'data': '#@y.ygenerator()\ndef yasm0():\n    return {\n        \'code\': """\n               source fetch "http://www.tortall.net/projects/yasm/releases/yasm-{version}.tar.gz" 1\n               export LIBS="$LDFLAGS $LIBS"\n               export CC_FOR_BUILD="$CC"\n               export CFLAGS_FOR_BUILD="$CFLAGS"\n               $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n               $YMAKE -j $NTHR\n               $YMAKE install\n        """,\n        \'version\': \'1.3.0\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n        },\n    }\n', 'burn': '40d7ff8005b6281c'}
{'name': 'darwin/x86_64/pl/curl.py', 'path': '/Users/pg83/newhope/plugins/curl.py', 'data': '@y.package\ndef curl0():\n    return {\n        \'code\': """\n            source fetch "https://curl.haxx.se/download/curl-7.67.0.tar.xz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """,\n        \'version\': \'7.67.0-20191011\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'openssl\', \'libidn2\', \'libmetalink\'],\n            \'provides\': [\n                {\'env\': \'CURL\', \'value\': \'{pkgroot}/bin/curl\'},\n            ],\n        },\n    }\n', 'burn': 'd81e6193e37d3911'}
{'name': 'darwin/x86_64/pl/perl5.py', 'path': '/Users/pg83/newhope/plugins/perl5.py', 'data': '@y.package\ndef perl50():\n    return {\n        \'code\': """\n            source fetch "https://www.cpan.org/src/5.0/perl-{version}.tar.gz" 0\n            mv perl* xxx\n            cd xxx\n\n            ln -s $AR ./ar\n            ln -s $NM ./nm\n            ln -s $CC ./gcc\n            export PATH="$(pwd):$PATH"\n\n            ./Configure -des -Accflags="$CFLAGS" -Aldflags="$LDFLAGS $LIBS" -Dusethreads -Duse64bitall -Dprefix=$IDIR -Duseperlio -Uusesfio -Duseshrplib=false -Dusedl=false -Dcc="$CC $CFLAGS $LDFLAGS $LIBS"\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """,\n        \'prepare\': """\n            source perl5_env\n        """,\n        \'version\': \'5.30.1\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'zlib\', \'coreutils-boot\'],\n            \'provides\': [\n                {\'env\': \'YPERL\', \'value\': \'{pkgroot}/bin/perl\'},\n            ],\n        },\n    }\n', 'burn': 'b884ddbf55923b21'}
{'name': 'darwin/x86_64/pl/cxxrt.py', 'path': '/Users/pg83/newhope/plugins/cxxrt.py', 'data': '@y.package\ndef libcxxrt0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "https://github.com/pathscale/libcxxrt/archive/master.zip" 0\n             mv libcxxrt* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        """,\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_libcxxrt.sh\'][\'data\']},\n        ],\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'libunwind\'],\n            \'provides\': [\n                {\'lib\': \'cxxrt\'},\n                {\'env\': \'LIBCXXRT_INC\', \'value\': \'"{pkgroot}/include"\'},\n            ],\n        },\n    }\n', 'burn': '82a3b3fe94907ecb'}
{'name': 'darwin/x86_64/pl/gzip.py', 'path': '/Users/pg83/newhope/plugins/gzip.py', 'data': '@y.package\ndef gzip0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/gzip/gzip-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'1.10\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'slibtool\'], \n            \'provides\': [\n                {\'env\': \'YGZIP\', \'value\': \'{pkgroot}/bin/gzip\'},\n            ],\n        },\n    }\n', 'burn': 'eb1be59b7f0235e9'}
{'name': 'darwin/x86_64/pl/ninja.py', 'path': '/Users/pg83/newhope/plugins/ninja.py', 'data': '@y.package\ndef ninja0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/ninja-build/ninja/archive/v{version}.tar.gz" 0\n             mv ninja* xxx\n             cd xxx\n             export CFLAGS="-D_BSD_SOURCE=1 $CFLAGS"\n             export CXXFLAGS="-D_BSD_SOURCE=1 $CXXFLAGS"\n             export LDFLAGS="$LDFLAGS $LIBS"\n             $PYTHON ./configure.py --bootstrap\n             mkdir -p $IDIR/bin\n             install -v -m755 ninja $IDIR/bin\n        """,\n        \'version\': \'1.9.0\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'python\', \'c++\'],\n            \'provides\': [\n                {\'env\': \'YNINJA\', \'value\': \'{pkgroot}/bin/ninja\'},\n                {\'env\': \'NINJA\', \'value\': \'{pkgroot}/bin/ninja\'},\n            ],\n        },\n    }\n', 'burn': '5dd598e0da162b58'}
{'name': 'darwin/x86_64/pl/diffutils.py', 'path': '/Users/pg83/newhope/plugins/diffutils.py', 'data': '@y.package\ndef diffutils0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/diffutils/diffutils-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             (cd man && echo \'#!\'"$YPERL -w" > tmp && cat help2man >> tmp && mv tmp help2man && chmod +x help2man)\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.7\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'libsigsegv\', \'perl5\', \'help2man\']\n        },\n    }\n', 'burn': 'c774d99d382adb0d'}
{'name': 'darwin/x86_64/pl/unwind.py', 'path': '/Users/pg83/newhope/plugins/unwind.py', 'data': '@y.package\ndef libunwind0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "http://releases.llvm.org/{version}/libunwind-{version}.src.tar.xz" 0\n             mv libunwind* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             cat src/AddressSpace.hpp | grep -v \'pragma comment\' > tmp && mv tmp src/AddressSpace.hpp\n             source mk.sh\n        """,\n        \'version\': \'9.0.0\',\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_libunwind.sh\'][\'data\']},\n        ],\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'unwind\'},\n            ],\n        },\n    }\n', 'burn': '69f4489ca7be433e'}
{'name': 'darwin/x86_64/pl/ncurses.py', 'path': '/Users/pg83/newhope/plugins/ncurses.py', 'data': '@y.package\ndef ncurses0():\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/pub/gnu/ncurses/ncurses-{version}.tar.gz" 1\n            source add_strip\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-shared --without-debug --without-ada --enable-widec --enable-pc-files --enable-overwrite --enable-ext-colors --enable-termcap --with-pkg-config --with-termlib --without-cxx --without-cxx-binding\n            $YMAKE -j $NTHRS || true\n            $YMAKE -j $NTHRS\n            mv install install-tmp\n            ln -s install-sh install\n            $YMAKE install\n\n            cd $IDIR/lib && (for i in `ls *.a`; do q=`echo $i | tr -d \'w\'`;  ln -s $i $q; done)\n        """,\n        \'version\': \'6.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'slibtool\'],\n            \'provides\': [\n                {\'lib\': \'ncurses\', \'configure\': {\'opts\': [\'--with-curses={pkgroot}\', \'--with-ncurses={pkgroot}\']}},\n                {\'env\': \'LIBS\', \'value\': \'"$LIBS -lncurses -ltinfo -lpanel -lmenu -lform"\'},\n            ],\n        },\n    }\n', 'burn': '13b55c89d62fd343'}
{'name': 'darwin/x86_64/pl/slang.py', 'path': '/Users/pg83/newhope/plugins/slang.py', 'data': '@y.package\ndef slang0():\n    return {\n        \'code\': """\n            source fetch "https://www.jedsoft.org/snapshots/slang-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR --with-readline=gnu --without-png --without-pcre --without-onig || exit 1\n            $YMAKE install-static || exit 1\n        """,\n        \'version\': \'pre2.3.3-15\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'zlib\', \'readline\', \'iconv\'],\n            \'provides\': [\'slang\'],\n        },\n    }\n', 'burn': '330cebf33ef42e2b'}
{'name': 'darwin/x86_64/pl/termcap.py', 'path': '/Users/pg83/newhope/plugins/termcap.py', 'data': '@y.package\ndef termcap0():\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/gnu/termcap/termcap-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static \n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """,\n        \'version\': \'1.3.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'termcap\'},\n            ],\n        },\n    }\n', 'burn': '6cb6acc25f500713'}
{'name': 'darwin/x86_64/pl/p7zip.py', 'path': '/Users/pg83/newhope/plugins/p7zip.py', 'data': '@y.package\ndef p7zip0():\n    return {\n        \'code\': \'\'\'\n             source fetch "https://downloads.sourceforge.net/p7zip/p7zip_{version}_src_all.tar.bz2" 1\n             cat makefile.linux_amd64  | grep -v \'PRE_COMP\' | sed -e \'s/CXX=.*/CXX=clang++/\' | sed -e \'s/CC=.*/CC=clang/\' > makefile.machine\n             export CFLAGS="-w $CFLAGS"\n             $YMAKE -j $NTHRS -f makefile DEST_DIR=$IDIR CC=$CC CXX=$CXX ALLFLAGS_C="$CFLAGS" ALLFLAGS_CPP="$CXXFLAGS -std=c++03" LDFLAGS="$LDFLAGS $LIBS" 7za install\n             (cd $IDIR/usr/local/ && mv * $IDIR/\n             rm -rf $IDIR/usr/local)\n             mkdir $IDIR/bin\n             install bin/7za $IDIR/bin\n        \'\'\',\n        \'version\': \'16.02\',\n        \'meta\': {\n            \'depends\': [\'c++\'],\n            \'kind\': [\'box\', \'tool\', \'library\'],\n            \'provides\': [\n                {\'env\': \'Y7ZA\', \'value\': \'{pkgroot}/bin/7za\'},\n            ],\n        },\n    }\n', 'burn': '678fd39984910b5c'}
{'name': 'darwin/x86_64/pl/pth.py', 'path': '/Users/pg83/newhope/plugins/pth.py', 'data': '@y.package\ndef pth0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/pth/pth-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-optimize --disable-shared --enable-static || exit 1\n             $YMAKE \n             $YMAKE install\n        """,\n        \'version\': \'2.0.7\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'pth\', \'configure\': {\'opts\': [\'--with-libpth-prefix={pkgroot}\', \'--with-pth\']}},\n            ],\n        },\n    }\n', 'burn': 'a74030dc716b6721'}
{'name': 'darwin/x86_64/pl/libiconv.py', 'path': '/Users/pg83/newhope/plugins/libiconv.py', 'data': '@y.package\ndef libiconv0():\n    extra = []\n\n    #if defined(__DARWIN__)\n        extra = [\n            {\'libs\': \'-framework CoreFoundation\'}\n        ]\n    #endif\n\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-{version}.tar.gz" 1\n            export LDFLAGS="$LDFLAGS $LIBS"\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        """,\n        \'version\': \'1.16\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'provides\': [\n                {\n                    \'lib\': \'iconv\',\n                    \'configure\': {\n                        \'opts\': [\n                            \'--with-libiconv-prefix={pkgroot}\',\n                            \'--with-iconv={pkgroot}\',\n                        ],\n                    },\n                    \'extra\': extra,\n                },\n                {\'lib\': \'charset\'},\n            ],\n        },\n    }\n', 'burn': '3bb81e05e8f0be3a'}
{'name': 'darwin/x86_64/pl/make_boot.py', 'path': '/Users/pg83/newhope/plugins/make_boot.py', 'data': '@y.package\ndef make_boot0():\n    extra = []\n\n    #if defined(__LINUX__)\n        extra = [\'musl-boot\']\n    #endif\n\n    code = \'\'\'\n        source fetch "http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-{version}.tar.gz" 1\n        export CPPFLAGS="-I./glob $CPPFLAGS"\n        $YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\n        $YSHELL ./build.sh\n        mkdir $IDIR/bin && cp make $IDIR/bin/ && chmod +x $IDIR/bin/make\n    \'\'\'\n\n    return {\n        \'code\': code,\n        \'version\': \'4.2\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': extra,\n            \'provides\': [\n                {\'env\': \'YMAKE\', \'value\': \'{pkgroot}/bin/make\'},\n            ],\n        },\n    }\n', 'burn': '3590797ab61227c4'}
{'name': 'darwin/x86_64/pl/jemalloc.py', 'path': '/Users/pg83/newhope/plugins/jemalloc.py', 'data': '@y.package\ndef jemalloc0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/jemalloc/jemalloc/releases/download/{version}/jemalloc-{version}.tar.bz2" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --disable-cxx --disable-prof --disable-libdl || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'5.2.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'make-boot\'],\n            \'provides\': [\n                {\'lib\': \'jemalloc\'},\n            ],\n        },\n    }\n', 'burn': '4b39edb3537cf14b'}
{'name': 'darwin/x86_64/pl/mc.py', 'path': '/Users/pg83/newhope/plugins/mc.py', 'data': 'def mc(gui):\n    return {\n        \'code\': """\n             source fetch "http://ftp.midnight-commander.org/mc-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-screen={gui}  || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """.replace(\'{gui}\', gui),\n        \'version\': \'4.8.23\',\n        \'meta\': {\n            \'kind\': [\'program\'],\n            \'depends\': [\'intl\', \'iconv\', \'glib\', gui],\n        }\n    }\n\n\n@y.package\ndef mc_slang0():\n    return mc(\'slang\')\n\n\n@y.package\ndef mc_ncurses0():\n    return mc(\'ncurses\')\n', 'burn': '24f804ca8c25e107'}
{'name': 'darwin/x86_64/pl/dash.py', 'path': '/Users/pg83/newhope/plugins/dash.py', 'data': '@y.package\ndef dash0():\n    return {\n        \'code\': """\n            source fetch "http://gondor.apana.org.au/~herbert/dash/files/dash-{version}.tar.gz" 1\n            export CFLAGS_FOR_BUILD="$CFLAGS $LDFLAGS $LIBS"\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         """,\n        \'version\': \'0.5.10.2\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'libedit\'],\n            \'provides\': [\n                {\'env\': \'YSHELL\', \'value\': \'{pkgroot}/bin/dash\'},\n                {\'env\': \'DASH\', \'value\': \'{pkgroot}/bin/dash\'},\n            ],\n        },\n    }\n', 'burn': 'dabb4b28aaa9d8a5'}
{'name': 'darwin/x86_64/pl/grep.py', 'path': '/Users/pg83/newhope/plugins/grep.py', 'data': '@y.package\ndef grep0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/grep/grep-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.3\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'intl\', \'libsigsegv\', \'iconv\']\n        },\n    }\n', 'burn': 'e4f011b48e86952b'}
{'name': 'darwin/x86_64/pl/bestbox.py', 'path': '/Users/pg83/newhope/plugins/bestbox.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def bestbox0():\n        return {\n            \'os\': \'linux\',\n            \'code\': """\n                mkdir -p $IDIR/bin\n\n                cp $TOYBOX $IDIR/bin\n                cp $BUSYBOX $IDIR/bin\n                cd $IDIR/bin\n\n                for i in `./toybox`; do\n                    ln -fs toybox $i\n                done\n\n                for x in `./busybox --list-full`; do\n                    y=$(basename $x)\n                    ln -fs busybox $y\n                done\n            """,\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'depends\': [\'busybox\', \'toybox\'],\n                \'contains\': [\'busybox\', \'toybox\'],\n                \'provides\': [\n                     {\'env\': \'YGZIP\', \'value\': \'{pkgroot}/bin/gzip\'},\n                     {\'env\': \'YTAR\', \'value\': \'{pkgroot}/bin/tar\'},\n                     {\'env\': \'YWGET\', \'value\': \'{pkgroot}/bin/wget\'},\n                     {\'env\': \'TOYBOX\', \'value\': \'{pkgroot}/bin/toybox\'},\n                     {\'env\': \'BUSYBOX\', \'value\': \'{pkgroot}/bin/busybox\'},\n                     {\'env\': \'YSHELL\', \'value\': \'{pkgroot}/bin/sh\'},\n                ],\n            },  \n        }\n\n\n    @y.package\n    def superbox0():\n        data = y.dc(bestbox0())\n        data[\'os\'] = \'linux\'\n        data[\'meta\'][\'provides\'].append({\'env\': \'COREUTILS\', \'value\': \'{pkgroot}/bin/coreutils\'})\n        data[\'meta\'][\'provides\'].append({\'env\': \'DASH\', \'value\': \'{pkgroot}/bin/dash\'})\n        data[\'meta\'][\'kind\'].append(\'box\')\n        data[\'meta\'][\'depends\'] += [\'coreutils\', \'dash\']\n        data[\'meta\'][\'contains\'] = [\'bestbox\', \'busybox\', \'toybox\', \'coreutils\', \'dash\']\n        data[\'code\'] += \'\'\'\n            cp "$COREUTILS" "$IDIR/bin/"\n            cd "$IDIR/bin/"\n            progs=$(./coreutils --help | tr \'\\\\n\' \' \' | sed -e \'s/.*\\[//\' | sed -e \'s/ Use: .*//\') \n\n            for i in $progs; do \n                ln -fs coreutils $i\n            done\n\n            cp "$DASH" "$IDIR/bin/"\n            cd "$IDIR/bin/"\n            ln -fs dash sh\n        \'\'\'\n\n        return data\n#endif\n', 'burn': 'cf0fc449132d4112'}
{'name': 'darwin/x86_64/pl/sqlite3.py', 'path': '/Users/pg83/newhope/plugins/sqlite3.py', 'data': '@y.package\ndef sqlite30():\n    return {\n        \'code\': """\n            source fetch "https://www.sqlite.org/2019/sqlite-autoconf-{version}.tar.gz" 1\n            export CFLAGS="-DSQLITE_OMIT_LOAD_EXTENSION=1 $CFLAGS"\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR || exit 1\n            $YMAKE install || exit 1\n        """,\n        \'version\': \'3300100\',\n        \'meta\': {\n            \'kind\': [\'library\', \'tool\', \'box\'],\n            \'depends\': [\'readline\'],\n            \'provides\': [\n                {\'lib\': \'sqlite3\'},\n            ],\n        },\n    }\n', 'burn': 'ade8cf079c607fd5'}
{'name': 'darwin/x86_64/pl/dl.py', 'path': '/Users/pg83/newhope/plugins/dl.py', 'data': '@y.package\ndef dl0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/pg83/newhope/archive/{version}.zip" 0\n             cd newhope* && cd support/libdl\n             $YMAKE CXX="$CXX" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" LIBS="$LIBS" AR="$AR" NM="$NM" RANLIB="$RANLIB" DESTDIR="$IDIR" install\n        """,\n        \'version\': \'670037f6c15db5c0b46b7452124bce8bcc2f9801\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'c++\'],\n            \'provides\': [\n                {\'lib\': \'dl\'},\n            ],\n        },\n    }\n', 'burn': '740d72e0e1abdeb6'}
{'name': 'darwin/x86_64/pl/unrar.py', 'path': '/Users/pg83/newhope/plugins/unrar.py', 'data': '@y.package\ndef unrar0():\n    return {\n        \'code\': """\n             source fetch "http://www.rarlab.com/rar/unrarsrc-{version}.tar.gz" 0\n             source add_strip\n             cd unrar\n             $YMAKE CC=$CC CXX=$CXX AR=$AR RANLIB=$RANLIB LDFLAGS="$LDFLAGS" CPPFLAGS="" CXXFLAGS="$CXXFLAGS" -f makefile\n             mkdir -p $IDIR/bin\n             install -v -m755 unrar $IDIR/bin\n        """,\n        \'version\': \'5.8.3\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'c++\'],\n            \'provides\': [\n                {\'env\': \'YUNRAR\', \'value\': \'{pkgroot}/bin/unrar\'},\n            ],\n        },\n    }\n', 'burn': '01c9a803cfbee24c'}
{'name': 'darwin/x86_64/pl/netbsd_curses.py', 'path': '/Users/pg83/newhope/plugins/netbsd_curses.py', 'data': '@y.package\ndef netbsd_curses0():\n    return {\n        \'code\': """\n            source fetch "https://github.com/sabotage-linux/netbsd-curses/archive/{version}.zip" 0\n            cd netbsd*\n            $YMAKE -j 1 CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="$CFLAGS $LDFLAGS $LIBS"  LDFLAGS="$LDFLAGS $LIBS" LDFLAGS_HOST="$LDFLAGS $LIBS" PREFIX=/ DESTDIR="$IDIR" all-static install-static\n        """,\n        \'version\': \'5b0d21692c6c2db31e960961f7a846429e701c30\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'make\'],\n            \'provides\': [\n                {\'lib\': \'curses\', \'configure\': {\'opts\': [\'--with-curses={pkgroot}\', \'--with-ncurses={pkgroot}\']}},\n                {\'env\': \'LIBS\', \'value\': \'"$LIBS -lform -lmenu -lpanel -lcurses -lterminfo"\'},\n            ],\n        },\n    }\n', 'burn': '00d023218397b2e4'}
{'name': 'darwin/x86_64/pl/openssl.py', 'path': '/Users/pg83/newhope/plugins/openssl.py', 'data': '@y.package\ndef openssl0():\n    version = \'1.1.1c\'\n    flags = \'linux-x86_64-cc\'\n    extra = []\n\n    return {\n        \'code\': """\n            source fetch "https://www.openssl.org/source/old/{minver}/openssl-{version}.tar.gz" 1\n            $YPERL ./Configure {flags} no-asm threads no-shared no-dso no-hw no-tests no-engine --prefix=$IDIR --openssldir=$IDIR -w -std=c99 -D_GNU_SOURCE=1 $CFLAGS $LDFLAGS $LIBS\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """.replace(\'{minver}\', version[:-1]).replace(\'{flags}\', flags),\n        \'version\': version,\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': extra + [\n                \'perl5\',\n                \'dl\',\n            ],\n            \'provides\': [\n                {\'lib\': \'ssl\'},\n            ],\n        },\n    }\n', 'burn': '3d7ac3fb583a0139'}
{'name': 'darwin/x86_64/pl/sed.py', 'path': '/Users/pg83/newhope/plugins/sed.py', 'data': '@y.package\ndef sed0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/sed/sed-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'4.7\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\'],\n            \'provides\': [\n                {\'env\': \'SED\', \'value\': \'{pkgroot}/bin/sed\'},\n            ],\n        }\n    }\n', 'burn': 'a4373c7dbb83af29'}
{'name': 'darwin/x86_64/pl/scripts.py', 'path': '/Users/pg83/newhope/plugins/scripts.py', 'data': '@y.cached()\ndef gen_check_log(data):\n    p1, p2, p3 = tuple(data.split(\'EOF\'))\n\n    args = p1.strip()\n    tmpl = p2.strip()\n    cmd = p3.strip()\n\n    def iter_params():\n        yield \'fgrep\'\n        yield args\n\n        for p in tmpl.split(\'\\n\'):\n            yield \'-e\'\n            yield "\'" + p.strip() + "\'"\n\n    grep = \' \'.join(iter_params())\n    cmd = cmd.format(grep=grep)\n\n    return cmd\n\n\ndef scripts_data(no_last=False):\n    def iter():\n        for x in y.globals.file_data:\n            k = x[\'name\']\n\n            if not k.startswith(\'sc/\'):\n                continue\n\n            k = k[3:]\n            v = x[\'data\']\n            func = {\'check_log\': gen_check_log}.get(k, lambda x: x)\n\n            yield {\'kind\': \'file\', \'path\': \'bin/\' + k, \'data\': func(v)}\n\n        for k, v in y.gen_extra_scripts():\n            yield {\'kind\': \'file\', \'path\': \'bin/\' + k, \'data\': v}\n\n        if no_last:\n            pass\n        else:\n            data = \'export PATH="{path}:$PATH" && . runtime\'.format(path=build_scripts_dir())\n\n            yield {\'kind\': \'file\', \'path\': \'build\', \'data\': data}\n\n    return list(sorted(iter(), key=lambda x: x[\'path\']))\n\n\ndef unpack_sh(no_last=False):\n    for x in scripts_data(no_last=no_last):\n        yield \'echo "{data}" | (base64 -D -i - -o - || base64 -d) > {fname}\'.format(data=y.base64.b64encode(x[\'data\'].encode(\'utf-8\')).decode(\'utf-8\'), fname=y.os.path.basename(x[\'path\']))\n\n\n@y.singleton\ndef build_scripts_dir():\n    data = list(unpack_sh(no_last=True))\n    ver = y.struct_dump_bytes(data)[:5]\n\n    return \'$MD/noarch-build-scripts-run-\' + ver\n\n\ndef build_scripts_path():\n    return build_scripts_dir() + \'/build\'\n\n\n@y.singleton\ndef build_scripts_run():\n    output = build_scripts_path()\n\n    res = {\n        \'inputs\': [],\n        \'output\': build_scripts_path(),\n        \'build\': [\n            \'export PATH=$PATH:/bin:/usr/bin:/usr/local/bin; rm -rf "{output}" || true && mkdir -p "{output}" && cd "{output}"\'.format(output=build_scripts_dir()),\n        ] + list(unpack_sh()),\n    }\n\n    res[\'hash\'] = y.struct_dump_bytes(res)\n\n    return res\n', 'burn': 'b16f29d464de02bf'}
{'name': 'darwin/x86_64/pl/libunistring.py', 'path': '/Users/pg83/newhope/plugins/libunistring.py', 'data': '@y.package\ndef libunistring0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/libunistring/libunistring-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'0.9.10\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'iconv\', \'xz\'],\n            \'provides\': [\n                {\'lib\': \'unistring\', \'configure\': {\'opt\': \'--with-libunistring-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '05375a487a2b9d48'}
{'name': 'darwin/x86_64/pl/kernel_h.py', 'path': '/Users/pg83/newhope/plugins/kernel_h.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def kernel_h0():\n        return {\n            \'os\': \'linux\',\n            \'code\': """\n                source fetch "https://github.com/sabotage-linux/kernel-headers/archive/{version}.zip" 0\n                mv kernel* xxx && cd xxx\n                cd x86_64\n                cp -RL ./include $IDIR/\n            """,\n            \'version\': \'fefadd9e4e093f776cd14ee3685a80eb4ca000f4\',\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'provides\': [\n                    {\'env\': \'CPPFLAGS\', \'value\': \'"$CPPFLAGS -I{pkgroot}/include"\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '78072e1ec6cfd237'}
{'name': 'darwin/x86_64/pl/m4.py', 'path': '/Users/pg83/newhope/plugins/m4.py', 'data': '@y.package\ndef m40():\n    return {\n        \'code\': """\n               source fetch "https://ftp.gnu.org/gnu/m4/m4-{version}.tar.gz" 1\n               $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-c++\n               $YMAKE -j $NTHRS\n               $YMAKE install\n        """,\n        \'version\': \'1.4.18\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'libsigsegv\'],\n            \'provides\': [\n                {\'env\': \'M4\', \'value\': \'{pkgroot}/bin/m4\'},\n            ],\n        },\n    }\n', 'burn': '9ee39b1676ed21d9'}
{'name': 'darwin/x86_64/pl/quasar_m4.py', 'path': '/Users/pg83/newhope/plugins/quasar_m4.py', 'data': '@y.package\ndef quasar_m40():\n    return {\n        \'code\': """\n               source fetch "http://haddonthethird.net/m4/m4-{version}.tar.bz2" 1\n               $YMAKE -j $NTHRS CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS $LIBS" CC="$CC" m4 \n               $YMAKE  PREFIX=/ DESTDIR="$IDIR" install\n        """,\n        \'version\': \'2\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'coreutils-boot\'],\n            \'provides\': [\n                {\'env\': \'M4\', \'value\': \'{pkgroot}/bin/m4\'},\n            ],\n        },\n    }\n', 'burn': 'c6c584fcf034190a'}
{'name': 'darwin/x86_64/pl/pkg_config.py', 'path': '/Users/pg83/newhope/plugins/pkg_config.py', 'data': 'def pkg_config_base(opts, deps, kind):\n    return {\n        \'code\': """\n            source fetch "https://pkg-config.freedesktop.org/releases/pkg-config-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared {opts}\n            cd glib\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-libiconv=gnu --enable-static --disable-shared {opts} --srcdir=.\n            $YMAKE -j $NTHRS\n            cd ..\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """.replace(\'{opts}\', \' \'.join(opts)),\n        \'version\': \'0.29.2\',\n        \'meta\': {\n            \'kind\': kind,\n            \'depends\': deps,\n            \'provides\': [\n                {\'env\': \'PKG_CONFIG\', \'value\': \'{pkgroot}/bin/pkg-config\'}\n            ],\n        },\n    }\n\n\n@y.package\ndef pkg_config0():\n    return pkg_config_base([], [\'iconv\', \'glib\', \'slibtool\'], [\'box\', \'tool\'])\n\n\n@y.package\ndef pkg_config_int0():\n    return pkg_config_base([\'--with-internal-glib\'], [\'iconv\', \'slibtool\'], [\'tool\'])\n', 'burn': '73f69256f1daf3c6'}
{'name': 'darwin/x86_64/pl/asciidoc.py', 'path': '/Users/pg83/newhope/plugins/asciidoc.py', 'data': '@y.package\ndef asciidoc0():\n    return {\n        \'code\': """\n             source fetch "https://downloads.sourceforge.net/project/asciidoc/asciidoc/{version}/asciidoc-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'8.6.9\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'provides\': [],\n        }\n    }\n', 'burn': '670b8de9b48c99c1'}
{'name': 'darwin/x86_64/pl/gettext.py', 'path': '/Users/pg83/newhope/plugins/gettext.py', 'data': '@y.package\ndef gettext0():\n    opts = [\n        \'--with-included-libunistring\',\n        \'--with-included-libxml\',\n        \'--with-included-gettext\',\n        \'--enable-relocatable\',\n        \'--disable-c++\',\n    ]\n\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/gnu/gettext/gettext-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared {opts} || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        """.replace(\'{opts}\', \' \'.join(opts)),\n        \'version\': \'0.20.1\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'depends\': [\'iconv\', \'ncurses\'],\n            \'provides\': [\n                {\'lib\': \'intl\', \'configure\': {\'opt\': \'--with-libintl-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '5ac3f54d7ac474ab'}
{'name': 'darwin/x86_64/pl/libmetalink.py', 'path': '/Users/pg83/newhope/plugins/libmetalink.py', 'data': '@y.package\ndef libmetalink0():\n    return {\n        \'code\': """\n             source fetch "https://launchpad.net/libmetalink/trunk/libmetalink-{version}/+download/libmetalink-{version}.tar.gz" 1\n             export SHELL=`which dash` \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libexpat=yes --with-libxml2=no || exit 1\n             $YMAKE -j $NTHRS SHELL=$SHELL\n             $YMAKE install\n        """,\n        \'version\': \'0.1.3\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'expat\', \'dash\'],\n            \'provides\': [\n                {\'lib\': \'metalink\', \'configure\': {\'opt\': \'--with-libmetalink={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '66bd19a0a159abc7'}
{'name': 'darwin/x86_64/pl/musl.py', 'path': '/Users/pg83/newhope/plugins/musl.py', 'data': '#if defined(__LINUX__)\n    def musl0():\n        return {\n            \'code\': """\n                source fetch "https://www.musl-libc.org/releases/musl-{version}.tar.gz" 1\n                export CFLAGS="-Diconv=musl_iconv -Diconv_open=musl_iconv_open -Diconv_close=musl_iconv_close -Ddlopen=musl_dlopen -Ddlclose=musl_dlclose -Ddlerror=musl_dlerror -Ddlsym=musl_dlsym $CFLAGS"\n                rm src/ldso/x86_64/dlsym.s\n                $YSHELL ./configure --prefix=$IDIR --enable-static --disable-shared || exit 1\n                $YMAKE -j $NTHRS || exit 1\n                $YMAKE install || exit 2\n                $(APPLY_EXTRA_PLAN_2)\n                source ./malloc.sh\n                (cd $IDIR/lib && $AR q libc.a crt1.o crti.o crtn.o && rm *crt* && $RANLIB libc.a && ln -s libc.a libmuslc.a && rm libdl.a)\n                rm $IDIR/include/iconv.h\n                source fetch_url "$IDIR/include/stdatomic.h" "https://raw.githubusercontent.com/llvm-mirror/clang/master/lib/Headers/stdatomic.h"\n            """,\n            \'version\': \'1.1.24\', \n            \'extra\': [\n                {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_musl.sh\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'crt/dso.c\', \'data\': y.globals.by_name[\'data/dso.c\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'malloc.sh\', \'data\': y.globals.by_name[\'data/malloc.sh\'][\'data\']},\n            ],\n            \'meta\': {\n                \'kind\': [\'library\'],\n                #\'contains\': [\'musl-boot\'],\n                #\'depends\': [\'bestbox\', \'make-boot\', \'mimalloc\'],\n                \'provides\': [\n                    {\'lib\': \'muslc\'},\n                    {\'env\': \'CPPFLAGS\', \'value\': \'"$CPPFLAGS -I{pkgroot}/include"\'},\n                    {\'env\': \'CFLAGS\', \'value\': \'"-w $CFLAGS"\'},\n                ],\n            },\n        }\n#endif\n', 'burn': 'f6f44dd6936d9110'}
{'name': 'darwin/x86_64/pl/git.py', 'path': '/Users/pg83/newhope/plugins/git.py', 'data': '#@y.ygenerator()\ndef git0():\n    return {\n        \'code\': """\n             source fetch "https://mirrors.edge.kernel.org/pub/software/scm/git/git-{version}.tar.xz" 1\n\n             export CFLAGS="-w -Icompat/regex -iquote$(pwd) $CFLAGS"\n             export CPPFLAGS="-w -Icompat/regex $CPPFLAGS"\n             export LDFLAGS="$LDFLAGS $LIBS"\n\n             ln -s $PYTHON ./python \n             export PATH="$(pwd):$PATH"\n\n             $YSHELL ./configure --prefix="$IDIR" --with-python=$PYTHON --with-perl=$YPERL --with-shell=$YSHELL --with-libpcre1 --with-openssl\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.24.1\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'pcre\', \'curl\', \'openssl\', \'expat\', \'python\', \'iconv\', \'perl5\', \'zlib\'],\n            \'provides\': [\n                {\'env\': \'GIT\', \'value\': \'{pkgroot}/bin/git\'},\n                {\'env\': \'GIT_EXEC_PATH\', \'value\': \'{pkgroot}/bin\'},\n            ],\n        },\n    }\n', 'burn': '8eb8f8b3ebe30ac9'}
{'name': 'darwin/x86_64/pl/python3.py', 'path': '/Users/pg83/newhope/plugins/python3.py', 'data': 'def python_base(kind):\n    version = \'3.8.0\'\n    ver = \'.\'.join(version.split(\'.\')[:2])\n\n    return {\n        \'code\': """\n            source fetch "https://www.python.org/ftp/python/{version}/Python-{version}.tar.xz" 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $(APPLY_EXTRA_PLAN_1)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-system-libmpdec --enable-static --disable-shared --with-signal-module --with-system-ffi || exit1\n            $YMAKE -j $NTHRS || exit 1\n            PY=`which ./python.exe || which ./python`\n            $PY ./fix.py patch ./setup.py\n            DUMP=1 $PY ./setup.py build > data.json\n            $PY ./fix.py ./data.json > Modules/Setup.local\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            cp -R Tools $IDIR/\n            mv $IDIR/Tools $IDIR/tools \n\n            (cd $IDIR/lib/python{ver} && ln -s config-{ver}* config-{ver})\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_2)\n            $(APPLY_EXTRA_PLAN_3)\n            source ./mk_staticpython.sh "$IDIR/bin/python{ver}" "{ver}" "3" "Py_BytesMain"\n        """.replace(\'{ver}\', ver),\n        \'version\': version,\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'Modules/Setup\', \'data\': y.builtin_data(\'data/Setup.local\')},\n            {\'kind\': \'file\', \'path\': \'fix.py\', \'data\': y.builtin_data(\'data/python3_bc.py\')},\n            {\'kind\': \'file\', \'path\': \'find_modules.py\', \'data\': y.builtin_data(\'data/find_modules.py\')},\n            {\'kind\': \'file\', \'path\': \'mk_staticpython.sh\', \'data\': y.builtin_data(\'data/mk_staticpython.sh\')},\n        ],\n        \'meta\': {\n            \'kind\': kind,\n            \'depends\': [\n                \'ncurses\', \'iconv\', \'intl\', \'zlib\',\n                \'pkg-config\', \'libffi\', \'readline\',\n                \'termcap\', \'mpdecimal\', \'xz\', \'bzip2\',\n                \'sqlite3\', \'openssl\', \'dl\',\n            ],\n            \'provides\': [\n                {\'lib\': \'python3.8\'},\n                {\'env\': \'PYTHON3\', \'value\': \'{pkgroot}/bin/staticpython3\'},\n                {\'env\': \'PYTHON3HOME\', \'value\': \'{pkgroot}/lib/python3.8\'},\n            ],\n        },\n    }\n\n\n@y.package\ndef python30():\n    return python_base([\'tool\', \'box\'])\n', 'burn': '46340505cc620ed8'}
{'name': 'darwin/x86_64/pl/bash.py', 'path': '/Users/pg83/newhope/plugins/bash.py', 'data': '@y.package\ndef bash0():\n    def do():\n        yield \'--disable-extended-glob-default\'\n        yield \'--enable-extended-glob\'\n        yield \'--enable-job-control\'\n\n    return {\n        \'code\': """\n            export CFLAGS="-fpermissive $CFLAGS -w"\n            export LIBS="$LDFLAGS $LIBS"\n            source fetch "https://ftp.gnu.org/gnu/bash/bash-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-bash-malloc --disable-nls  {extra}\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """.replace(\'{extra}\', \' \'.join(do())),\n        \'version\': \'5.0\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'readline\', \'ncurses\', \'intl\', \'iconv\']\n        }\n    }\n', 'burn': 'a23fd060980e45c9'}
{'name': 'darwin/x86_64/pl/cmake.py', 'path': '/Users/pg83/newhope/plugins/cmake.py', 'data': '@y.package\ndef cmake0():\n    extra = []\n\n    #if defined(__LINUX__)\n        extra = [\'kernel-h\']\n    #endif\n\n    return {\n        \'code\': """\n             source fetch "https://github.com/Kitware/CMake/releases/download/v{version}/cmake-{version}.tar.gz" 1\n             export CFLAGS="-w $CFLAGS $LDFLAGS $LIBS"\n             export CXXFLAGS="-w $CXXFLAGS $LDFLAGS $LIBS"\n             $YSHELL ./bootstrap --system-expat --system-zlib --system-bzip2 --system-liblzma --system-libarchive --prefix=$IDIR --parallel=$NTHRS -- -DCMAKE_USE_OPENSSL=OFF -Dfortran=OFF -DBUILD_TESTING=OFF || true\n             echo > .clang-tidy\n             ./Bootstrap.cmk/cmake .\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.16.1\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\n                \'c++\',\n                \'zlib\',\n                \'bzip2\',\n                \'xz\',\n                \'libarchive\',\n                \'expat\',\n                \'dl\',\n                \'iconv\',\n            ] + extra,\n            \'provides\': [\n                {\'env\': \'CMAKE\', \'value\': \'{pkgroot}/bin/cmake\'},\n            ],\n        }\n    }\n', 'burn': '2daa4ff5af280e70'}
{'name': 'darwin/x86_64/pl/expat.py', 'path': '/Users/pg83/newhope/plugins/expat.py', 'data': '@y.package\ndef expat0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/libexpat/libexpat/releases/download/R_{_version_}/expat-{version}.tar.bz2" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-examples --enable-static --disable-shared || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.2.9\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'expat\', \'configure\': {\'opt\': \'--with-expat={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '13857abf72a4a617'}
{'name': 'darwin/x86_64/pl/slibtool.py', 'path': '/Users/pg83/newhope/plugins/slibtool.py', 'data': '@y.package\ndef slibtool0():\n    return {\n        \'code\': """\n             source fetch "https://git.foss21.org/slibtool/snapshot/slibtool-{version}.tar.xz" 1\n             $YSHELL ./configure --prefix=$IDIR || exit1 \n             $YMAKE -j $NTHRS install || exit 1\n        """,\n        \'version\': \'0.5.28\',\n        \'meta\': {\n            \'kind\': [\'tool\', \'box\'],\n            \'provides\': [\n                {\'env\': \'LIBTOOL\', \'value\': \'export LIBTOOL="{pkgroot}/bin/dlibtool"\'},\n            ],\n        },\n    }\n', 'burn': '2766f9c056a42c1d'}
{'name': 'darwin/x86_64/pl/mimalloc.py', 'path': '/Users/pg83/newhope/plugins/mimalloc.py', 'data': '@y.package\ndef mimalloc0():\n    depends = []\n\n    #if defined(__LINUX__)\n        depends1 = [\'musl-boot\', \'kernel-h\']\n    #endif\n\n    return {\n        \'code\': """\n             source fetch "https://github.com/microsoft/mimalloc/archive/acb03c54971c4b0a43a6d17ea55a9d5feb88972f.zip" 0\n             (mv mim* xxx && mv xxx/* ./)\n             $CC $CFLAGS -DMI_MALLOC_OVERRIDE=1 -std=c11 -Iinclude -Dasm=__asm__ -c src/static.c -o static.o\n             $AR q libmimalloc.a static.o\n             $RANLIB libmimalloc.a\n             mkdir $IDIR/lib\n             mv libmimalloc.a $IDIR/lib/ \n        """,\n        \'version\': \'\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': depends,\n            \'provides\': [\n                {\'lib\': \'mimalloc\'},\n            ],\n        },\n    }\n', 'burn': '1fce9b2d809c68d6'}
{'name': 'darwin/x86_64/pl/pcre.py', 'path': '/Users/pg83/newhope/plugins/pcre.py', 'data': '@y.package\ndef pcre0():\n    return {\n        \'code\': """\n             source fetch "https://downloads.sourceforge.net/project/pcre/pcre/{version}/pcre-{version}.tar.bz2" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-newline-is-anycrlf --enable-utf8 --enable-jit --enable-c++ || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'8.43\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'pkg-config-int\', \'zlib\', \'bzip2\', \'c++\'],\n            \'provides\': [\n                {\'lib\': \'pcre\'},\n            ],\n        },\n    }\n', 'burn': '777b78834de7673f'}
{'name': 'darwin/x86_64/pl/help2man.py', 'path': '/Users/pg83/newhope/plugins/help2man.py', 'data': '@y.package\ndef help2man0():\n    return {\n        \'code\': """\n             source fetch "https://mirror.tochlab.net/pub/gnu/help2man/help2man-{version}.tar.xz" 1\n             $YSHELL ./configure --prefix="$IDIR"\n             $YMAKE -j $NTHRS\n             $YMAKE install  \n        """,\n        \'version\': \'1.47.9\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'perl5\'],\n            \'provides\': [\n                {\'env\': \'HELP2MAN\', \'value\': \'{pkgroot}/bin/help2man\'},\n            ],\n        },\n    }\n', 'burn': '9b6a17c776c51a24'}
{'name': 'darwin/x86_64/pl/readline.py', 'path': '/Users/pg83/newhope/plugins/readline.py', 'data': '@y.package\ndef readline0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/readline/readline-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install 2>&1 | grep -v \'No such file or directory\'\n        """,\n        \'version\': \'8.0\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'ncurses\', \'termcap\'],\n            \'provides\': [\n                {\'lib\': \'readline\', \'configure\': {\'opts\': [\'--with-installed-readline={pkgroot}\', \'--with-readline={pkgroot}\']}},\n            ],\n        },\n    }\n', 'burn': 'e435ebf89f2665a6'}
{'name': 'darwin/x86_64/pl/musl_boot.py', 'path': '/Users/pg83/newhope/plugins/musl_boot.py', 'data': '#if defined(__LINUX__)\n    def musl_boot0():\n        return {\n            \'code\': """\n                 source fetch "https://www.musl-libc.org/releases/musl-{version}.tar.gz" 1\n                 $(APPLY_EXTRA_PLAN_0)\n                 $(APPLY_EXTRA_PLAN_1)\n                 export CFLAGS="-Diconv=musl_iconv -Diconv_open=musl_iconv_open -Diconv_close=musl_iconv_close $CFLAGS"\n                 sh ./mk.sh x86_64 .\n                 SRC=$(pwd) BDIR=$BDIR/build IDIR=$IDIR CC=$CC sh run.sh\n                 (cd $IDIR/lib && ln -s libc.a libmuslc.a)\n                 rm $IDIR/include/iconv.h\n                 source fetch_url "$IDIR/include/stdatomic.h" "https://raw.githubusercontent.com/llvm-mirror/clang/master/lib/Headers/stdatomic.h"\n            """,\n            \'version\': \'1.1.24\', \n            \'extra\': [\n                {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_musl.sh\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'crt/dso.c\', \'data\': y.globals.by_name[\'data/dso.c\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'malloc.sh\', \'data\': y.globals.by_name[\'data/malloc.sh\'][\'data\']},\n            ],\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'depends\': [\'bestbox\'],\n                \'provides\': [\n                    {\'lib\': \'muslc\'},\n                    {\'env\': \'CPPFLAGS\', \'value\': \'"$CPPFLAGS -I{pkgroot}/include"\'},\n                    {\'env\': \'CFLAGS\', \'value\': \'"-w $CFLAGS"\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '023f3b2066b0c559'}
{'name': 'darwin/x86_64/pl/libcxx.py', 'path': '/Users/pg83/newhope/plugins/libcxx.py', 'data': '@y.package\ndef libcxx0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "http://releases.llvm.org/{version}/libcxx-{version}.src.tar.xz" 0\n             mv libcxx* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        """,\n        \'version\': \'9.0.0\',\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_libcxx_darwin.sh\'][\'data\']},\n        ],\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'libcxxrt\'],\n            \'provides\': [\n                {\'env\': \'CPPFLAGS\', \'value\': \'"-w -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"\'},\n                {\'lib\': \'c++\'},\n            ],\n        },\n    }\n', 'burn': 'd69f2a91652992b9'}
{'name': 'darwin/x86_64/pl/compiler_rt.py', 'path': '/Users/pg83/newhope/plugins/compiler_rt.py', 'data': '@y.package\ndef compiler_rt0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "http://releases.llvm.org/9.0.0/compiler-rt-9.0.0.src.tar.xz" 1\n        """,\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'crt\'},\n            ],\n        },\n    }\n', 'burn': '6b0652efd174d66f'}
{'name': 'darwin/x86_64/pl/coreutils.py', 'path': '/Users/pg83/newhope/plugins/coreutils.py', 'data': 'def coreutils_impl(deps, kind):\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/coreutils/coreutils-{version}.tar.xz" 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin --without-gmp --enable-single-binary=symlinks --enable-no-install-program=stdbuf || exit 1\n             $YMAKE -j $NTHRS || true\n             echo >> src/libstdbuf.c\n             echo >> \'int main() {}\' >> src/libstdbuf.c\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'8.31\',\n        \'meta\': {\n            \'kind\': [\'tool\'] + kind,\n            \'depends\': [\'iconv\', \'intl\'] + deps,\n            \'provides\': [\n                {\'env\': \'COREUTILS\', \'value\': \'{pkgroot}/bin/coreutils\'},\n            ],\n        },\n    }\n\n\n@y.package\ndef coreutils0():\n    return coreutils_impl([\'openssl\'], [\'box\'])\n\n\n@y.package\ndef coreutils_boot0():\n    return coreutils_impl([], [])\n', 'burn': '11a7cd2c8925928b'}
{'name': 'darwin/x86_64/pl/python.py', 'path': '/Users/pg83/newhope/plugins/python.py', 'data': '@y.package\ndef python0():\n    return {\n        \'code\': """\n            source fetch "https://www.python.org/ftp/python/{version}/Python-{version}.tar.xz" 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-signal-module --with-system-expat --with-system-ffi || exit1\n            ##echo "#define HAVE_PTH 1" >> pyconfig.h\n            ##echo "#undef HAVE_PTHREAD_H" >> pyconfig.h \n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_1)\n            $(APPLY_EXTRA_PLAN_2)\n            export PYTHONHOME="$IDIR"\n            source ./mk_staticpython.sh "$IDIR/bin/python2.7" "2.7" "2" "Py_Main"\n        """,\n        \'version\': \'2.7.17\',\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'Modules/Setup.local\', \'data\': y.builtin_data(\'data/Setup.local2\')},\n            {\'kind\': \'file\', \'path\': \'find_modules.py\', \'data\': y.builtin_data(\'data/find_modules.py\')},\n            {\'kind\': \'file\', \'path\': \'mk_staticpython.sh\', \'data\': y.builtin_data(\'data/mk_staticpython.sh\')},\n        ],\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'ncurses\', \'iconv\', \'intl\', \'zlib\', \'pkg-config-int\', \'libffi\', \'readline\', \'termcap\', \'expat\', \'sqlite3\'],\n            \'provides\': [\n                {\'lib\': \'python2.7\'},\n                {\'env\': \'PYTHON\', \'value\': \'{pkgroot}/bin/staticpython2\'},\n                {\'env\': \'PYTHONHOME\', \'value\': \'{pkgroot}/lib/python2.7\'},\n            ],\n        },\n    }\n', 'burn': '37fbec8a4bc363a8'}
{'name': 'darwin/x86_64/pl/mpdecimal.py', 'path': '/Users/pg83/newhope/plugins/mpdecimal.py', 'data': '@y.package\ndef mpdecimal0():\n    return {\n        \'code\': """\n             source fetch "http://deb.debian.org/debian/pool/main/m/mpdecimal/mpdecimal_{version}.orig.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             (cd libmpdec && $YMAKE -j $NTHRS libmpdec.a)\n             touch libmpdec/libmpdec.so.2.4.2\n             $YMAKE install\n             rm -rf $IDIR/lib/*.so.*\n             rm -rf $IDIR/lib/*.so\n        """,\n        \'version\': \'2.4.2\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'mpdec\'},\n            ],\n        },\n    }\n', 'burn': 'a07a45790eb94f8f'}
{'name': 'darwin/x86_64/pl/libsigsegv.py', 'path': '/Users/pg83/newhope/plugins/libsigsegv.py', 'data': '@y.package\ndef libsigsegv0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/libsigsegv/libsigsegv-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.12\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'sigsegv\', \'configure\': {\'opt\': \'--with-libsigsegv-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '4a48227b2da8db03'}
ygen darwin.x86_64.pl.yash {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: yash
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10435ca60>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://github.com/magicant/yash/archive/ae772d184ae4362df66f646fc6b7ff8164030a7b.zip\ 0\n            mv ./yash* ./xxx\n            mv ./xxx/* ./\n            export LDFLAGS=\$LDFLAGS $LIBS\\n            export CFLAGS=\-Dwordfree=yash_wordfree $CFLAGS\\n            $YSHELL ./configure --prefix=$IDIR --enable-socket --enable-printf --enable-lineedit --enable-history --enable-double-bracket --enable-dirstack --enable-array\n            echo 'install-rec:' > doc/Makefile\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         
        meta: {
            depends: [
                intl
                ncurses
                xz
                tar
                asciidoc
                python
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YSHELL_OPT
                    value: {pkgroot}/bin/yash
                }
                {
                    env: YASH
                    value: {pkgroot}/bin/yash
                }
            ]
        }
        version: 2.49
    }
]
ygen darwin.x86_64.pl.glib {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: glib
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043d73a0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \http://ftp.acc.umu.se/pub/gnome/sources/glib/2.30/glib-2.30.3.tar.xz\ 1\n             export CFLAGS=\-D_GNU_SOURCE=1 -I$(pwd)/inc $CFLAGS\\n             (mkdir inc && cd inc && mkdir sys && cd sys && echo '#include <sys/sysmacros.h>' > mkdev.h)\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libiconv=gnu --disable-nls || exit 1\n             echo '#!'$YSHELL > tmp && cat libtool >> tmp && mv tmp libtool && chmod +x libtool\n             $YMAKE -j $NTHRS || exit 1\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                libffi
                pkg-config-int
                coreutils
                python
                zlib
                dash
                pcre
                slibtool
            ]
            kind: [
                library
            ]
            provides: [
                {
                    extra: [
                        {
                            libs: -framework CoreServices -framework CoreFoundation
                        }
                        {
                            ipath: {pkgroot}/include/glib-2.0
                        }
                        {
                            ipath: {pkgroot}/lib/glib-2.0/include
                        }
                    ]
                    lib: glib-2.0
                }
            ]
        }
        version: 2.30.3
    }
]
ygen darwin.x86_64.pl.make {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: make
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043d7dc0>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: source fetch \http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-4.2.tar.gz\ 1\n$YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\n$YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-load || exit 1\n$YMAKE -j $NTHRS\n$YMAKE install
        meta: {
            contains: [
                make-boot
            ]
            depends: [
                make-boot
            ]
            kind: [
                tool
                box
            ]
            provides: [
                {
                    env: YMAKE
                    value: {pkgroot}/bin/make
                }
            ]
        }
        version: 4.2
    }
]
ygen darwin.x86_64.pl.zlib {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: zlib
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043d85e0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \http://zlib.net/zlib-1.2.11.tar.gz\ 1\n            export LDFLAGS=\$LDFLAGS $LIBS\\n            export TEST_LDFLAGS=\$LDFLAGS -L. libz.a\\n            $YSHELL ./configure $COFLAGS --static --64 --prefix=$IDIR || exit 1\n            $YMAKE -j $NTHRS TEST_LDFLAGS=\$TEST_LDFLAGS\\n            $YMAKE install\n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-z={pkgroot}
                    }
                    lib: z
                }
                {
                    env: ZLIB_CFLAGS
                    value: \-I{pkgroot}/include\
                }
                {
                    env: ZLIB_LIBS
                    value: \-L{pkgroot}/lib -lz\
                }
            ]
        }
        version: 1.2.11
    }
]
ygen darwin.x86_64.pl.tar {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: tar
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043d8dc0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/tar/tar-1.32.tar.gz\ 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR\n             $YMAKE -j $NTHRS && $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                gzip
                bzip2
                xz
                unrar
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YGNUTAR
                    value: {pkgroot}/bin/tar
                }
            ]
        }
        version: 1.32
    }
]
ygen darwin.x86_64.pl.libidn2 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libidn2
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043dc700>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/libidn/libidn2-2.2.0.tar.gz\ 1\n\n             ln -s \$CC\ ./gcc\n             ln -s \$CC\ ./cc\n             export PATH=\$(pwd):$PATH\\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                iconv
                libunistring
                pkg-config
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libidn2={pkgroot}
                    }
                    lib: idn2
                }
            ]
        }
        version: 2.2.0
    }
]
ygen darwin.x86_64.pl.gawk {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: gawk
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043dcf70>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://mirror.tochlab.net/pub/gnu/gawk/gawk-5.0.1.tar.xz\ 1\n\n             ln -s $AR ./ar\n             export PATH=\$(pwd):$PATH\\n             export CFLAGS=\-Derr=gawk_err $CFLAGS\\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin/awk_exec --disable-shared --enable-static --disable-extensions || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                readline
                libsigsegv
                c++
            ]
            kind: [
                box
                tool
            ]
            soft: [
                mpfr
                gmp
            ]
        }
        version: 5.0.1
    }
]
ygen darwin.x86_64.pl.libffi {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libffi
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043e0820>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://sourceware.org/ftp/libffi/libffi-3.2.1.tar.gz\ 1\n\n             sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/'                  -i include/Makefile.in\n\n             sed -e '/^includedir/ s/=.*$/=@includedir@/'                  -e 's/^Cflags: -I${includedir}/Cflags:/'                  -i libffi.pc.in\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                sed
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: ffi
                }
            ]
        }
        version: 3.2.1
    }
]
ygen darwin.x86_64.pl.bison {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: bison
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043ee160>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/bison/bison-3.4.2.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-relocatable || exit 1\n             $YMAKE -j $NTHRS || true\n             $YMAKE || true\n             $YMAKE\n             $YMAKE install\n        
        meta: {
            depends: [
                c++
                m4
                iconv
                intl
                xz
                perl5
            ]
            kind: [
                box
                tool
            ]
        }
        version: 3.4.2
    }
]
ygen darwin.x86_64.pl.gettext_tiny {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.bzip2 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: bzip2
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043eef70>
        gen: human
        kind: [
            library
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz\ 1\n            $YMAKE -j $NTHRS CC=$CC AR=$AR RANLIB=$RANLIB LDFLAGS=\$LDFLAGS $LIBS\ CFLAGS=\$CFLAGS\ PREFIX=\$IDIR\ install\n        
        meta: {
            kind: [
                library
                box
                tool
            ]
            provides: [
                {
                    lib: bz2
                }
                {
                    env: YBZIP2
                    value: {pkgroot}/bin/bzip2
                }
            ]
        }
        version: 1.0.8
    }
]
ygen darwin.x86_64.pl.libedit {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libedit
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043f6820>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \http://thrysoee.dk/editline/libedit-20191025-3.1.tar.gz\ 1\n             export CFLAGS=\-D__STDC_ISO_10646__=1 $CFLAGS\\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                ncurses
                termcap
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: edit
                }
            ]
        }
        version: 20191025-3.1
    }
]
ygen darwin.x86_64.pl.toybox {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.busybox {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.xz {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: xz
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043fa700>
        gen: human
        kind: [
            box
            library
            tool
        ]
    }
    {
        code: \n             source fetch \https://sourceforge.net/projects/lzmautils/files/xz-5.2.4.tar.gz/download\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --disable-threads && $YMAKE -j $NTHRS && $YMAKE install\n        
        meta: {
            kind: [
                box
                library
                tool
            ]
            provides: [
                {
                    lib: lzma
                }
                {
                    env: YXZ
                    value: {pkgroot}/bin/xz
                }
                {
                    env: YXZCAT
                    value: {pkgroot}/bin/xzcat
                }
            ]
        }
        version: 5.2.4
    }
]
ygen darwin.x86_64.pl.libarchive {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libarchive
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043ff040>
        gen: human
        kind: [
            library
            tool
            box
        ]
    }
    {
        code: \n             source fetch \https://libarchive.org/downloads/libarchive-3.4.0.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                zlib
                bzip2
                xz
            ]
            kind: [
                library
                tool
                box
            ]
            provides: [
                {
                    lib: archive
                }
                {
                    env: YTAR
                    value: {pkgroot}/bin/bsdtar
                }
            ]
        }
        version: 3.4.0
    }
]
ygen darwin.x86_64.pl.yasm {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.curl {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: curl
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1043ffdc0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://curl.haxx.se/download/curl-7.67.0.tar.xz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                openssl
                libidn2
                libmetalink
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: CURL
                    value: {pkgroot}/bin/curl
                }
            ]
        }
        version: 7.67.0-20191011
    }
]
ygen darwin.x86_64.pl.perl5 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: perl5
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044085e0>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            source fetch \https://www.cpan.org/src/5.0/perl-5.30.1.tar.gz\ 0\n            mv perl* xxx\n            cd xxx\n\n            ln -s $AR ./ar\n            ln -s $NM ./nm\n            ln -s $CC ./gcc\n            export PATH=\$(pwd):$PATH\\n\n            ./Configure -des -Accflags=\$CFLAGS\ -Aldflags=\$LDFLAGS $LIBS\ -Dusethreads -Duse64bitall -Dprefix=$IDIR -Duseperlio -Uusesfio -Duseshrplib=false -Dusedl=false -Dcc=\$CC $CFLAGS $LDFLAGS $LIBS\\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                zlib
                coreutils-boot
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: YPERL
                    value: {pkgroot}/bin/perl
                }
            ]
        }
        prepare: \n            source perl5_env\n        
        version: 5.30.1
    }
]
ygen darwin.x86_64.pl.cxxrt {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libcxxrt
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104408e50>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \https://github.com/pathscale/libcxxrt/archive/master.zip\ 0\n             mv libcxxrt* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        
        extra: [
            {
                data: set -e\n\nrm -rf obj || true\nmkdir obj\n\ncxx_srcs=$(ls src/*.cc)\nc_srcs=$(ls src/*.c)\n\nfor s in $cxx_srcs; do\n    n=$(basename $s)\n    $CXX $CFLAGS $CXXFLAGS -c $s -o obj/$n.o\ndone\n\nfor s in $c_srcs; do\n    n=$(basename $s)\n    $CC $CFLAGS -c $s -o obj/$n.o\ndone\n\n$AR q obj/libcxxrt.a obj/*.o \n$RANLIB obj/libcxxrt.a\n\nmkdir $IDIR/lib || true\nmkdir $IDIR/include || true\n\ncp obj/libcxxrt.a $IDIR/lib/\ncp src/*.h $IDIR/include/\n
                kind: file
                path: mk.sh
            }
        ]
        meta: {
            depends: [
                libunwind
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: cxxrt
                }
                {
                    env: LIBCXXRT_INC
                    value: \{pkgroot}/include\
                }
            ]
        }
    }
]
ygen darwin.x86_64.pl.gzip {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: gzip
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104410790>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/gzip/gzip-1.10.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                slibtool
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YGZIP
                    value: {pkgroot}/bin/gzip
                }
            ]
        }
        version: 1.10
    }
]
ygen darwin.x86_64.pl.ninja {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: ninja
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044140d0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://github.com/ninja-build/ninja/archive/v1.9.0.tar.gz\ 0\n             mv ninja* xxx\n             cd xxx\n             export CFLAGS=\-D_BSD_SOURCE=1 $CFLAGS\\n             export CXXFLAGS=\-D_BSD_SOURCE=1 $CXXFLAGS\\n             export LDFLAGS=\$LDFLAGS $LIBS\\n             $PYTHON ./configure.py --bootstrap\n             mkdir -p $IDIR/bin\n             install -v -m755 ninja $IDIR/bin\n        
        meta: {
            depends: [
                python
                c++
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YNINJA
                    value: {pkgroot}/bin/ninja
                }
                {
                    env: NINJA
                    value: {pkgroot}/bin/ninja
                }
            ]
        }
        version: 1.9.0
    }
]
ygen darwin.x86_64.pl.diffutils {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: diffutils
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044149d0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/diffutils/diffutils-3.7.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             (cd man && echo '#!'\$YPERL -w\ > tmp && cat help2man >> tmp && mv tmp help2man && chmod +x help2man)\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                libsigsegv
                perl5
                help2man
            ]
            kind: [
                box
                tool
            ]
        }
        version: 3.7
    }
]
ygen darwin.x86_64.pl.unwind {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libunwind
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104415310>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \http://releases.llvm.org/9.0.0/libunwind-9.0.0.src.tar.xz\ 0\n             mv libunwind* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             cat src/AddressSpace.hpp | grep -v 'pragma comment' > tmp && mv tmp src/AddressSpace.hpp\n             source mk.sh\n        
        extra: [
            {
                data: \nset -e\nset -x\n\nCOMMON=\-I./src -I./include -D_LIBUNWIND_HAS_COMMENT_LIB_PRAGMA -funwind-tables -nostdinc++ -D_DEBUG -D_LIBUNWIND_IS_NATIVE_ONLY\\nCXXFLAGS=\$COMMON -std=c++11 -fstrict-aliasing -fno-exceptions -fno-rtti $CXXFLAGS\\nCFLAGS=\$COMMON -std=c99 $CFLAGS\\n\nrm -rf obj || true\nmkdir obj\n\ncxx_src=\\nsrc/libunwind.cpp\nsrc/Unwind-EHABI.cpp\nsrc/Unwind-seh.cpp\nsrc/Unwind_AppleExtras.cpp\n\\n\ncc_srcs=\\nsrc/UnwindLevel1.c\nsrc/UnwindLevel1-gcc-ext.c\nsrc/Unwind-sjlj.c\n\\n\nasm_srcs=\\nsrc/UnwindRegistersRestore.S\nsrc/UnwindRegistersSave.S\nunwind.c\n\\n\necho 'extern *void_ZN9libunwind15Registers_arm646jumptoEv;' >> unwind.c\n\nfor s in $cxx_src; do\n    $CXX $CXXFLAGS -c $s -o obj/$(basename $s).o\ndone\n\nfor s in $cc_srcs $asm_srcs; do\n    $CC $CFLAGS -c $s -o obj/$(basename $s).o\ndone\n\n$AR q obj/libunwind.a obj/*.o\n$RANLIB obj/libunwind.a\n\nmkdir $IDIR/lib\ncp obj/libunwind.a $IDIR/lib\ncp -R include $IDIR/\n
                kind: file
                path: mk.sh
            }
        ]
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    lib: unwind
                }
            ]
        }
        version: 9.0.0
    }
]
ygen darwin.x86_64.pl.ncurses {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: ncurses
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104415ca0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.1.tar.gz\ 1\n            source add_strip\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-shared --without-debug --without-ada --enable-widec --enable-pc-files --enable-overwrite --enable-ext-colors --enable-termcap --with-pkg-config --with-termlib --without-cxx --without-cxx-binding\n            $YMAKE -j $NTHRS || true\n            $YMAKE -j $NTHRS\n            mv install install-tmp\n            ln -s install-sh install\n            $YMAKE install\n\n            cd $IDIR/lib && (for i in `ls *.a`; do q=`echo $i | tr -d 'w'`;  ln -s $i $q; done)\n        
        meta: {
            depends: [
                slibtool
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-curses={pkgroot}
                            --with-ncurses={pkgroot}
                        ]
                    }
                    lib: ncurses
                }
                {
                    env: LIBS
                    value: \$LIBS -lncurses -ltinfo -lpanel -lmenu -lform\
                }
            ]
        }
        version: 6.1
    }
]
ygen darwin.x86_64.pl.slang {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: slang
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104420550>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://www.jedsoft.org/snapshots/slang-pre2.3.3-15.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR --with-readline=gnu --without-png --without-pcre --without-onig || exit 1\n            $YMAKE install-static || exit 1\n        
        meta: {
            depends: [
                zlib
                readline
                iconv
            ]
            kind: [
                library
            ]
            provides: [
                slang
            ]
        }
        version: pre2.3.3-15
    }
]
ygen darwin.x86_64.pl.termcap {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: termcap
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104420e50>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/gnu/termcap/termcap-1.3.1.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static \n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    lib: termcap
                }
            ]
        }
        version: 1.3.1
    }
]
ygen darwin.x86_64.pl.p7zip {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: p7zip
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104424700>
        gen: human
        kind: [
            box
            tool
            library
        ]
    }
    {
        code: \n             source fetch \https://downloads.sourceforge.net/p7zip/p7zip_16.02_src_all.tar.bz2\ 1\n             cat makefile.linux_amd64  | grep -v 'PRE_COMP' | sed -e 's/CXX=.*/CXX=clang++/' | sed -e 's/CC=.*/CC=clang/' > makefile.machine\n             export CFLAGS=\-w $CFLAGS\\n             $YMAKE -j $NTHRS -f makefile DEST_DIR=$IDIR CC=$CC CXX=$CXX ALLFLAGS_C=\$CFLAGS\ ALLFLAGS_CPP=\$CXXFLAGS -std=c++03\ LDFLAGS=\$LDFLAGS $LIBS\ 7za install\n             (cd $IDIR/usr/local/ && mv * $IDIR/\n             rm -rf $IDIR/usr/local)\n             mkdir $IDIR/bin\n             install bin/7za $IDIR/bin\n        
        meta: {
            depends: [
                c++
            ]
            kind: [
                box
                tool
                library
            ]
            provides: [
                {
                    env: Y7ZA
                    value: {pkgroot}/bin/7za
                }
            ]
        }
        version: 16.02
    }
]
ygen darwin.x86_64.pl.pth {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: pth
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104424ee0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/pth/pth-2.0.7.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-optimize --disable-shared --enable-static || exit 1\n             $YMAKE \n             $YMAKE install\n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-libpth-prefix={pkgroot}
                            --with-pth
                        ]
                    }
                    lib: pth
                }
            ]
        }
        version: 2.0.7
    }
]
ygen darwin.x86_64.pl.libiconv {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libiconv
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104429790>
        gen: human
        kind: [
            box
            library
            tool
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz\ 1\n            export LDFLAGS=\$LDFLAGS $LIBS\\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        
        meta: {
            kind: [
                box
                library
                tool
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-libiconv-prefix={pkgroot}
                            --with-iconv={pkgroot}
                        ]
                    }
                    extra: []
                    lib: iconv
                }
                {
                    lib: charset
                }
            ]
        }
        version: 1.16
    }
]
ygen darwin.x86_64.pl.make_boot {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: make-boot
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104430040>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n        source fetch \http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-4.2.tar.gz\ 1\n        export CPPFLAGS=\-I./glob $CPPFLAGS\\n        $YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\n        $YSHELL ./build.sh\n        mkdir $IDIR/bin && cp make $IDIR/bin/ && chmod +x $IDIR/bin/make\n    
        meta: {
            depends: []
            kind: [
                tool
            ]
            provides: [
                {
                    env: YMAKE
                    value: {pkgroot}/bin/make
                }
            ]
        }
        version: 4.2
    }
]
ygen darwin.x86_64.pl.jemalloc {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: jemalloc
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104430820>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --disable-cxx --disable-prof --disable-libdl || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                make-boot
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: jemalloc
                }
            ]
        }
        version: 5.2.1
    }
]
ygen darwin.x86_64.pl.mc {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: mc-slang
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104439160>
        gen: human
        kind: [
            program
        ]
    }
    {
        code: \n             source fetch \http://ftp.midnight-commander.org/mc-4.8.23.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-screen=slang  || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                iconv
                glib
                slang
            ]
            kind: [
                program
            ]
        }
        version: 4.8.23
    }
]
[
    {
        base: mc-ncurses
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044395e0>
        gen: human
        kind: [
            program
        ]
    }
    {
        code: \n             source fetch \http://ftp.midnight-commander.org/mc-4.8.23.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-screen=ncurses  || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                iconv
                glib
                ncurses
            ]
            kind: [
                program
            ]
        }
        version: 4.8.23
    }
]
ygen darwin.x86_64.pl.dash {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: dash
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104439e50>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \http://gondor.apana.org.au/~herbert/dash/files/dash-0.5.10.2.tar.gz\ 1\n            export CFLAGS_FOR_BUILD=\$CFLAGS $LDFLAGS $LIBS\\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         
        meta: {
            depends: [
                libedit
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YSHELL
                    value: {pkgroot}/bin/dash
                }
                {
                    env: DASH
                    value: {pkgroot}/bin/dash
                }
            ]
        }
        version: 0.5.10.2
    }
]
ygen darwin.x86_64.pl.grep {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: grep
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10443b700>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/grep/grep-3.3.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                libsigsegv
                iconv
            ]
            kind: [
                box
                tool
            ]
        }
        version: 3.3
    }
]
ygen darwin.x86_64.pl.bestbox {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.sqlite3 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: sqlite3
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104441310>
        gen: human
        kind: [
            library
            tool
            box
        ]
    }
    {
        code: \n            source fetch \https://www.sqlite.org/2019/sqlite-autoconf-3300100.tar.gz\ 1\n            export CFLAGS=\-DSQLITE_OMIT_LOAD_EXTENSION=1 $CFLAGS\\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR || exit 1\n            $YMAKE install || exit 1\n        
        meta: {
            depends: [
                readline
            ]
            kind: [
                library
                tool
                box
            ]
            provides: [
                {
                    lib: sqlite3
                }
            ]
        }
        version: 3300100
    }
]
ygen darwin.x86_64.pl.dl {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: dl
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104441b80>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/pg83/newhope/archive/670037f6c15db5c0b46b7452124bce8bcc2f9801.zip\ 0\n             cd newhope* && cd support/libdl\n             $YMAKE CXX=\$CXX\ CXXFLAGS=\$CXXFLAGS\ LDFLAGS=\$LDFLAGS\ LIBS=\$LIBS\ AR=\$AR\ NM=\$NM\ RANLIB=\$RANLIB\ DESTDIR=\$IDIR\ install\n        
        meta: {
            depends: [
                c++
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: dl
                }
            ]
        }
        version: 670037f6c15db5c0b46b7452124bce8bcc2f9801
    }
]
ygen darwin.x86_64.pl.unrar {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: unrar
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104442430>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \http://www.rarlab.com/rar/unrarsrc-5.8.3.tar.gz\ 0\n             source add_strip\n             cd unrar\n             $YMAKE CC=$CC CXX=$CXX AR=$AR RANLIB=$RANLIB LDFLAGS=\$LDFLAGS\ CPPFLAGS=\\ CXXFLAGS=\$CXXFLAGS\ -f makefile\n             mkdir -p $IDIR/bin\n             install -v -m755 unrar $IDIR/bin\n        
        meta: {
            depends: [
                c++
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YUNRAR
                    value: {pkgroot}/bin/unrar
                }
            ]
        }
        version: 5.8.3
    }
]
ygen darwin.x86_64.pl.netbsd_curses {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: netbsd-curses
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104442ca0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://github.com/sabotage-linux/netbsd-curses/archive/5b0d21692c6c2db31e960961f7a846429e701c30.zip\ 0\n            cd netbsd*\n            $YMAKE -j 1 CC=\$CC\ AR=\$AR\ RANLIB=\$RANLIB\ CFLAGS=\$CFLAGS $LDFLAGS $LIBS\  LDFLAGS=\$LDFLAGS $LIBS\ LDFLAGS_HOST=\$LDFLAGS $LIBS\ PREFIX=/ DESTDIR=\$IDIR\ all-static install-static\n        
        meta: {
            depends: [
                make
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-curses={pkgroot}
                            --with-ncurses={pkgroot}
                        ]
                    }
                    lib: curses
                }
                {
                    env: LIBS
                    value: \$LIBS -lform -lmenu -lpanel -lcurses -lterminfo\
                }
            ]
        }
        version: 5b0d21692c6c2db31e960961f7a846429e701c30
    }
]
ygen darwin.x86_64.pl.openssl {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: openssl
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10444f4c0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://www.openssl.org/source/old/1.1.1/openssl-1.1.1c.tar.gz\ 1\n            $YPERL ./Configure linux-x86_64-cc no-asm threads no-shared no-dso no-hw no-tests no-engine --prefix=$IDIR --openssldir=$IDIR -w -std=c99 -D_GNU_SOURCE=1 $CFLAGS $LDFLAGS $LIBS\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                perl5
                dl
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: ssl
                }
            ]
        }
        version: 1.1.1c
    }
]
ygen darwin.x86_64.pl.sed {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: sed
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10444fd30>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/sed/sed-4.7.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: SED
                    value: {pkgroot}/bin/sed
                }
            ]
        }
        version: 4.7
    }
]
ygen darwin.x86_64.pl.scripts {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.libunistring {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libunistring
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044644c0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/libunistring/libunistring-0.9.10.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                xz
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libunistring-prefix={pkgroot}
                    }
                    lib: unistring
                }
            ]
        }
        version: 0.9.10
    }
]
ygen darwin.x86_64.pl.kernel_h {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.m4 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: m4
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10445f040>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n               source fetch \https://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.gz\ 1\n               $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-c++\n               $YMAKE -j $NTHRS\n               $YMAKE install\n        
        meta: {
            depends: [
                libsigsegv
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: M4
                    value: {pkgroot}/bin/m4
                }
            ]
        }
        version: 1.4.18
    }
]
ygen darwin.x86_64.pl.quasar_m4 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: quasar-m4
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10445f940>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n               source fetch \http://haddonthethird.net/m4/m4-2.tar.bz2\ 1\n               $YMAKE -j $NTHRS CFLAGS=\$CFLAGS\ LDFLAGS=\$LDFLAGS $LIBS\ CC=\$CC\ m4 \n               $YMAKE  PREFIX=/ DESTDIR=\$IDIR\ install\n        
        meta: {
            depends: [
                coreutils-boot
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: M4
                    value: {pkgroot}/bin/m4
                }
            ]
        }
        version: 2
    }
]
ygen darwin.x86_64.pl.pkg_config {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: pkg-config
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104462310>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared \n            cd glib\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-libiconv=gnu --enable-static --disable-shared  --srcdir=.\n            $YMAKE -j $NTHRS\n            cd ..\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                glib
                slibtool
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: PKG_CONFIG
                    value: {pkgroot}/bin/pkg-config
                }
            ]
        }
        version: 0.29.2
    }
]
[
    {
        base: pkg-config-int
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104462820>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            source fetch \https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-internal-glib\n            cd glib\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-libiconv=gnu --enable-static --disable-shared --with-internal-glib --srcdir=.\n            $YMAKE -j $NTHRS\n            cd ..\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                slibtool
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: PKG_CONFIG
                    value: {pkgroot}/bin/pkg-config
                }
            ]
        }
        version: 0.29.2
    }
]
ygen darwin.x86_64.pl.asciidoc {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: asciidoc
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104462f70>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://downloads.sourceforge.net/project/asciidoc/asciidoc/8.6.9/asciidoc-8.6.9.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            kind: [
                box
                tool
            ]
            provides: []
        }
        version: 8.6.9
    }
]
ygen darwin.x86_64.pl.gettext {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: gettext
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044668b0>
        gen: human
        kind: [
            box
            library
            tool
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/gnu/gettext/gettext-0.20.1.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-included-libunistring --with-included-libxml --with-included-gettext --enable-relocatable --disable-c++ || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                ncurses
            ]
            kind: [
                box
                library
                tool
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libintl-prefix={pkgroot}
                    }
                    lib: intl
                }
            ]
        }
        version: 0.20.1
    }
]
ygen darwin.x86_64.pl.libmetalink {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libmetalink
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044701f0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://launchpad.net/libmetalink/trunk/libmetalink-0.1.3/+download/libmetalink-0.1.3.tar.gz\ 1\n             export SHELL=`which dash` \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libexpat=yes --with-libxml2=no || exit 1\n             $YMAKE -j $NTHRS SHELL=$SHELL\n             $YMAKE install\n        
        meta: {
            depends: [
                expat
                dash
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libmetalink={pkgroot}
                    }
                    lib: metalink
                }
            ]
        }
        version: 0.1.3
    }
]
ygen darwin.x86_64.pl.musl {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.git {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.python3 {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: python3
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10447b310>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: \n            source fetch \https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz\ 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $(APPLY_EXTRA_PLAN_1)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-system-libmpdec --enable-static --disable-shared --with-signal-module --with-system-ffi || exit1\n            $YMAKE -j $NTHRS || exit 1\n            PY=`which ./python.exe || which ./python`\n            $PY ./fix.py patch ./setup.py\n            DUMP=1 $PY ./setup.py build > data.json\n            $PY ./fix.py ./data.json > Modules/Setup.local\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            cp -R Tools $IDIR/\n            mv $IDIR/Tools $IDIR/tools \n\n            (cd $IDIR/lib/python3.8 && ln -s config-3.8* config-3.8)\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_2)\n            $(APPLY_EXTRA_PLAN_3)\n            source ./mk_staticpython.sh \$IDIR/bin/python3.8\ \3.8\ \3\ \Py_BytesMain\\n        
        extra: [
            {
                data: # -*- makefile -*-\n# The file Setup is used by the makesetup script to construct the files\n# Makefile and config.c, from Makefile.pre and config.c.in,\n# respectively.  Note that Makefile.pre is created from Makefile.pre.in\n# by the toplevel configure script.\n\n*static*\n\n# (VPATH notes: Setup and Makefile.pre are in the build directory, as\n# are Makefile and config.c; the *.in files are in the source directory.)\n\n# Each line in this file describes one or more optional modules.\n# Modules configured here will not be compiled by the setup.py script,\n# so the file can be used to override setup.py's behavior.\n# Tag lines containing just the word \*static*\, \*shared*\ or \*disabled*\\n# (without the quotes but with the stars) are used to tag the following module\n# descriptions. Tag lines may alternate throughout this file.  Modules are\n# built statically when they are preceded by a \*static*\ tag line or when\n# there is no tag line between the start of the file and the module\n# description.  Modules are built as a shared library when they are preceded by\n# a \*shared*\ tag line.  Modules are not built at all, not by the Makefile,\n# nor by the setup.py script, when they are preceded by a \*disabled*\ tag\n# line.\n\n# Lines have the following structure:\n#\n# <module> ... [<sourcefile> ...] [<cpparg> ...] [<library> ...]\n#\n# <sourcefile> is anything ending in .c (.C, .cc, .c++ are C++ files)\n# <cpparg> is anything starting with -I, -D, -U or -C\n# <library> is anything ending in .a or beginning with -l or -L\n# <module> is anything else but should be a valid Python\n# identifier (letters, digits, underscores, beginning with non-digit)\n#\n# (As the makesetup script changes, it may recognize some other\n# arguments as well, e.g. *.so and *.sl as libraries.  See the big\n# case statement in the makesetup script.)\n#\n# Lines can also have the form\n#\n# <name> = <value>\n#\n# which defines a Make variable definition inserted into Makefile.in\n#\n# The build process works like this:\n#\n# 1. Build all modules that are declared as static in Modules/Setup,\n#    combine them into libpythonxy.a, combine that into python.\n# 2. Build all modules that are listed as shared in Modules/Setup.\n# 3. Invoke setup.py. That builds all modules that\n#    a) are not builtin, and\n#    b) are not listed in Modules/Setup, and\n#    c) can be build on the target\n#\n# Therefore, modules declared to be shared will not be\n# included in the config.c file, nor in the list of objects to be\n# added to the library archive, and their linker options won't be\n# added to the linker options. Rules to create their .o files and\n# their shared libraries will still be added to the Makefile, and\n# their names will be collected in the Make variable SHAREDMODS.  This\n# is used to build modules as shared libraries.  (They can be\n# installed using \make sharedinstall\, which is implied by the\n# toplevel \make install\ target.)  (For compatibility,\n# *noconfig* has the same effect as *shared*.)\n#\n# NOTE: As a standard policy, as many modules as can be supported by a\n# platform should be present.  The distribution comes with all modules\n# enabled that are supported by most platforms and don't require you\n# to ftp sources from elsewhere.\n\n\n# Some special rules to define PYTHONPATH.\n# Edit the definitions below to indicate which options you are using.\n# Don't add any whitespace or comments!\n\n# Directories where library files get installed.\n# DESTLIB is for Python modules; MACHDESTLIB for shared libraries.\nDESTLIB=$(LIBDEST)\nMACHDESTLIB=$(BINLIBDEST)\n\n# NOTE: all the paths are now relative to the prefix that is computed\n# at run time!\n\n# Standard path -- don't edit.\n# No leading colon since this is the first entry.\n# Empty since this is now just the runtime prefix.\nDESTPATH=\n\n# Site specific path components -- should begin with : if non-empty\nSITEPATH=\n\n# Standard path components for test modules\nTESTPATH=\n\nCOREPYTHONPATH=$(DESTPATH)$(SITEPATH)$(TESTPATH)\nPYTHONPATH=$(COREPYTHONPATH)\n\n\n# The modules listed here can't be built as shared libraries for\n# various reasons; therefore they are listed here instead of in the\n# normal order.\n\n# This only contains the minimal set of modules required to run the\n# setup.py script in the root of the Python source tree.\n\nposix -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal posixmodule.c # posix (UNIX) system calls\nerrno errnomodule.c\t\t\t# posix (UNIX) errno values\npwd pwdmodule.c\t\t\t\t# this is needed to find out the user's home dir\n\t\t\t\t\t# if $HOME is not set\n_sre _sre.c\t\t\t\t# Fredrik Lundh's new regular expressions\n_codecs _codecsmodule.c\t\t\t# access to the builtin codecs and codec registry\n_weakref _weakref.c\t\t\t# weak references\n_functools -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal _functoolsmodule.c   # Tools for working with functions and callable objects\n_operator _operator.c\t        \t# operator.add() and similar goodies\n_collections _collectionsmodule.c\t# Container types\n_abc _abc.c\t\t\t\t# Abstract base classes\nitertools itertoolsmodule.c\t\t# Functions creating iterators for efficient looping\natexit atexitmodule.c\t\t\t# Register functions to be run at interpreter-shutdown\n_signal -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal signalmodule.c\n_stat _stat.c\t\t\t\t# stat.h interface\ntime -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal timemodule.c\t# -lm # time operations and variables\n_thread -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal _threadmodule.c\t# low-level threading interface\n\n# access to ISO C locale support\n_locale -DPy_BUILD_CORE_BUILTIN _localemodule.c  # -lintl\n\n# Standard I/O baseline\n_io -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal -I$(srcdir)/Modules/_io _io/_iomodule.c _io/iobase.c _io/fileio.c _io/bytesio.c _io/bufferedio.c _io/textio.c _io/stringio.c\n\n# faulthandler module\nfaulthandler faulthandler.c\n\n# debug tool to trace memory blocks allocated by Python\n#\n# bpo-35053: The module must be builtin since _Py_NewReference()\n# can call _PyTraceMalloc_NewReference().\n_tracemalloc _tracemalloc.c hashtable.c\n\n# The rest of the modules listed in this file are all commented out by\n# default.  Usually they can be detected and built as dynamically\n# loaded modules by the new setup.py script added in Python 2.1.  If\n# you're on a platform that doesn't support dynamic loading, want to\n# compile modules statically into the Python binary, or need to\n# specify some odd set of compiler switches, you can uncomment the\n# appropriate lines below.\n\n# ======================================================================\n\n# The Python symtable module depends on .h files that setup.py doesn't track\n_symtable symtablemodule.c\n\n# Uncommenting the following line tells makesetup that all following\n# modules are to be built as shared libraries (see above for more\n# detail; also note that *static* or *disabled* cancels this effect):\n\n# GNU readline.  Unlike previous Python incarnations, GNU readline is\n# now incorporated in an optional module, configured in the Setup file\n# instead of by a configure script switch.  You may have to insert a\n# -L option pointing to the directory where libreadline.* lives,\n# and you may have to change -ltermcap to -ltermlib or perhaps remove\n# it, depending on your system -- see the GNU readline instructions.\n# It's okay for this to be a shared library, too.\n\nreadline readline.c\n\n\n# Modules that should always be present (non UNIX dependent):\n\narray arraymodule.c\t# array objects\ncmath cmathmodule.c _math.c # -lm # complex math library functions\nmath mathmodule.c _math.c # -lm # math library functions, e.g. sin()\n_contextvars _contextvarsmodule.c  # Context Variables\n_struct _struct.c\t# binary structure packing/unpacking\n_weakref _weakref.c\t# basic weak reference support\n#_testcapi _testcapimodule.c    # Python C API test module\n#_testinternalcapi _testinternalcapi.c -I$(srcdir)/Include/internal -DPy_BUILD_CORE_MODULE  # Python internal C API test module\n_random _randommodule.c\t# Random number generator\n_elementtree -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI _elementtree.c\t# elementtree accelerator\n_pickle _pickle.c\t# pickle accelerator\n_datetime _datetimemodule.c\t# datetime accelerator\n_bisect _bisectmodule.c\t# Bisection algorithms\n_heapq _heapqmodule.c\t# Heap queue algorithm\n_asyncio _asynciomodule.c  # Fast asyncio Future\n_json -I$(srcdir)/Include/internal -DPy_BUILD_CORE_BUILTIN _json.c\t# _json speedups\n_statistics _statisticsmodule.c # statistics accelerator\n\nunicodedata unicodedata.c    # static Unicode character database\n\n\n# Modules with some UNIX dependencies -- on by default:\n# (If you have a really backward UNIX, select and socket may not be\n# supported...)\n\nfcntl fcntlmodule.c\t# fcntl(2) and ioctl(2)\n#spwd spwdmodule.c\t\t# spwd(3)\ngrp grpmodule.c\t\t# grp(3)\nselect selectmodule.c\t# select(2); not on ancient System V\n\n# Memory-mapped files (also works on Win32).\nmmap mmapmodule.c\n\n# CSV file helper\n_csv _csv.c\n\n# Socket module helper for socket(2)\n#_socket socketmodule.c\n\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n_ssl _ssl.c -DUSE_SSL -lssl -lcrypto\n\n# The crypt module is now disabled by default because it breaks builds\n# on many systems (where -lcrypt is needed), e.g. Linux (I believe).\n\n#_crypt _cryptmodule.c # -lcrypt\t# crypt(3); needs -lcrypt on some systems\n\n\n# Some more UNIX dependent modules -- off by default, since these\n# are not supported by all UNIX systems:\n\n#nis nismodule.c -lnsl\t# Sun yellow pages -- not everywhere\ntermios termios.c\t# Steen Lumholt's termios module\n#resource resource.c\t# Jeremy Hylton's rlimit interface\n\n_posixsubprocess _posixsubprocess.c  # POSIX subprocess module helper\n\n# Multimedia modules -- off by default.\n# These don't work for 64-bit platforms!!!\n# #993173 says audioop works on 64-bit platforms, though.\n# These represent audio samples or images as strings:\n\n#audioop audioop.c\t# Operations on audio samples\n\n\n# Note that the _md5 and _sha modules are normally only built if the\n# system does not have the OpenSSL libs containing an optimized version.\n\n# The _md5 module implements the RSA Data Security, Inc. MD5\n# Message-Digest Algorithm, described in RFC 1321.\n\n_md5 md5module.c\n\n\n# The _sha module implements the SHA checksum algorithms.\n# (NIST's Secure Hash Algorithms.)\n_sha1 sha1module.c\n_sha256 sha256module.c\n_sha512 sha512module.c\n_sha3 _sha3/sha3module.c\n\n# _blake module\n_blake2 _blake2/blake2module.c _blake2/blake2b_impl.c _blake2/blake2s_impl.c\n\n# The _tkinter module.\n#\n# The command for _tkinter is long and site specific.  Please\n# uncomment and/or edit those parts as indicated.  If you don't have a\n# specific extension (e.g. Tix or BLT), leave the corresponding line\n# commented out.  (Leave the trailing backslashes in!  If you\n# experience strange errors, you may want to join all uncommented\n# lines and remove the backslashes -- the backslash interpretation is\n# done by the shell's \read\ command and it may not be implemented on\n# every system.\n\n# *** Always uncomment this (leave the leading underscore in!):\n# _tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \\\n# *** Uncomment and edit to reflect where your Tcl/Tk libraries are:\n#\t-L/usr/local/lib \\\n# *** Uncomment and edit to reflect where your Tcl/Tk headers are:\n#\t-I/usr/local/include \\\n# *** Uncomment and edit to reflect where your X11 header files are:\n#\t-I/usr/X11R6/include \\\n# *** Or uncomment this for Solaris:\n#\t-I/usr/openwin/include \\\n# *** Uncomment and edit for Tix extension only:\n#\t-DWITH_TIX -ltix8.1.8.2 \\\n# *** Uncomment and edit for BLT extension only:\n#\t-DWITH_BLT -I/usr/local/blt/blt8.0-unoff/include -lBLT8.0 \\\n# *** Uncomment and edit for PIL (TkImaging) extension only:\n#     (See http://www.pythonware.com/products/pil/ for more info)\n#\t-DWITH_PIL -I../Extensions/Imaging/libImaging  tkImaging.c \\\n# *** Uncomment and edit for TOGL extension only:\n#\t-DWITH_TOGL togl.c \\\n# *** Uncomment and edit to reflect your Tcl/Tk versions:\n#\t-ltk8.2 -ltcl8.2 \\\n# *** Uncomment and edit to reflect where your X11 libraries are:\n#\t-L/usr/X11R6/lib \\\n# *** Or uncomment this for Solaris:\n#\t-L/usr/openwin/lib \\\n# *** Uncomment these for TOGL extension only:\n#\t-lGL -lGLU -lXext -lXmu \\\n# *** Uncomment for AIX:\n#\t-lld \\\n# *** Always uncomment this; X11 libraries to link with:\n#\t-lX11\n\n# Lance Ellinghaus's syslog module\nsyslog syslogmodule.c\t\t# syslog daemon interface\n\n#h_paths_first\n# Curses support, requiring the System V version of curses, often\n# provided by the ncurses library.  e.g. on Linux, link with -lncurses\n# instead of -lcurses).\n\n_curses _cursesmodule.c\n# Wrapper for the panel library that's part of ncurses and SYSV curses.\n_curses_panel _curses_panel.c \n\n\n# Modules that provide persistent dictionary-like semantics.  You will\n# probably want to arrange for at least one of them to be available on\n# your machine, though none are defined by default because of library\n# dependencies.  The Python module dbm/__init__.py provides an\n# implementation independent wrapper for these; dbm/dumb.py provides\n# similar functionality (but slower of course) implemented in Python.\n\n#_dbm _dbmmodule.c \t# dbm(3) may require -lndbm or similar\n\n# Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:\n\n#_gdbm _gdbmmodule.c -I/usr/local/include -L/usr/local/lib -lgdbm\n\n\n# Helper module for various ascii-encoders\nbinascii binascii.c\n\n# Fred Drake's interface to the Python parser\nparser parsermodule.c\n\n\n# Andrew Kuchling's zlib module.\n# This require zlib 1.1.3 (or later).\n# See http://www.gzip.org/zlib/\nzlib zlibmodule.c\n\n# Interface to the Expat XML parser\n# More information on Expat can be found at www.libexpat.org.\n#\npyexpat expat/xmlparse.c expat/xmlrole.c expat/xmltok.c pyexpat.c -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DXML_POOR_ENTROPY -DUSE_PYEXPAT_CAPI\n\n# Hye-Shik Chang's CJKCodecs\n\n# multibytecodec is required for all the other CJK codec modules\n#_multibytecodec cjkcodecs/multibytecodec.c\n\n#_codecs_cn cjkcodecs/_codecs_cn.c\n#_codecs_hk cjkcodecs/_codecs_hk.c\n#_codecs_iso2022 cjkcodecs/_codecs_iso2022.c\n#_codecs_jp cjkcodecs/_codecs_jp.c\n#_codecs_kr cjkcodecs/_codecs_kr.c\n#_codecs_tw cjkcodecs/_codecs_tw.c\n\n*disabled*\n\n# Example -- included for reference only:\n# xx xxmodule.c\n\n# Another example -- the 'xxsubtype' module shows C-level subtyping in action\nxxsubtype xxsubtype.c\n\n# Uncommenting the following line tells makesetup that all following modules\n# are not built (see above for more detail).\n#\n#\n#\n#_sqlite3 _tkinter _curses pyexpat\n#_codecs_jp _codecs_kr _codecs_tw unicodedata\n
                kind: file
                path: Modules/Setup
            }
            {
                data: import json\nimport sys\n\n\npatch = \\\\n        import json\n\n        if os.environ.get('DUMP'):\n            print(json.dumps([x.__dict__ for x in extensions], sort_keys=True, indent=4))\n            sys.stdout.flush()\n            os._exit(0)\n\\\\n\nclass Skip(Exception):\n    pass\n\n\ndef build_descr(el):\n    pre = ''\n    after = ''\n\n    name = el['name']\n\n    if name.startswith('_test'):\n        pre = '*disabled*\\n'\n        after = '\\n*static*\\n'\n\n    if 'audio' in name:\n        raise Skip()\n\n    bad = [\n        'xxlimited',\n        '_decimal',\n        '_elementtree',\n        'pyexpat',\n    ]\n\n    if name in bad:\n        pre = '#'\n\n    sources = []\n    cflags = []\n    ldflags = []\n\n    cflags.extend(el['extra_compile_args'])\n    ldflags.extend(el['extra_link_args'])\n\n    def fix_inc(i):\n        if '/Modules' in i:\n            return '-I$(srcdir)' + i[i.find('/Modules'):]\n\n        return i\n\n    def flt_wl(l):\n        for x in l:\n            if 'h_path' in x:\n                pass\n            else:\n                yield x\n\n    def flt_wl_1(l):\n        return list(flt_wl(l))\n\n    for x in el['include_dirs']:\n        if '/usr' in x:\n            raise Skip()\n\n        cflags.append(fix_inc(('-I' + x).replace('-IMo', '-I$(srcdir)/Mo')))\n\n    for x in el['libraries']:\n        cflags.append('-l' + x)\n\n    for x in el['sources']:\n        sources.append(x)\n\n    cflags_d = []\n\n    for x in el['define_macros']:\n        if x[1]:\n            cflags_d.append('#define ' + str(x[0]) + ' ' + str(x[1]))\n        else:\n            cflags_d.append('#define ' + str(x[0]))\n\n    def flt_lib(ll):\n        for l in ll:\n            if l == '-lm':\n                pass\n            else:\n                if l == '-l:libmpdec.so.2':\n                    yield '-lmpdec'\n                else:\n                    yield l\n\n    if cflags_d:\n        add = '\\n'.join(cflags_d) + '\\n\\n'\n\n        for s in sources:\n            s = 'Modules/' + s\n\n            with open(s, 'r') as f:\n                data = add + f.read()\n\n            with open(s, 'w') as f:\n                f.write(data)\n\n    return pre + ' '.join([name] + flt_wl_1(sources) + flt_wl_1(list(flt_lib(cflags))) + flt_wl_1(list(flt_lib(ldflags)))) + after\n\n\ndef apply_patch(path, p, line):\n    with open(path) as f:\n        data = f.read()\n\n    def iter():\n        for ll in data.split('\\n'):\n            if line in ll:\n                yield p\n\n            yield ll\n\n    data = '\\n'.join(iter())\n\n    with open(path, 'w') as f:\n        f.write(data)\n\n\ndef main():\n    if sys.argv[1] == 'patch':\n        return apply_patch(sys.argv[2], patch, '# move ctypes to the end')\n\n    with open(sys.argv[1]) as f:\n        data = f.read()\n        data = json.loads(data[data.find('['):])\n\n    print('*static*')\n\n    for el in data:\n        try:\n            print(build_descr(el))\n        except Skip:\n            print('skip', str(el), file=sys.stderr)\n\n\nif __name__ == '__main__':\n    main()\n
                kind: file
                path: fix.py
            }
            {
                data: import os\nimport sys\n\n\ndef skip(x):\n    sys.stderr.write('skip ' + str(x) + '\\n')\n\n\ndef find_modules():\n    pr = sys.argv[1]\n    assert os.path.isdir(pr)\n    no = ['idlelib.idle', 'this', '_abcoll']\n\n    for a, b, c in os.walk(pr):\n        for d in b + c:\n            if d.endswith('.py'):\n                d = d[:-3]\n                p = a + '/' + d\n                p = p[len(pr) + 1:]\n\n                if '.' in p:\n                    skip(p)\n\n                    continue\n\n                m = p.replace('/', '.')\n\n                if m in no:\n                    skip(m)\n\n                    continue\n\n                if m.startswith('test.'):\n                    skip(m)\n\n                    continue\n\n                if '.test.' in m:\n                    skip(m)\n\n                    continue\n\n                if '.tests.' in m:\n                    skip(m)\n\n                    continue\n\n                cmd = '''\ntry: \n    sys.stderr.write(\{m}\\\\n\) \n    import  \nexcept:\n    pass\n\n'''\n                sys.stdout.write(cmd.format(m=m).replace('-', '_'))\n\nfind_modules()\n
                kind: file
                path: find_modules.py
            }
            {
                data: env\n$1 ./find_modules.py \$IDIR/lib/python$2\ > all_modules.py\ncat ./all_modules.py\n$1 ../Tools/freeze/freeze.py ./all_modules.py\necho '#'\define Py_FrozenMain $4\ >> frozen\ncat frozen.c | grep -v 'extern int Py_' >> frozen\nmv frozen frozen.c\n$YMAKE OPT=\$CFLAGS\ -j $NTHRS\nmv all_modules python\nmkdir -p \$IDIR/bin\\ninstall -v -m755 python \$IDIR/bin/staticpython$3\\n
                kind: file
                path: mk_staticpython.sh
            }
        ]
        meta: {
            depends: [
                ncurses
                iconv
                intl
                zlib
                pkg-config
                libffi
                readline
                termcap
                mpdecimal
                xz
                bzip2
                sqlite3
                openssl
                dl
            ]
            kind: [
                tool
                box
            ]
            provides: [
                {
                    lib: python3.8
                }
                {
                    env: PYTHON3
                    value: {pkgroot}/bin/staticpython3
                }
                {
                    env: PYTHON3HOME
                    value: {pkgroot}/lib/python3.8
                }
            ]
        }
        version: 3.8.0
    }
]
ygen darwin.x86_64.pl.bash {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: bash
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10447baf0>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            export CFLAGS=\-fpermissive $CFLAGS -w\\n            export LIBS=\$LDFLAGS $LIBS\\n            source fetch \https://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-bash-malloc --disable-nls  --disable-extended-glob-default --enable-extended-glob --enable-job-control\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                readline
                ncurses
                intl
                iconv
            ]
            kind: [
                tool
            ]
        }
        version: 5.0
    }
]
ygen darwin.x86_64.pl.cmake {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: cmake
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10447f310>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n             source fetch \https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1.tar.gz\ 1\n             export CFLAGS=\-w $CFLAGS $LDFLAGS $LIBS\\n             export CXXFLAGS=\-w $CXXFLAGS $LDFLAGS $LIBS\\n             $YSHELL ./bootstrap --system-expat --system-zlib --system-bzip2 --system-liblzma --system-libarchive --prefix=$IDIR --parallel=$NTHRS -- -DCMAKE_USE_OPENSSL=OFF -Dfortran=OFF -DBUILD_TESTING=OFF || true\n             echo > .clang-tidy\n             ./Bootstrap.cmk/cmake .\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                c++
                zlib
                bzip2
                xz
                libarchive
                expat
                dl
                iconv
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: CMAKE
                    value: {pkgroot}/bin/cmake
                }
            ]
        }
        version: 3.16.1
    }
]
ygen darwin.x86_64.pl.expat {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: expat
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10447fb80>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/libexpat/libexpat/releases/download/R_2_2_9/expat-2.2.9.tar.bz2\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-examples --enable-static --disable-shared || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-expat={pkgroot}
                    }
                    lib: expat
                }
            ]
        }
        version: 2.2.9
    }
]
ygen darwin.x86_64.pl.slibtool {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: slibtool
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104490430>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: \n             source fetch \https://git.foss21.org/slibtool/snapshot/slibtool-0.5.28.tar.xz\ 1\n             $YSHELL ./configure --prefix=$IDIR || exit1 \n             $YMAKE -j $NTHRS install || exit 1\n        
        meta: {
            kind: [
                tool
                box
            ]
            provides: [
                {
                    env: LIBTOOL
                    value: export LIBTOOL=\{pkgroot}/bin/dlibtool\
                }
            ]
        }
        version: 0.5.28
    }
]
ygen darwin.x86_64.pl.mimalloc {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: mimalloc
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104490c10>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/microsoft/mimalloc/archive/acb03c54971c4b0a43a6d17ea55a9d5feb88972f.zip\ 0\n             (mv mim* xxx && mv xxx/* ./)\n             $CC $CFLAGS -DMI_MALLOC_OVERRIDE=1 -std=c11 -Iinclude -Dasm=__asm__ -c src/static.c -o static.o\n             $AR q libmimalloc.a static.o\n             $RANLIB libmimalloc.a\n             mkdir $IDIR/lib\n             mv libmimalloc.a $IDIR/lib/ \n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    lib: mimalloc
                }
            ]
        }
        version: 
    }
]
ygen darwin.x86_64.pl.pcre {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: pcre
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044854c0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://downloads.sourceforge.net/project/pcre/pcre/8.43/pcre-8.43.tar.bz2\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-newline-is-anycrlf --enable-utf8 --enable-jit --enable-c++ || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                pkg-config-int
                zlib
                bzip2
                c++
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: pcre
                }
            ]
        }
        version: 8.43
    }
]
ygen darwin.x86_64.pl.help2man {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: help2man
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104485ca0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://mirror.tochlab.net/pub/gnu/help2man/help2man-1.47.9.tar.xz\ 1\n             $YSHELL ./configure --prefix=\$IDIR\\n             $YMAKE -j $NTHRS\n             $YMAKE install  \n        
        meta: {
            depends: [
                perl5
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: HELP2MAN
                    value: {pkgroot}/bin/help2man
                }
            ]
        }
        version: 1.47.9
    }
]
ygen darwin.x86_64.pl.readline {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: readline
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10448e670>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install 2>&1 | grep -v 'No such file or directory'\n        
        meta: {
            depends: [
                ncurses
                termcap
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-installed-readline={pkgroot}
                            --with-readline={pkgroot}
                        ]
                    }
                    lib: readline
                }
            ]
        }
        version: 8.0
    }
]
ygen darwin.x86_64.pl.musl_boot {'os': 'darwin', 'arch': 'x86_64'}
ygen darwin.x86_64.pl.libcxx {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libcxx
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104493280>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \http://releases.llvm.org/9.0.0/libcxx-9.0.0.src.tar.xz\ 0\n             mv libcxx* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        
        extra: [
            {
                data: set -e\nset -x\n\nDEFINES=\\n#if !defined(uiygfuiertyuiwetuyt)\n#define uiygfuiertyuiwetuyt\n\n#define _LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT 0\n\n#endif\n\\n\nX_CXXFLAGS=\-DNDEBUG -D_LIBCPP_BUILDING_LIBRARY -D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER -iquote src -I$IDIR/include -I$LIBCXXRT_INC -DLIBCXXRT -std=c++14 -nostdinc++ -fvisibility-inlines-hidden\\n\nrm -rf obj || true\nmkdir obj\n\necho \$DEFINES\ > obj/__config\ncat include/__config >> obj/__config\n\nrm -rf $IDIR/include || true\nmkdir $IDIR/include\n\nrm -rf $IDIR/lib || true\nmkdir $IDIR/lib\n\ncp -R \include/\* $IDIR/include/\nmv obj/__config $IDIR/include/\n\nSRCS=\\nsrc/algorithm.cpp\nsrc/any.cpp\nsrc/bind.cpp\nsrc/charconv.cpp\nsrc/chrono.cpp\nsrc/condition_variable.cpp\nsrc/condition_variable_destructor.cpp\nsrc/debug.cpp\nsrc/exception.cpp\nsrc/functional.cpp\nsrc/future.cpp\nsrc/hash.cpp\nsrc/ios.cpp\nsrc/iostream.cpp\nsrc/locale.cpp\nsrc/memory.cpp\nsrc/mutex.cpp\nsrc/mutex_destructor.cpp\nsrc/new.cpp\nsrc/optional.cpp\nsrc/random.cpp\nsrc/regex.cpp\nsrc/shared_mutex.cpp\nsrc/stdexcept.cpp\nsrc/string.cpp\nsrc/strstream.cpp\nsrc/system_error.cpp\nsrc/thread.cpp\nsrc/typeinfo.cpp\nsrc/utility.cpp\nsrc/valarray.cpp\nsrc/variant.cpp\nsrc/vector.cpp\nsrc/filesystem/operations.cpp\nsrc/filesystem/directory_iterator.cpp\nsrc/filesystem/int128_builtins.cpp\n\\n\nfor s in $SRCS; do\n    out=$(echo $s | tr '/' '_' | tr -d '\\n').o\n    $CXX $X_CXXFLAGS $CXXFLAGS -c $s -o obj/$out\ndone\n\n$AR q obj/libc++.a \obj/\*.o\n$RANLIB obj/libc++.a\n\nmv obj/libc++.a $IDIR/lib/\n
                kind: file
                path: mk.sh
            }
        ]
        meta: {
            depends: [
                libcxxrt
            ]
            kind: [
                library
            ]
            provides: [
                {
                    env: CPPFLAGS
                    value: \-w -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk\
                }
                {
                    lib: c++
                }
            ]
        }
        version: 9.0.0
    }
]
ygen darwin.x86_64.pl.compiler_rt {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: compiler-rt
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x104493af0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \http://releases.llvm.org/9.0.0/compiler-rt-9.0.0.src.tar.xz\ 1\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    lib: crt
                }
            ]
        }
    }
]
ygen darwin.x86_64.pl.coreutils {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: coreutils
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10449a430>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/coreutils/coreutils-8.31.tar.xz\ 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin --without-gmp --enable-single-binary=symlinks --enable-no-install-program=stdbuf || exit 1\n             $YMAKE -j $NTHRS || true\n             echo >> src/libstdbuf.c\n             echo >> 'int main() {}' >> src/libstdbuf.c\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                openssl
            ]
            kind: [
                tool
                box
            ]
            provides: [
                {
                    env: COREUTILS
                    value: {pkgroot}/bin/coreutils
                }
            ]
        }
        version: 8.31
    }
]
[
    {
        base: coreutils-boot
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x10449a940>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/coreutils/coreutils-8.31.tar.xz\ 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin --without-gmp --enable-single-binary=symlinks --enable-no-install-program=stdbuf || exit 1\n             $YMAKE -j $NTHRS || true\n             echo >> src/libstdbuf.c\n             echo >> 'int main() {}' >> src/libstdbuf.c\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: COREUTILS
                    value: {pkgroot}/bin/coreutils
                }
            ]
        }
        version: 8.31
    }
]
ygen darwin.x86_64.pl.python {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: python
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044b3160>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            source fetch \https://www.python.org/ftp/python/2.7.17/Python-2.7.17.tar.xz\ 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-signal-module --with-system-expat --with-system-ffi || exit1\n            ##echo \#define HAVE_PTH 1\ >> pyconfig.h\n            ##echo \#undef HAVE_PTHREAD_H\ >> pyconfig.h \n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_1)\n            $(APPLY_EXTRA_PLAN_2)\n            export PYTHONHOME=\$IDIR\\n            source ./mk_staticpython.sh \$IDIR/bin/python2.7\ \2.7\ \2\ \Py_Main\\n        
        extra: [
            {
                data: # Fred Drake's interface to the Python parser\nparser parsermodule.c\n\nzlib zlibmodule.c\n\narray arraymodule.c    # array objects\ncmath cmathmodule.c _math.c # -lm # complex math library functions\nmath mathmodule.c _math.c # -lm # math library functions, e.g. sin()\n_struct _struct.c    # binary structure packing/unpacking\ntime timemodule.c # -lm # time operations and variables\noperator operator.c    # operator.add() and similar goodies\n#_testcapi _testcapimodule.c    # Python C API test module\n_random _randommodule.c    # Random number generator\n_collections _collectionsmodule.c # Container types\n_heapq _heapqmodule.c        # Heapq type\nitertools itertoolsmodule.c    # Functions creating iterators for efficient looping\nstrop stropmodule.c        # String manipulations\n_functools _functoolsmodule.c    # Tools for working with functions and callable objects\n_elementtree -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI _elementtree.c    # elementtree accelerator\n#_pickle _pickle.c    # pickle accelerator\ndatetime datetimemodule.c    # date/time type\n_bisect _bisectmodule.c    # Bisection algorithms\n\nunicodedata unicodedata.c    # static Unicode character database\n\n# access to ISO C locale support\n_locale _localemodule.c  # -lintl\n\n# Standard I/O baseline\n_io -I$(srcdir)/Modules/_io _io/bufferedio.c _io/bytesio.c _io/fileio.c _io/iobase.c _io/_iomodule.c _io/stringio.c _io/textio.c\n\n\n# Modules with some UNIX dependencies -- on by default:\n# (If you have a really backward UNIX, select and socket may not be\n# supported...)\n\nfcntl fcntlmodule.c    # fcntl(2) and ioctl(2)\n#spwd spwdmodule.c        # spwd(3)\ngrp grpmodule.c        # grp(3)\nselect selectmodule.c    # select(2); not on ancient System V\n\n# Memory-mapped files (also works on Win32).\nmmap mmapmodule.c\n\n# Helper module for various ascii-encoders\nbinascii binascii.c\n\n# Fred Drake's interface to the Python parser\nparser parsermodule.c\n\ncStringIO cStringIO.c\ncPickle cPickle.c\n\n_curses _cursesmodule.c\n_curses_panel _curses_panel.c\n\n_md5 md5module.c md5.c\n_sha shamodule.c\n_sha256 sha256module.c\n_sha512 sha512module.c\n\nreadline readline.c\n\npyexpat expat/xmlparse.c expat/xmlrole.c expat/xmltok.c pyexpat.c -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI\n\n_socket socketmodule.c timemodule.c\n
                kind: file
                path: Modules/Setup.local
            }
            {
                data: import os\nimport sys\n\n\ndef skip(x):\n    sys.stderr.write('skip ' + str(x) + '\\n')\n\n\ndef find_modules():\n    pr = sys.argv[1]\n    assert os.path.isdir(pr)\n    no = ['idlelib.idle', 'this', '_abcoll']\n\n    for a, b, c in os.walk(pr):\n        for d in b + c:\n            if d.endswith('.py'):\n                d = d[:-3]\n                p = a + '/' + d\n                p = p[len(pr) + 1:]\n\n                if '.' in p:\n                    skip(p)\n\n                    continue\n\n                m = p.replace('/', '.')\n\n                if m in no:\n                    skip(m)\n\n                    continue\n\n                if m.startswith('test.'):\n                    skip(m)\n\n                    continue\n\n                if '.test.' in m:\n                    skip(m)\n\n                    continue\n\n                if '.tests.' in m:\n                    skip(m)\n\n                    continue\n\n                cmd = '''\ntry: \n    sys.stderr.write(\{m}\\\\n\) \n    import  \nexcept:\n    pass\n\n'''\n                sys.stdout.write(cmd.format(m=m).replace('-', '_'))\n\nfind_modules()\n
                kind: file
                path: find_modules.py
            }
            {
                data: env\n$1 ./find_modules.py \$IDIR/lib/python$2\ > all_modules.py\ncat ./all_modules.py\n$1 ../Tools/freeze/freeze.py ./all_modules.py\necho '#'\define Py_FrozenMain $4\ >> frozen\ncat frozen.c | grep -v 'extern int Py_' >> frozen\nmv frozen frozen.c\n$YMAKE OPT=\$CFLAGS\ -j $NTHRS\nmv all_modules python\nmkdir -p \$IDIR/bin\\ninstall -v -m755 python \$IDIR/bin/staticpython$3\\n
                kind: file
                path: mk_staticpython.sh
            }
        ]
        meta: {
            depends: [
                ncurses
                iconv
                intl
                zlib
                pkg-config-int
                libffi
                readline
                termcap
                expat
                sqlite3
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    lib: python2.7
                }
                {
                    env: PYTHON
                    value: {pkgroot}/bin/staticpython2
                }
                {
                    env: PYTHONHOME
                    value: {pkgroot}/lib/python2.7
                }
            ]
        }
        version: 2.7.17
    }
]
ygen darwin.x86_64.pl.mpdecimal {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: mpdecimal
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044b3940>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \http://deb.debian.org/debian/pool/main/m/mpdecimal/mpdecimal_2.4.2.orig.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             (cd libmpdec && $YMAKE -j $NTHRS libmpdec.a)\n             touch libmpdec/libmpdec.so.2.4.2\n             $YMAKE install\n             rm -rf $IDIR/lib/*.so.*\n             rm -rf $IDIR/lib/*.so\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    lib: mpdec
                }
            ]
        }
        version: 2.4.2
    }
]
ygen darwin.x86_64.pl.libsigsegv {'os': 'darwin', 'arch': 'x86_64'}
[
    {
        base: libsigsegv
        cc: {
            arch: x86_64
            os: darwin
        }
        code: <function singleton.<locals>.wrapper at 0x1044a9280>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/libsigsegv/libsigsegv-2.12.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libsigsegv-prefix={pkgroot}
                    }
                    lib: sigsegv
                }
            ]
        }
        version: 2.12
    }
]
{'os': 'darwin', 'arch': 'x86_64'}
check solver...
all ok
check solver...
zzz asciidoc
zzz bison
zzz bzip2
zzz coreutils
zzz curl
zzz dash
zzz diffutils
zzz gawk
zzz gettext
zzz grep
zzz gzip
zzz help2man
zzz libarchive
zzz libiconv
zzz make
zzz ninja
zzz p7zip
zzz pkg-config
zzz python3
zzz quasar-m4
zzz sed
zzz slibtool
zzz sqlite3
zzz tar
zzz unrar
zzz xz
zzz yash
all ok
<make-boot-0-t-darwin> -> ()
<make-1-t-darwin> -> (<make-boot-0-t-darwin>)
<asciidoc-2-t-darwin> -> (<make-1-t-darwin>)
<slibtool-3-t-darwin> -> (<make-1-t-darwin>)
<bzip2-4-tl-darwin> -> (<make-1-t-darwin>)
<mimalloc-5-l-darwin> -> (<make-1-t-darwin>)
<zlib-6-l-darwin> -> (<make-1-t-darwin>)
<pth-7-l-darwin> -> (<make-1-t-darwin>)
<xz-8-tl-darwin> -> (<make-1-t-darwin>)
<libiconv-9-tl-darwin> -> (<make-1-t-darwin>)
<libunwind-10-l-darwin> -> (<make-1-t-darwin>)
<expat-11-l-darwin> -> (<make-1-t-darwin>)
<netbsd-curses-12-l-darwin> -> (<make-1-t-darwin>)
<compiler-rt-13-l-darwin> -> (<make-1-t-darwin>)
<libsigsegv-14-l-darwin> -> (<make-1-t-darwin>)
<mpdecimal-15-l-darwin> -> (<make-1-t-darwin>)
<jemalloc-16-l-darwin> -> (<make-1-t-darwin>)
<termcap-17-l-darwin> -> (<make-1-t-darwin>)
<libunistring-18-l-darwin> -> (<libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <make-1-t-darwin>)
<libcxxrt-19-l-darwin> -> (<libunwind-10-l-darwin>, <make-1-t-darwin>)
<m4-20-t-darwin> -> (<libsigsegv-14-l-darwin>, <make-1-t-darwin>)
<gzip-21-t-darwin> -> (<slibtool-3-t-darwin>, <make-1-t-darwin>)
<ncurses-22-l-darwin> -> (<slibtool-3-t-darwin>, <make-1-t-darwin>)
<pkg-config-int-23-t-darwin> -> (<libiconv-9-tl-darwin>, <slibtool-3-t-darwin>, <make-1-t-darwin>)
<libarchive-24-tl-darwin> -> (<xz-8-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<gettext-25-tl-darwin> -> (<ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<libcxx-26-l-darwin> -> (<libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <make-1-t-darwin>)
<libedit-27-l-darwin> -> (<ncurses-22-l-darwin>, <make-1-t-darwin>)
<readline-28-l-darwin> -> (<ncurses-22-l-darwin>, <make-1-t-darwin>)
<p7zip-29-tl-darwin> -> (<libcxx-26-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <make-1-t-darwin>)
<gawk-30-t-darwin> -> (<readline-28-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libsigsegv-14-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<coreutils-boot-31-t-darwin> -> (<gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<bash-32-t-darwin> -> (<readline-28-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<sed-33-t-darwin> -> (<gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<dash-34-t-darwin> -> (<libedit-27-l-darwin>, <ncurses-22-l-darwin>, <make-1-t-darwin>)
<grep-35-t-darwin> -> (<gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libsigsegv-14-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<slang-36-l-darwin> -> (<readline-28-l-darwin>, <ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <make-1-t-darwin>)
<pcre-37-l-darwin> -> (<libcxx-26-l-darwin>, <pkg-config-int-23-t-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<dl-38-l-darwin> -> (<libcxx-26-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <make-1-t-darwin>)
<unrar-39-t-darwin> -> (<libcxx-26-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <make-1-t-darwin>)
<sqlite3-40-tl-darwin> -> (<readline-28-l-darwin>, <ncurses-22-l-darwin>, <make-1-t-darwin>)
<quasar-m4-41-t-darwin> -> (<coreutils-boot-31-t-darwin>, <make-1-t-darwin>)
<libmetalink-42-l-darwin> -> (<dash-34-t-darwin>, <expat-11-l-darwin>, <make-1-t-darwin>)
<perl5-43-t-darwin> -> (<coreutils-boot-31-t-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <make-1-t-darwin>)
<tar-44-t-darwin> -> (<unrar-39-t-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <gzip-21-t-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<libffi-45-l-darwin> -> (<sed-33-t-darwin>, <make-1-t-darwin>)
<cmake-46-t-darwin> -> (<dl-38-l-darwin>, <libcxx-26-l-darwin>, <libarchive-24-tl-darwin>, <libcxxrt-19-l-darwin>, <expat-11-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<help2man-47-t-darwin> -> (<perl5-43-t-darwin>, <make-1-t-darwin>)
<python-48-t-darwin> -> (<libffi-45-l-darwin>, <sqlite3-40-tl-darwin>, <readline-28-l-darwin>, <gettext-25-tl-darwin>, <pkg-config-int-23-t-darwin>, <ncurses-22-l-darwin>, <expat-11-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <make-1-t-darwin>)
<bison-49-t-darwin> -> (<perl5-43-t-darwin>, <quasar-m4-41-t-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <make-1-t-darwin>)
<openssl-50-l-darwin> -> (<perl5-43-t-darwin>, <dl-38-l-darwin>, <libcxx-26-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <make-1-t-darwin>)
<yash-51-t-darwin> -> (<python-48-t-darwin>, <tar-44-t-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <asciidoc-2-t-darwin>, <make-1-t-darwin>)
<ninja-52-t-darwin> -> (<python-48-t-darwin>, <libcxx-26-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <make-1-t-darwin>)
<coreutils-53-t-darwin> -> (<openssl-50-l-darwin>, <dl-38-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<diffutils-54-t-darwin> -> (<help2man-47-t-darwin>, <perl5-43-t-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libsigsegv-14-l-darwin>, <libiconv-9-tl-darwin>, <make-1-t-darwin>)
<glib-55-l-darwin> -> (<coreutils-53-t-darwin>, <python-48-t-darwin>, <libffi-45-l-darwin>, <pcre-37-l-darwin>, <dash-34-t-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <pkg-config-int-23-t-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <slibtool-3-t-darwin>, <make-1-t-darwin>)
<mc-ncurses-56--darwin> -> (<glib-55-l-darwin>, <libffi-45-l-darwin>, <pcre-37-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<mc-slang-57--darwin> -> (<glib-55-l-darwin>, <libffi-45-l-darwin>, <pcre-37-l-darwin>, <slang-36-l-darwin>, <readline-28-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<pkg-config-58-t-darwin> -> (<glib-55-l-darwin>, <libffi-45-l-darwin>, <pcre-37-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <slibtool-3-t-darwin>, <make-1-t-darwin>)
<python3-59-t-darwin> -> (<pkg-config-58-t-darwin>, <openssl-50-l-darwin>, <libffi-45-l-darwin>, <sqlite3-40-tl-darwin>, <dl-38-l-darwin>, <readline-28-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <mpdecimal-15-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <zlib-6-l-darwin>, <bzip2-4-tl-darwin>, <make-1-t-darwin>)
<libidn2-60-l-darwin> -> (<pkg-config-58-t-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libunistring-18-l-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <make-1-t-darwin>)
<curl-61-t-darwin> -> (<libidn2-60-l-darwin>, <openssl-50-l-darwin>, <libmetalink-42-l-darwin>, <dl-38-l-darwin>, <libcxx-26-l-darwin>, <gettext-25-tl-darwin>, <ncurses-22-l-darwin>, <libcxxrt-19-l-darwin>, <libunistring-18-l-darwin>, <expat-11-l-darwin>, <libunwind-10-l-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <make-1-t-darwin>)
<box-62-t-darwin> -> (<curl-61-t-darwin>, <python3-59-t-darwin>, <pkg-config-58-t-darwin>, <diffutils-54-t-darwin>, <coreutils-53-t-darwin>, <ninja-52-t-darwin>, <yash-51-t-darwin>, <bison-49-t-darwin>, <help2man-47-t-darwin>, <tar-44-t-darwin>, <quasar-m4-41-t-darwin>, <sqlite3-40-tl-darwin>, <unrar-39-t-darwin>, <grep-35-t-darwin>, <dash-34-t-darwin>, <sed-33-t-darwin>, <gawk-30-t-darwin>, <p7zip-29-tl-darwin>, <gettext-25-tl-darwin>, <libarchive-24-tl-darwin>, <gzip-21-t-darwin>, <libiconv-9-tl-darwin>, <xz-8-tl-darwin>, <bzip2-4-tl-darwin>, <slibtool-3-t-darwin>, <asciidoc-2-t-darwin>, <make-1-t-darwin>)
<make-boot-63-t-darwin> -> (<box-62-t-darwin>)
<make-64-t-darwin> -> (<box-62-t-darwin>)
<libsigsegv-65-l-darwin> -> (<box-62-t-darwin>)
<asciidoc-66-t-darwin> -> (<box-62-t-darwin>)
<mimalloc-67-l-darwin> -> (<box-62-t-darwin>)
<xz-68-tl-darwin> -> (<box-62-t-darwin>)
<expat-69-l-darwin> -> (<box-62-t-darwin>)
<libiconv-70-tl-darwin> -> (<box-62-t-darwin>)
<slibtool-71-t-darwin> -> (<box-62-t-darwin>)
<netbsd-curses-72-l-darwin> -> (<box-62-t-darwin>)
<compiler-rt-73-l-darwin> -> (<box-62-t-darwin>)
<libunwind-74-l-darwin> -> (<box-62-t-darwin>)
<zlib-75-l-darwin> -> (<box-62-t-darwin>)
<jemalloc-76-l-darwin> -> (<box-62-t-darwin>)
<termcap-77-l-darwin> -> (<box-62-t-darwin>)
<pth-78-l-darwin> -> (<box-62-t-darwin>)
<mpdecimal-79-l-darwin> -> (<box-62-t-darwin>)
<bzip2-80-tl-darwin> -> (<box-62-t-darwin>)
<ncurses-81-l-darwin> -> (<box-62-t-darwin>)
<gzip-82-t-darwin> -> (<box-62-t-darwin>)
<libunistring-83-l-darwin> -> (<libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<m4-84-t-darwin> -> (<libsigsegv-65-l-darwin>, <box-62-t-darwin>)
<libcxxrt-85-l-darwin> -> (<libunwind-74-l-darwin>, <box-62-t-darwin>)
<libarchive-86-tl-darwin> -> (<bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<pkg-config-int-87-t-darwin> -> (<libiconv-70-tl-darwin>, <box-62-t-darwin>)
<gettext-88-tl-darwin> -> (<ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<libedit-89-l-darwin> -> (<ncurses-81-l-darwin>, <box-62-t-darwin>)
<readline-90-l-darwin> -> (<ncurses-81-l-darwin>, <box-62-t-darwin>)
<libcxx-91-l-darwin> -> (<libcxxrt-85-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<dl-92-l-darwin> -> (<libcxx-91-l-darwin>, <libcxxrt-85-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<p7zip-93-tl-darwin> -> (<libcxx-91-l-darwin>, <libcxxrt-85-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<pcre-94-l-darwin> -> (<libcxx-91-l-darwin>, <pkg-config-int-87-t-darwin>, <libcxxrt-85-l-darwin>, <bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<grep-95-t-darwin> -> (<gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <libsigsegv-65-l-darwin>, <box-62-t-darwin>)
<unrar-96-t-darwin> -> (<libcxx-91-l-darwin>, <libcxxrt-85-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<dash-97-t-darwin> -> (<libedit-89-l-darwin>, <ncurses-81-l-darwin>, <box-62-t-darwin>)
<sed-98-t-darwin> -> (<gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<coreutils-boot-99-t-darwin> -> (<gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<slang-100-l-darwin> -> (<readline-90-l-darwin>, <ncurses-81-l-darwin>, <zlib-75-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<sqlite3-101-tl-darwin> -> (<readline-90-l-darwin>, <ncurses-81-l-darwin>, <box-62-t-darwin>)
<bash-102-t-darwin> -> (<readline-90-l-darwin>, <gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<gawk-103-t-darwin> -> (<libcxx-91-l-darwin>, <readline-90-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <libsigsegv-65-l-darwin>, <box-62-t-darwin>)
<libffi-104-l-darwin> -> (<box-62-t-darwin>)
<tar-105-t-darwin> -> (<gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <bzip2-80-tl-darwin>, <libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<cmake-106-t-darwin> -> (<dl-92-l-darwin>, <libcxx-91-l-darwin>, <libarchive-86-tl-darwin>, <libcxxrt-85-l-darwin>, <bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <expat-69-l-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<libmetalink-107-l-darwin> -> (<expat-69-l-darwin>, <box-62-t-darwin>)
<perl5-108-t-darwin> -> (<coreutils-boot-99-t-darwin>, <gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <zlib-75-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<quasar-m4-109-t-darwin> -> (<coreutils-boot-99-t-darwin>, <box-62-t-darwin>)
<help2man-110-t-darwin> -> (<perl5-108-t-darwin>, <box-62-t-darwin>)
<python-111-t-darwin> -> (<libffi-104-l-darwin>, <sqlite3-101-tl-darwin>, <readline-90-l-darwin>, <gettext-88-tl-darwin>, <pkg-config-int-87-t-darwin>, <ncurses-81-l-darwin>, <zlib-75-l-darwin>, <libiconv-70-tl-darwin>, <expat-69-l-darwin>, <box-62-t-darwin>)
<bison-112-t-darwin> -> (<perl5-108-t-darwin>, <libcxx-91-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<openssl-113-l-darwin> -> (<perl5-108-t-darwin>, <dl-92-l-darwin>, <libcxx-91-l-darwin>, <libcxxrt-85-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<coreutils-114-t-darwin> -> (<openssl-113-l-darwin>, <dl-92-l-darwin>, <libcxx-91-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<yash-115-t-darwin> -> (<python-111-t-darwin>, <gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<diffutils-116-t-darwin> -> (<perl5-108-t-darwin>, <gettext-88-tl-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <libsigsegv-65-l-darwin>, <box-62-t-darwin>)
<ninja-117-t-darwin> -> (<python-111-t-darwin>, <libcxx-91-l-darwin>, <libcxxrt-85-l-darwin>, <libunwind-74-l-darwin>, <box-62-t-darwin>)
<glib-118-l-darwin> -> (<python-111-t-darwin>, <libffi-104-l-darwin>, <pcre-94-l-darwin>, <libcxx-91-l-darwin>, <gettext-88-tl-darwin>, <pkg-config-int-87-t-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<pkg-config-119-t-darwin> -> (<glib-118-l-darwin>, <libffi-104-l-darwin>, <pcre-94-l-darwin>, <libcxx-91-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<mc-ncurses-120--darwin> -> (<glib-118-l-darwin>, <libffi-104-l-darwin>, <pcre-94-l-darwin>, <libcxx-91-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<mc-slang-121--darwin> -> (<glib-118-l-darwin>, <libffi-104-l-darwin>, <slang-100-l-darwin>, <pcre-94-l-darwin>, <libcxx-91-l-darwin>, <readline-90-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <bzip2-80-tl-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <box-62-t-darwin>)
<libidn2-122-l-darwin> -> (<gettext-88-tl-darwin>, <libunistring-83-l-darwin>, <ncurses-81-l-darwin>, <libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<python3-123-t-darwin> -> (<openssl-113-l-darwin>, <libffi-104-l-darwin>, <sqlite3-101-tl-darwin>, <dl-92-l-darwin>, <libcxx-91-l-darwin>, <readline-90-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <ncurses-81-l-darwin>, <bzip2-80-tl-darwin>, <mpdecimal-79-l-darwin>, <zlib-75-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<curl-124-t-darwin> -> (<libidn2-122-l-darwin>, <openssl-113-l-darwin>, <libmetalink-107-l-darwin>, <dl-92-l-darwin>, <libcxx-91-l-darwin>, <gettext-88-tl-darwin>, <libcxxrt-85-l-darwin>, <libunistring-83-l-darwin>, <ncurses-81-l-darwin>, <libunwind-74-l-darwin>, <libiconv-70-tl-darwin>, <expat-69-l-darwin>, <xz-68-tl-darwin>, <box-62-t-darwin>)
<box-125-t-darwin> -> (<curl-124-t-darwin>, <python3-123-t-darwin>, <pkg-config-119-t-darwin>, <ninja-117-t-darwin>, <diffutils-116-t-darwin>, <yash-115-t-darwin>, <coreutils-114-t-darwin>, <bison-112-t-darwin>, <help2man-110-t-darwin>, <quasar-m4-109-t-darwin>, <tar-105-t-darwin>, <gawk-103-t-darwin>, <sqlite3-101-tl-darwin>, <sed-98-t-darwin>, <dash-97-t-darwin>, <unrar-96-t-darwin>, <grep-95-t-darwin>, <p7zip-93-tl-darwin>, <gettext-88-tl-darwin>, <libarchive-86-tl-darwin>, <gzip-82-t-darwin>, <bzip2-80-tl-darwin>, <slibtool-71-t-darwin>, <libiconv-70-tl-darwin>, <xz-68-tl-darwin>, <asciidoc-66-t-darwin>, <make-64-t-darwin>)
exec sequence [0, 1, 2, 12, 8, 13, 16, 9, 4, 7, 14, 11, 17, 5, 15, 10, 3, 6, 23, 19, 20, 21, 18, 22, 24, 26, 28, 27, 25, 31, 34, 30, 40, 37, 38, 29, 36, 35, 32, 33, 39, 44, 45, 41, 42, 43, 46, 47, 50, 48, 49, 51, 53, 54, 52, 55, 56, 58, 57, 60, 59, 61, 62, 77, 64, 71, 104, 67, 66, 63, 76, 82, 70, 80, 81, 65, 72, 75, 79, 78, 74, 69, 73, 68, 84, 90, 86, 88, 85, 89, 107, 87, 83, 102, 91, 122, 100, 95, 97, 105, 99, 98, 101, 103, 92, 96, 93, 111, 109, 94, 108, 117, 110, 112, 113, 118, 115, 106, 116, 119, 124, 114, 120, 123, 121, 125]
fin
{'name': 'linux/x86_64/pl/yash.py', 'path': '/Users/pg83/newhope/plugins/yash.py', 'data': '@y.package\ndef yash0():\n    opts = [\n        \'--enable-socket\',\n        \'--enable-printf\',\n        \'--enable-lineedit\',\n        \'--enable-history\',\n        \'--enable-double-bracket\',\n        \'--enable-dirstack\',\n        \'--enable-array\',\n    ]\n\n    return {\n        \'code\': """\n            source fetch "https://github.com/magicant/yash/archive/ae772d184ae4362df66f646fc6b7ff8164030a7b.zip" 0\n            mv ./yash* ./xxx\n            mv ./xxx/* ./\n            export LDFLAGS="$LDFLAGS $LIBS"\n            export CFLAGS="-Dwordfree=yash_wordfree $CFLAGS"\n            $YSHELL ./configure --prefix=$IDIR {opts}\n            echo \'install-rec:\' > doc/Makefile\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         """.replace(\'{opts}\', \' \'.join(opts)),\n        \'version\': \'2.49\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'intl\', \'ncurses\', \'xz\', \'tar\', \'asciidoc\', \'python\'],\n            \'provides\': [\n                {\'env\': \'YSHELL_OPT\', \'value\': \'{pkgroot}/bin/yash\'},\n                {\'env\': \'YASH\', \'value\': \'{pkgroot}/bin/yash\'},\n            ],\n        },\n    }\n', 'burn': '3635e4d13c5d7d44'}
{'name': 'linux/x86_64/pl/glib.py', 'path': '/Users/pg83/newhope/plugins/glib.py', 'data': '@y.package\ndef glib0():\n    return {\n        \'code\': """\n             source fetch "http://ftp.acc.umu.se/pub/gnome/sources/glib/2.30/glib-{version}.tar.xz" 1\n             export CFLAGS="-D_GNU_SOURCE=1 -I$(pwd)/inc $CFLAGS"\n             (mkdir inc && cd inc && mkdir sys && cd sys && echo \'#include <sys/sysmacros.h>\' > mkdev.h)\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libiconv=gnu --disable-nls || exit 1\n             echo \'#!\'$YSHELL > tmp && cat libtool >> tmp && mv tmp libtool && chmod +x libtool\n             $YMAKE -j $NTHRS || exit 1\n             $YMAKE install\n        """,\n        \'version\': \'2.30.3\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'iconv\', \'intl\', \'libffi\', \'pkg-config-int\', \'coreutils\', \'python\', \'zlib\', \'dash\', \'pcre\', \'slibtool\'],\n            \'provides\': [\n                {\n                    \'lib\': \'glib-2.0\', \n                    \'extra\': [\n                        {\'libs\': \'-framework CoreServices -framework CoreFoundation\'},\n                        {\'ipath\': \'{pkgroot}/include/glib-2.0\'},\n                        {\'ipath\': \'{pkgroot}/lib/glib-2.0/include\'},\n                    ],\n                },\n            ],\n        },\n    }\n', 'burn': '30d11e344bc08e5d'}
{'name': 'linux/x86_64/pl/make.py', 'path': '/Users/pg83/newhope/plugins/make.py', 'data': '@y.package\ndef make0():\n    def it():\n        yield \'source fetch "http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-{version}.tar.gz" 1\'\n        yield \'$YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\'\n        yield \'$YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-load || exit 1\'\n        yield \'$YMAKE -j $NTHRS\'\n        yield \'$YMAKE install\'\n\n    return {\n        \'code\': \'\\n\'.join(it()),\n        \'version\': \'4.2\',\n        \'meta\': {\n            \'kind\': [\'tool\', \'box\'],\n            \'depends\': [\'make-boot\'],\n            \'contains\': [\'make-boot\'],\n            \'provides\': [\n                {\'env\': \'YMAKE\', \'value\': \'{pkgroot}/bin/make\'},\n            ],\n        },\n    }\n', 'burn': 'e8d2c0ac95f89a04'}
{'name': 'linux/x86_64/pl/zlib.py', 'path': '/Users/pg83/newhope/plugins/zlib.py', 'data': '@y.package\ndef zlib0():\n    return {\n        \'code\': """\n            source fetch "http://zlib.net/zlib-{version}.tar.gz" 1\n            export LDFLAGS="$LDFLAGS $LIBS"\n            export TEST_LDFLAGS="$LDFLAGS -L. libz.a"\n            $YSHELL ./configure $COFLAGS --static --64 --prefix=$IDIR || exit 1\n            $YMAKE -j $NTHRS TEST_LDFLAGS="$TEST_LDFLAGS"\n            $YMAKE install\n        """,\n        \'version\': \'1.2.11\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'z\', \'configure\': {\'opt\': \'--with-z={pkgroot}\'}},\n                {\'env\': \'ZLIB_CFLAGS\', \'value\': \'"-I{pkgroot}/include"\'},\n                {\'env\': \'ZLIB_LIBS\', \'value\': \'"-L{pkgroot}/lib -lz"\'},\n            ],\n        },\n    }\n', 'burn': '1ee49b1bbab4acd3'}
{'name': 'linux/x86_64/pl/tar.py', 'path': '/Users/pg83/newhope/plugins/tar.py', 'data': '@y.package\ndef tar0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/tar/tar-{version}.tar.gz" 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR\n             $YMAKE -j $NTHRS && $YMAKE install\n        """,\n        \'version\': \'1.32\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'gzip\', \'bzip2\', \'xz\', \'unrar\'],\n            \'provides\': [\n                {\'env\': \'YGNUTAR\', \'value\': \'{pkgroot}/bin/tar\'},\n            ],\n        },\n    }\n', 'burn': '938fcc2be23e8cb5'}
{'name': 'linux/x86_64/pl/libidn2.py', 'path': '/Users/pg83/newhope/plugins/libidn2.py', 'data': '@y.package\ndef libidn20():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/libidn/libidn2-{version}.tar.gz" 1\n\n             ln -s "$CC" ./gcc\n             ln -s "$CC" ./cc\n             export PATH="$(pwd):$PATH"\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.2.0\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'intl\', \'iconv\', \'libunistring\', \'pkg-config\'],\n            \'provides\': [\n                {\'lib\': \'idn2\', \'configure\': {\'opt\': \'--with-libidn2={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '237c6ddd6ffa8ab4'}
{'name': 'linux/x86_64/pl/gawk.py', 'path': '/Users/pg83/newhope/plugins/gawk.py', 'data': '@y.package\ndef gawk0():\n    return {\n        \'code\': """\n             source fetch "https://mirror.tochlab.net/pub/gnu/gawk/gawk-{version}.tar.xz" 1\n\n             ln -s $AR ./ar\n             export PATH="$(pwd):$PATH"\n             export CFLAGS="-Derr=gawk_err $CFLAGS"\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin/awk_exec --disable-shared --enable-static --disable-extensions || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'5.0.1\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'readline\', \'libsigsegv\', \'c++\'],\n            \'soft\': [\'mpfr\', \'gmp\'],\n        },\n    }\n', 'burn': '39549971d10a787a'}
{'name': 'linux/x86_64/pl/libffi.py', 'path': '/Users/pg83/newhope/plugins/libffi.py', 'data': '@y.package\ndef libffi0():\n    return {\n        \'code\': """\n             source fetch "https://sourceware.org/ftp/libffi/libffi-{version}.tar.gz" 1\n\n             sed -e \'/^includesdir/ s/$(libdir).*$/$(includedir)/\' \\\n                 -i include/Makefile.in\n\n             sed -e \'/^includedir/ s/=.*$/=@includedir@/\' \\\n                 -e \'s/^Cflags: -I${includedir}/Cflags:/\' \\\n                 -i libffi.pc.in\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.2.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'sed\'],\n            \'provides\': [\n                {\'lib\': \'ffi\'},\n            ],\n        },\n    }\n', 'burn': 'aa935573d400eb85'}
{'name': 'linux/x86_64/pl/bison.py', 'path': '/Users/pg83/newhope/plugins/bison.py', 'data': '@y.package\ndef bison0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/bison/bison-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-relocatable || exit 1\n             $YMAKE -j $NTHRS || true\n             $YMAKE || true\n             $YMAKE\n             $YMAKE install\n        """,\n        \'version\': \'3.4.2\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'c++\', \'m4\', \'iconv\', \'intl\', \'xz\', \'perl5\']\n        },\n    }\n\n', 'burn': 'eaa93fceb714446c'}
{'name': 'linux/x86_64/pl/gettext_tiny.py', 'path': '/Users/pg83/newhope/plugins/gettext_tiny.py', 'data': '#@y.package\ndef gettext_tiny0():\n    return {\n        \'code\': """\n            source fetch "https://github.com/sabotage-linux/gettext-tiny/archive/{version}.zip" 0\n            cd gettext*\n            $YMAKE -j $NTHRS AR="$AR" RANLIB="$RANLIB" CC="$CC" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS $LIBS" LIBINTL="MUSL" all || exit 1\n            $YMAKE LIBINTL="MUSL" DESTDIR="$IDIR" prefix=/ install\n        """,\n        \'version\': \'55a2119d06403e05808d89eedc9e94a20e87cbd3\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'depends\': [\'iconv\'],\n            \'provides\': [\n                {\'lib\': \'intl\', \'configure\': {\'opt\': \'--with-libintl-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '4bc91ff2e611b9c4'}
{'name': 'linux/x86_64/pl/bzip2.py', 'path': '/Users/pg83/newhope/plugins/bzip2.py', 'data': '@y.package\ndef bzip20():\n    return {\n        \'code\': """\n            source fetch "https://sourceware.org/pub/bzip2/bzip2-{version}.tar.gz" 1\n            $YMAKE -j $NTHRS CC=$CC AR=$AR RANLIB=$RANLIB LDFLAGS="$LDFLAGS $LIBS" CFLAGS="$CFLAGS" PREFIX="$IDIR" install\n        """,\n        \'version\': \'1.0.8\',\n        \'meta\': {\n            \'kind\': [\'library\', \'box\', \'tool\'],\n            \'provides\': [\n                {\'lib\': \'bz2\'},\n                {\'env\': \'YBZIP2\', \'value\': \'{pkgroot}/bin/bzip2\'},\n            ],\n        },\n    }\n', 'burn': '60a0449b57dded55'}
{'name': 'linux/x86_64/pl/libedit.py', 'path': '/Users/pg83/newhope/plugins/libedit.py', 'data': '@y.package\ndef libedit0():\n    return {\n        \'code\': """\n             source fetch "http://thrysoee.dk/editline/libedit-{version}.tar.gz" 1\n             export CFLAGS="-D__STDC_ISO_10646__=1 $CFLAGS"\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'20191025-3.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'ncurses\', \'termcap\'],\n            \'provides\': [\n                {\'lib\': \'edit\'},\n            ],\n        },\n    }\n', 'burn': '21b99ed4d0429872'}
{'name': 'linux/x86_64/pl/toybox.py', 'path': '/Users/pg83/newhope/plugins/toybox.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def toybox0():\n        return {\n            \'os\': \'linux\',\n            \'code\': \'\'\'\n                mkdir -p $IDIR/bin\n                cd $IDIR/bin\n                source fetch "http://www.landley.net/toybox/downloads/binaries/{version}/toybox-x86_64" 0\n                cp toybox-* toybox\n                chmod +x toybox\n            \'\'\',\n            \'version\': \'0.8.1\',\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'provides\': [\n                    {\'env\': \'TOYBOX\', \'value\': \'{pkgroot}/bin/toybox\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '2345eb92a39fbc19'}
{'name': 'linux/x86_64/pl/busybox.py', 'path': '/Users/pg83/newhope/plugins/busybox.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def busybox0():\n        return {\n            \'os\': \'linux\',\n            \'code\': """\n                mkdir -p $IDIR/bin\n                cd $IDIR/bin\n                source fetch "https://www.busybox.net/downloads/binaries/{version}-defconfig-multiarch-musl/busybox-x86_64" 0\n                mv busybox-* busybox\n                chmod +x busybox\n            """,\n            \'version\': \'1.31.0\',\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'provides\': [\n                    {\'env\': \'BUSYBOX\', \'value\': \'{pkgroot}/bin/busybox\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '44e865278b0c2e7c'}
{'name': 'linux/x86_64/pl/xz.py', 'path': '/Users/pg83/newhope/plugins/xz.py', 'data': '@y.package\ndef xz0():\n    return {\n        \'code\': """\n             source fetch "https://sourceforge.net/projects/lzmautils/files/xz-{version}.tar.gz/download" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --disable-threads && $YMAKE -j $NTHRS && $YMAKE install\n        """,\n        \'version\': \'5.2.4\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'provides\': [\n                {\'lib\': \'lzma\'},\n                {\'env\': \'YXZ\', \'value\': \'{pkgroot}/bin/xz\'},\n                {\'env\': \'YXZCAT\', \'value\': \'{pkgroot}/bin/xzcat\'},\n            ],\n        },\n    }\n', 'burn': 'b0c93dee1008d80d'}
{'name': 'linux/x86_64/pl/libarchive.py', 'path': '/Users/pg83/newhope/plugins/libarchive.py', 'data': '@y.package\ndef libarchive0():\n    return {\n        \'code\': """\n             source fetch "https://libarchive.org/downloads/libarchive-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.4.0\',\n        \'meta\': {\n            \'kind\': [\'library\', \'tool\', \'box\'],\n            \'depends\': [\'zlib\', \'bzip2\', \'xz\'],\n            \'provides\': [\n                {\'lib\': \'archive\'},\n                {\'env\': \'YTAR\', \'value\': \'{pkgroot}/bin/bsdtar\'},\n            ],\n        },\n    }\n', 'burn': '859c6c61d6558a79'}
{'name': 'linux/x86_64/pl/yasm.py', 'path': '/Users/pg83/newhope/plugins/yasm.py', 'data': '#@y.ygenerator()\ndef yasm0():\n    return {\n        \'code\': """\n               source fetch "http://www.tortall.net/projects/yasm/releases/yasm-{version}.tar.gz" 1\n               export LIBS="$LDFLAGS $LIBS"\n               export CC_FOR_BUILD="$CC"\n               export CFLAGS_FOR_BUILD="$CFLAGS"\n               $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n               $YMAKE -j $NTHR\n               $YMAKE install\n        """,\n        \'version\': \'1.3.0\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n        },\n    }\n', 'burn': '40d7ff8005b6281c'}
{'name': 'linux/x86_64/pl/curl.py', 'path': '/Users/pg83/newhope/plugins/curl.py', 'data': '@y.package\ndef curl0():\n    return {\n        \'code\': """\n            source fetch "https://curl.haxx.se/download/curl-7.67.0.tar.xz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """,\n        \'version\': \'7.67.0-20191011\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'openssl\', \'libidn2\', \'libmetalink\'],\n            \'provides\': [\n                {\'env\': \'CURL\', \'value\': \'{pkgroot}/bin/curl\'},\n            ],\n        },\n    }\n', 'burn': 'd81e6193e37d3911'}
{'name': 'linux/x86_64/pl/perl5.py', 'path': '/Users/pg83/newhope/plugins/perl5.py', 'data': '@y.package\ndef perl50():\n    return {\n        \'code\': """\n            source fetch "https://www.cpan.org/src/5.0/perl-{version}.tar.gz" 0\n            mv perl* xxx\n            cd xxx\n\n            ln -s $AR ./ar\n            ln -s $NM ./nm\n            ln -s $CC ./gcc\n            export PATH="$(pwd):$PATH"\n\n            ./Configure -des -Accflags="$CFLAGS" -Aldflags="$LDFLAGS $LIBS" -Dusethreads -Duse64bitall -Dprefix=$IDIR -Duseperlio -Uusesfio -Duseshrplib=false -Dusedl=false -Dcc="$CC $CFLAGS $LDFLAGS $LIBS"\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """,\n        \'prepare\': """\n            source perl5_env\n        """,\n        \'version\': \'5.30.1\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'zlib\', \'coreutils-boot\'],\n            \'provides\': [\n                {\'env\': \'YPERL\', \'value\': \'{pkgroot}/bin/perl\'},\n            ],\n        },\n    }\n', 'burn': 'b884ddbf55923b21'}
{'name': 'linux/x86_64/pl/cxxrt.py', 'path': '/Users/pg83/newhope/plugins/cxxrt.py', 'data': '@y.package\ndef libcxxrt0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "https://github.com/pathscale/libcxxrt/archive/master.zip" 0\n             mv libcxxrt* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        """,\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_libcxxrt.sh\'][\'data\']},\n        ],\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'libunwind\'],\n            \'provides\': [\n                {\'lib\': \'cxxrt\'},\n                {\'env\': \'LIBCXXRT_INC\', \'value\': \'"{pkgroot}/include"\'},\n            ],\n        },\n    }\n', 'burn': '82a3b3fe94907ecb'}
{'name': 'linux/x86_64/pl/gzip.py', 'path': '/Users/pg83/newhope/plugins/gzip.py', 'data': '@y.package\ndef gzip0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/gzip/gzip-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'1.10\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'slibtool\'], \n            \'provides\': [\n                {\'env\': \'YGZIP\', \'value\': \'{pkgroot}/bin/gzip\'},\n            ],\n        },\n    }\n', 'burn': 'eb1be59b7f0235e9'}
{'name': 'linux/x86_64/pl/ninja.py', 'path': '/Users/pg83/newhope/plugins/ninja.py', 'data': '@y.package\ndef ninja0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/ninja-build/ninja/archive/v{version}.tar.gz" 0\n             mv ninja* xxx\n             cd xxx\n             export CFLAGS="-D_BSD_SOURCE=1 $CFLAGS"\n             export CXXFLAGS="-D_BSD_SOURCE=1 $CXXFLAGS"\n             export LDFLAGS="$LDFLAGS $LIBS"\n             $PYTHON ./configure.py --bootstrap\n             mkdir -p $IDIR/bin\n             install -v -m755 ninja $IDIR/bin\n        """,\n        \'version\': \'1.9.0\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'python\', \'c++\'],\n            \'provides\': [\n                {\'env\': \'YNINJA\', \'value\': \'{pkgroot}/bin/ninja\'},\n                {\'env\': \'NINJA\', \'value\': \'{pkgroot}/bin/ninja\'},\n            ],\n        },\n    }\n', 'burn': '5dd598e0da162b58'}
{'name': 'linux/x86_64/pl/diffutils.py', 'path': '/Users/pg83/newhope/plugins/diffutils.py', 'data': '@y.package\ndef diffutils0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/diffutils/diffutils-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             (cd man && echo \'#!\'"$YPERL -w" > tmp && cat help2man >> tmp && mv tmp help2man && chmod +x help2man)\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.7\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\', \'libsigsegv\', \'perl5\', \'help2man\']\n        },\n    }\n', 'burn': 'c774d99d382adb0d'}
{'name': 'linux/x86_64/pl/unwind.py', 'path': '/Users/pg83/newhope/plugins/unwind.py', 'data': '@y.package\ndef libunwind0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "http://releases.llvm.org/{version}/libunwind-{version}.src.tar.xz" 0\n             mv libunwind* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             cat src/AddressSpace.hpp | grep -v \'pragma comment\' > tmp && mv tmp src/AddressSpace.hpp\n             source mk.sh\n        """,\n        \'version\': \'9.0.0\',\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_libunwind.sh\'][\'data\']},\n        ],\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'unwind\'},\n            ],\n        },\n    }\n', 'burn': '69f4489ca7be433e'}
{'name': 'linux/x86_64/pl/ncurses.py', 'path': '/Users/pg83/newhope/plugins/ncurses.py', 'data': '@y.package\ndef ncurses0():\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/pub/gnu/ncurses/ncurses-{version}.tar.gz" 1\n            source add_strip\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-shared --without-debug --without-ada --enable-widec --enable-pc-files --enable-overwrite --enable-ext-colors --enable-termcap --with-pkg-config --with-termlib --without-cxx --without-cxx-binding\n            $YMAKE -j $NTHRS || true\n            $YMAKE -j $NTHRS\n            mv install install-tmp\n            ln -s install-sh install\n            $YMAKE install\n\n            cd $IDIR/lib && (for i in `ls *.a`; do q=`echo $i | tr -d \'w\'`;  ln -s $i $q; done)\n        """,\n        \'version\': \'6.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'slibtool\'],\n            \'provides\': [\n                {\'lib\': \'ncurses\', \'configure\': {\'opts\': [\'--with-curses={pkgroot}\', \'--with-ncurses={pkgroot}\']}},\n                {\'env\': \'LIBS\', \'value\': \'"$LIBS -lncurses -ltinfo -lpanel -lmenu -lform"\'},\n            ],\n        },\n    }\n', 'burn': '13b55c89d62fd343'}
{'name': 'linux/x86_64/pl/slang.py', 'path': '/Users/pg83/newhope/plugins/slang.py', 'data': '@y.package\ndef slang0():\n    return {\n        \'code\': """\n            source fetch "https://www.jedsoft.org/snapshots/slang-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR --with-readline=gnu --without-png --without-pcre --without-onig || exit 1\n            $YMAKE install-static || exit 1\n        """,\n        \'version\': \'pre2.3.3-15\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'zlib\', \'readline\', \'iconv\'],\n            \'provides\': [\'slang\'],\n        },\n    }\n', 'burn': '330cebf33ef42e2b'}
{'name': 'linux/x86_64/pl/termcap.py', 'path': '/Users/pg83/newhope/plugins/termcap.py', 'data': '@y.package\ndef termcap0():\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/gnu/termcap/termcap-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static \n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """,\n        \'version\': \'1.3.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'termcap\'},\n            ],\n        },\n    }\n', 'burn': '6cb6acc25f500713'}
{'name': 'linux/x86_64/pl/p7zip.py', 'path': '/Users/pg83/newhope/plugins/p7zip.py', 'data': '@y.package\ndef p7zip0():\n    return {\n        \'code\': \'\'\'\n             source fetch "https://downloads.sourceforge.net/p7zip/p7zip_{version}_src_all.tar.bz2" 1\n             cat makefile.linux_amd64  | grep -v \'PRE_COMP\' | sed -e \'s/CXX=.*/CXX=clang++/\' | sed -e \'s/CC=.*/CC=clang/\' > makefile.machine\n             export CFLAGS="-w $CFLAGS"\n             $YMAKE -j $NTHRS -f makefile DEST_DIR=$IDIR CC=$CC CXX=$CXX ALLFLAGS_C="$CFLAGS" ALLFLAGS_CPP="$CXXFLAGS -std=c++03" LDFLAGS="$LDFLAGS $LIBS" 7za install\n             (cd $IDIR/usr/local/ && mv * $IDIR/\n             rm -rf $IDIR/usr/local)\n             mkdir $IDIR/bin\n             install bin/7za $IDIR/bin\n        \'\'\',\n        \'version\': \'16.02\',\n        \'meta\': {\n            \'depends\': [\'c++\'],\n            \'kind\': [\'box\', \'tool\', \'library\'],\n            \'provides\': [\n                {\'env\': \'Y7ZA\', \'value\': \'{pkgroot}/bin/7za\'},\n            ],\n        },\n    }\n', 'burn': '678fd39984910b5c'}
{'name': 'linux/x86_64/pl/pth.py', 'path': '/Users/pg83/newhope/plugins/pth.py', 'data': '@y.package\ndef pth0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/pth/pth-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-optimize --disable-shared --enable-static || exit 1\n             $YMAKE \n             $YMAKE install\n        """,\n        \'version\': \'2.0.7\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'pth\', \'configure\': {\'opts\': [\'--with-libpth-prefix={pkgroot}\', \'--with-pth\']}},\n            ],\n        },\n    }\n', 'burn': 'a74030dc716b6721'}
{'name': 'linux/x86_64/pl/libiconv.py', 'path': '/Users/pg83/newhope/plugins/libiconv.py', 'data': '@y.package\ndef libiconv0():\n    extra = []\n\n    #if defined(__DARWIN__)\n        extra = [\n            {\'libs\': \'-framework CoreFoundation\'}\n        ]\n    #endif\n\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-{version}.tar.gz" 1\n            export LDFLAGS="$LDFLAGS $LIBS"\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        """,\n        \'version\': \'1.16\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'provides\': [\n                {\n                    \'lib\': \'iconv\',\n                    \'configure\': {\n                        \'opts\': [\n                            \'--with-libiconv-prefix={pkgroot}\',\n                            \'--with-iconv={pkgroot}\',\n                        ],\n                    },\n                    \'extra\': extra,\n                },\n                {\'lib\': \'charset\'},\n            ],\n        },\n    }\n', 'burn': '3bb81e05e8f0be3a'}
{'name': 'linux/x86_64/pl/make_boot.py', 'path': '/Users/pg83/newhope/plugins/make_boot.py', 'data': '@y.package\ndef make_boot0():\n    extra = []\n\n    #if defined(__LINUX__)\n        extra = [\'musl-boot\']\n    #endif\n\n    code = \'\'\'\n        source fetch "http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-{version}.tar.gz" 1\n        export CPPFLAGS="-I./glob $CPPFLAGS"\n        $YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\n        $YSHELL ./build.sh\n        mkdir $IDIR/bin && cp make $IDIR/bin/ && chmod +x $IDIR/bin/make\n    \'\'\'\n\n    return {\n        \'code\': code,\n        \'version\': \'4.2\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': extra,\n            \'provides\': [\n                {\'env\': \'YMAKE\', \'value\': \'{pkgroot}/bin/make\'},\n            ],\n        },\n    }\n', 'burn': '3590797ab61227c4'}
{'name': 'linux/x86_64/pl/jemalloc.py', 'path': '/Users/pg83/newhope/plugins/jemalloc.py', 'data': '@y.package\ndef jemalloc0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/jemalloc/jemalloc/releases/download/{version}/jemalloc-{version}.tar.bz2" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --disable-cxx --disable-prof --disable-libdl || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'5.2.1\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'make-boot\'],\n            \'provides\': [\n                {\'lib\': \'jemalloc\'},\n            ],\n        },\n    }\n', 'burn': '4b39edb3537cf14b'}
{'name': 'linux/x86_64/pl/mc.py', 'path': '/Users/pg83/newhope/plugins/mc.py', 'data': 'def mc(gui):\n    return {\n        \'code\': """\n             source fetch "http://ftp.midnight-commander.org/mc-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-screen={gui}  || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """.replace(\'{gui}\', gui),\n        \'version\': \'4.8.23\',\n        \'meta\': {\n            \'kind\': [\'program\'],\n            \'depends\': [\'intl\', \'iconv\', \'glib\', gui],\n        }\n    }\n\n\n@y.package\ndef mc_slang0():\n    return mc(\'slang\')\n\n\n@y.package\ndef mc_ncurses0():\n    return mc(\'ncurses\')\n', 'burn': '24f804ca8c25e107'}
{'name': 'linux/x86_64/pl/dash.py', 'path': '/Users/pg83/newhope/plugins/dash.py', 'data': '@y.package\ndef dash0():\n    return {\n        \'code\': """\n            source fetch "http://gondor.apana.org.au/~herbert/dash/files/dash-{version}.tar.gz" 1\n            export CFLAGS_FOR_BUILD="$CFLAGS $LDFLAGS $LIBS"\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         """,\n        \'version\': \'0.5.10.2\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'libedit\'],\n            \'provides\': [\n                {\'env\': \'YSHELL\', \'value\': \'{pkgroot}/bin/dash\'},\n                {\'env\': \'DASH\', \'value\': \'{pkgroot}/bin/dash\'},\n            ],\n        },\n    }\n', 'burn': 'dabb4b28aaa9d8a5'}
{'name': 'linux/x86_64/pl/grep.py', 'path': '/Users/pg83/newhope/plugins/grep.py', 'data': '@y.package\ndef grep0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/grep/grep-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.3\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'intl\', \'libsigsegv\', \'iconv\']\n        },\n    }\n', 'burn': 'e4f011b48e86952b'}
{'name': 'linux/x86_64/pl/bestbox.py', 'path': '/Users/pg83/newhope/plugins/bestbox.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def bestbox0():\n        return {\n            \'os\': \'linux\',\n            \'code\': """\n                mkdir -p $IDIR/bin\n\n                cp $TOYBOX $IDIR/bin\n                cp $BUSYBOX $IDIR/bin\n                cd $IDIR/bin\n\n                for i in `./toybox`; do\n                    ln -fs toybox $i\n                done\n\n                for x in `./busybox --list-full`; do\n                    y=$(basename $x)\n                    ln -fs busybox $y\n                done\n            """,\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'depends\': [\'busybox\', \'toybox\'],\n                \'contains\': [\'busybox\', \'toybox\'],\n                \'provides\': [\n                     {\'env\': \'YGZIP\', \'value\': \'{pkgroot}/bin/gzip\'},\n                     {\'env\': \'YTAR\', \'value\': \'{pkgroot}/bin/tar\'},\n                     {\'env\': \'YWGET\', \'value\': \'{pkgroot}/bin/wget\'},\n                     {\'env\': \'TOYBOX\', \'value\': \'{pkgroot}/bin/toybox\'},\n                     {\'env\': \'BUSYBOX\', \'value\': \'{pkgroot}/bin/busybox\'},\n                     {\'env\': \'YSHELL\', \'value\': \'{pkgroot}/bin/sh\'},\n                ],\n            },  \n        }\n\n\n    @y.package\n    def superbox0():\n        data = y.dc(bestbox0())\n        data[\'os\'] = \'linux\'\n        data[\'meta\'][\'provides\'].append({\'env\': \'COREUTILS\', \'value\': \'{pkgroot}/bin/coreutils\'})\n        data[\'meta\'][\'provides\'].append({\'env\': \'DASH\', \'value\': \'{pkgroot}/bin/dash\'})\n        data[\'meta\'][\'kind\'].append(\'box\')\n        data[\'meta\'][\'depends\'] += [\'coreutils\', \'dash\']\n        data[\'meta\'][\'contains\'] = [\'bestbox\', \'busybox\', \'toybox\', \'coreutils\', \'dash\']\n        data[\'code\'] += \'\'\'\n            cp "$COREUTILS" "$IDIR/bin/"\n            cd "$IDIR/bin/"\n            progs=$(./coreutils --help | tr \'\\\\n\' \' \' | sed -e \'s/.*\\[//\' | sed -e \'s/ Use: .*//\') \n\n            for i in $progs; do \n                ln -fs coreutils $i\n            done\n\n            cp "$DASH" "$IDIR/bin/"\n            cd "$IDIR/bin/"\n            ln -fs dash sh\n        \'\'\'\n\n        return data\n#endif\n', 'burn': 'cf0fc449132d4112'}
{'name': 'linux/x86_64/pl/sqlite3.py', 'path': '/Users/pg83/newhope/plugins/sqlite3.py', 'data': '@y.package\ndef sqlite30():\n    return {\n        \'code\': """\n            source fetch "https://www.sqlite.org/2019/sqlite-autoconf-{version}.tar.gz" 1\n            export CFLAGS="-DSQLITE_OMIT_LOAD_EXTENSION=1 $CFLAGS"\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR || exit 1\n            $YMAKE install || exit 1\n        """,\n        \'version\': \'3300100\',\n        \'meta\': {\n            \'kind\': [\'library\', \'tool\', \'box\'],\n            \'depends\': [\'readline\'],\n            \'provides\': [\n                {\'lib\': \'sqlite3\'},\n            ],\n        },\n    }\n', 'burn': 'ade8cf079c607fd5'}
{'name': 'linux/x86_64/pl/dl.py', 'path': '/Users/pg83/newhope/plugins/dl.py', 'data': '@y.package\ndef dl0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/pg83/newhope/archive/{version}.zip" 0\n             cd newhope* && cd support/libdl\n             $YMAKE CXX="$CXX" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" LIBS="$LIBS" AR="$AR" NM="$NM" RANLIB="$RANLIB" DESTDIR="$IDIR" install\n        """,\n        \'version\': \'670037f6c15db5c0b46b7452124bce8bcc2f9801\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'c++\'],\n            \'provides\': [\n                {\'lib\': \'dl\'},\n            ],\n        },\n    }\n', 'burn': '740d72e0e1abdeb6'}
{'name': 'linux/x86_64/pl/unrar.py', 'path': '/Users/pg83/newhope/plugins/unrar.py', 'data': '@y.package\ndef unrar0():\n    return {\n        \'code\': """\n             source fetch "http://www.rarlab.com/rar/unrarsrc-{version}.tar.gz" 0\n             source add_strip\n             cd unrar\n             $YMAKE CC=$CC CXX=$CXX AR=$AR RANLIB=$RANLIB LDFLAGS="$LDFLAGS" CPPFLAGS="" CXXFLAGS="$CXXFLAGS" -f makefile\n             mkdir -p $IDIR/bin\n             install -v -m755 unrar $IDIR/bin\n        """,\n        \'version\': \'5.8.3\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'c++\'],\n            \'provides\': [\n                {\'env\': \'YUNRAR\', \'value\': \'{pkgroot}/bin/unrar\'},\n            ],\n        },\n    }\n', 'burn': '01c9a803cfbee24c'}
{'name': 'linux/x86_64/pl/netbsd_curses.py', 'path': '/Users/pg83/newhope/plugins/netbsd_curses.py', 'data': '@y.package\ndef netbsd_curses0():\n    return {\n        \'code\': """\n            source fetch "https://github.com/sabotage-linux/netbsd-curses/archive/{version}.zip" 0\n            cd netbsd*\n            $YMAKE -j 1 CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="$CFLAGS $LDFLAGS $LIBS"  LDFLAGS="$LDFLAGS $LIBS" LDFLAGS_HOST="$LDFLAGS $LIBS" PREFIX=/ DESTDIR="$IDIR" all-static install-static\n        """,\n        \'version\': \'5b0d21692c6c2db31e960961f7a846429e701c30\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'make\'],\n            \'provides\': [\n                {\'lib\': \'curses\', \'configure\': {\'opts\': [\'--with-curses={pkgroot}\', \'--with-ncurses={pkgroot}\']}},\n                {\'env\': \'LIBS\', \'value\': \'"$LIBS -lform -lmenu -lpanel -lcurses -lterminfo"\'},\n            ],\n        },\n    }\n', 'burn': '00d023218397b2e4'}
{'name': 'linux/x86_64/pl/openssl.py', 'path': '/Users/pg83/newhope/plugins/openssl.py', 'data': '@y.package\ndef openssl0():\n    version = \'1.1.1c\'\n    flags = \'linux-x86_64-cc\'\n    extra = []\n\n    return {\n        \'code\': """\n            source fetch "https://www.openssl.org/source/old/{minver}/openssl-{version}.tar.gz" 1\n            $YPERL ./Configure {flags} no-asm threads no-shared no-dso no-hw no-tests no-engine --prefix=$IDIR --openssldir=$IDIR -w -std=c99 -D_GNU_SOURCE=1 $CFLAGS $LDFLAGS $LIBS\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """.replace(\'{minver}\', version[:-1]).replace(\'{flags}\', flags),\n        \'version\': version,\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': extra + [\n                \'perl5\',\n                \'dl\',\n            ],\n            \'provides\': [\n                {\'lib\': \'ssl\'},\n            ],\n        },\n    }\n', 'burn': '3d7ac3fb583a0139'}
{'name': 'linux/x86_64/pl/sed.py', 'path': '/Users/pg83/newhope/plugins/sed.py', 'data': '@y.package\ndef sed0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/sed/sed-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'4.7\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'iconv\', \'intl\'],\n            \'provides\': [\n                {\'env\': \'SED\', \'value\': \'{pkgroot}/bin/sed\'},\n            ],\n        }\n    }\n', 'burn': 'a4373c7dbb83af29'}
{'name': 'linux/x86_64/pl/scripts.py', 'path': '/Users/pg83/newhope/plugins/scripts.py', 'data': '@y.cached()\ndef gen_check_log(data):\n    p1, p2, p3 = tuple(data.split(\'EOF\'))\n\n    args = p1.strip()\n    tmpl = p2.strip()\n    cmd = p3.strip()\n\n    def iter_params():\n        yield \'fgrep\'\n        yield args\n\n        for p in tmpl.split(\'\\n\'):\n            yield \'-e\'\n            yield "\'" + p.strip() + "\'"\n\n    grep = \' \'.join(iter_params())\n    cmd = cmd.format(grep=grep)\n\n    return cmd\n\n\ndef scripts_data(no_last=False):\n    def iter():\n        for x in y.globals.file_data:\n            k = x[\'name\']\n\n            if not k.startswith(\'sc/\'):\n                continue\n\n            k = k[3:]\n            v = x[\'data\']\n            func = {\'check_log\': gen_check_log}.get(k, lambda x: x)\n\n            yield {\'kind\': \'file\', \'path\': \'bin/\' + k, \'data\': func(v)}\n\n        for k, v in y.gen_extra_scripts():\n            yield {\'kind\': \'file\', \'path\': \'bin/\' + k, \'data\': v}\n\n        if no_last:\n            pass\n        else:\n            data = \'export PATH="{path}:$PATH" && . runtime\'.format(path=build_scripts_dir())\n\n            yield {\'kind\': \'file\', \'path\': \'build\', \'data\': data}\n\n    return list(sorted(iter(), key=lambda x: x[\'path\']))\n\n\ndef unpack_sh(no_last=False):\n    for x in scripts_data(no_last=no_last):\n        yield \'echo "{data}" | (base64 -D -i - -o - || base64 -d) > {fname}\'.format(data=y.base64.b64encode(x[\'data\'].encode(\'utf-8\')).decode(\'utf-8\'), fname=y.os.path.basename(x[\'path\']))\n\n\n@y.singleton\ndef build_scripts_dir():\n    data = list(unpack_sh(no_last=True))\n    ver = y.struct_dump_bytes(data)[:5]\n\n    return \'$MD/noarch-build-scripts-run-\' + ver\n\n\ndef build_scripts_path():\n    return build_scripts_dir() + \'/build\'\n\n\n@y.singleton\ndef build_scripts_run():\n    output = build_scripts_path()\n\n    res = {\n        \'inputs\': [],\n        \'output\': build_scripts_path(),\n        \'build\': [\n            \'export PATH=$PATH:/bin:/usr/bin:/usr/local/bin; rm -rf "{output}" || true && mkdir -p "{output}" && cd "{output}"\'.format(output=build_scripts_dir()),\n        ] + list(unpack_sh()),\n    }\n\n    res[\'hash\'] = y.struct_dump_bytes(res)\n\n    return res\n', 'burn': 'b16f29d464de02bf'}
{'name': 'linux/x86_64/pl/libunistring.py', 'path': '/Users/pg83/newhope/plugins/libunistring.py', 'data': '@y.package\ndef libunistring0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/libunistring/libunistring-{version}.tar.xz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'0.9.10\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'iconv\', \'xz\'],\n            \'provides\': [\n                {\'lib\': \'unistring\', \'configure\': {\'opt\': \'--with-libunistring-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '05375a487a2b9d48'}
{'name': 'linux/x86_64/pl/kernel_h.py', 'path': '/Users/pg83/newhope/plugins/kernel_h.py', 'data': '#if defined(__LINUX__)\n    @y.package\n    def kernel_h0():\n        return {\n            \'os\': \'linux\',\n            \'code\': """\n                source fetch "https://github.com/sabotage-linux/kernel-headers/archive/{version}.zip" 0\n                mv kernel* xxx && cd xxx\n                cd x86_64\n                cp -RL ./include $IDIR/\n            """,\n            \'version\': \'fefadd9e4e093f776cd14ee3685a80eb4ca000f4\',\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'provides\': [\n                    {\'env\': \'CPPFLAGS\', \'value\': \'"$CPPFLAGS -I{pkgroot}/include"\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '78072e1ec6cfd237'}
{'name': 'linux/x86_64/pl/m4.py', 'path': '/Users/pg83/newhope/plugins/m4.py', 'data': '@y.package\ndef m40():\n    return {\n        \'code\': """\n               source fetch "https://ftp.gnu.org/gnu/m4/m4-{version}.tar.gz" 1\n               $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-c++\n               $YMAKE -j $NTHRS\n               $YMAKE install\n        """,\n        \'version\': \'1.4.18\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'libsigsegv\'],\n            \'provides\': [\n                {\'env\': \'M4\', \'value\': \'{pkgroot}/bin/m4\'},\n            ],\n        },\n    }\n', 'burn': '9ee39b1676ed21d9'}
{'name': 'linux/x86_64/pl/quasar_m4.py', 'path': '/Users/pg83/newhope/plugins/quasar_m4.py', 'data': '@y.package\ndef quasar_m40():\n    return {\n        \'code\': """\n               source fetch "http://haddonthethird.net/m4/m4-{version}.tar.bz2" 1\n               $YMAKE -j $NTHRS CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS $LIBS" CC="$CC" m4 \n               $YMAKE  PREFIX=/ DESTDIR="$IDIR" install\n        """,\n        \'version\': \'2\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'coreutils-boot\'],\n            \'provides\': [\n                {\'env\': \'M4\', \'value\': \'{pkgroot}/bin/m4\'},\n            ],\n        },\n    }\n', 'burn': 'c6c584fcf034190a'}
{'name': 'linux/x86_64/pl/pkg_config.py', 'path': '/Users/pg83/newhope/plugins/pkg_config.py', 'data': 'def pkg_config_base(opts, deps, kind):\n    return {\n        \'code\': """\n            source fetch "https://pkg-config.freedesktop.org/releases/pkg-config-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared {opts}\n            cd glib\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-libiconv=gnu --enable-static --disable-shared {opts} --srcdir=.\n            $YMAKE -j $NTHRS\n            cd ..\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """.replace(\'{opts}\', \' \'.join(opts)),\n        \'version\': \'0.29.2\',\n        \'meta\': {\n            \'kind\': kind,\n            \'depends\': deps,\n            \'provides\': [\n                {\'env\': \'PKG_CONFIG\', \'value\': \'{pkgroot}/bin/pkg-config\'}\n            ],\n        },\n    }\n\n\n@y.package\ndef pkg_config0():\n    return pkg_config_base([], [\'iconv\', \'glib\', \'slibtool\'], [\'box\', \'tool\'])\n\n\n@y.package\ndef pkg_config_int0():\n    return pkg_config_base([\'--with-internal-glib\'], [\'iconv\', \'slibtool\'], [\'tool\'])\n', 'burn': '73f69256f1daf3c6'}
{'name': 'linux/x86_64/pl/asciidoc.py', 'path': '/Users/pg83/newhope/plugins/asciidoc.py', 'data': '@y.package\ndef asciidoc0():\n    return {\n        \'code\': """\n             source fetch "https://downloads.sourceforge.net/project/asciidoc/asciidoc/{version}/asciidoc-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'8.6.9\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'provides\': [],\n        }\n    }\n', 'burn': '670b8de9b48c99c1'}
{'name': 'linux/x86_64/pl/gettext.py', 'path': '/Users/pg83/newhope/plugins/gettext.py', 'data': '@y.package\ndef gettext0():\n    opts = [\n        \'--with-included-libunistring\',\n        \'--with-included-libxml\',\n        \'--with-included-gettext\',\n        \'--enable-relocatable\',\n        \'--disable-c++\',\n    ]\n\n    return {\n        \'code\': """\n            source fetch "https://ftp.gnu.org/gnu/gettext/gettext-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared {opts} || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        """.replace(\'{opts}\', \' \'.join(opts)),\n        \'version\': \'0.20.1\',\n        \'meta\': {\n            \'kind\': [\'box\', \'library\', \'tool\'],\n            \'depends\': [\'iconv\', \'ncurses\'],\n            \'provides\': [\n                {\'lib\': \'intl\', \'configure\': {\'opt\': \'--with-libintl-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '5ac3f54d7ac474ab'}
{'name': 'linux/x86_64/pl/libmetalink.py', 'path': '/Users/pg83/newhope/plugins/libmetalink.py', 'data': '@y.package\ndef libmetalink0():\n    return {\n        \'code\': """\n             source fetch "https://launchpad.net/libmetalink/trunk/libmetalink-{version}/+download/libmetalink-{version}.tar.gz" 1\n             export SHELL=`which dash` \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libexpat=yes --with-libxml2=no || exit 1\n             $YMAKE -j $NTHRS SHELL=$SHELL\n             $YMAKE install\n        """,\n        \'version\': \'0.1.3\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'expat\', \'dash\'],\n            \'provides\': [\n                {\'lib\': \'metalink\', \'configure\': {\'opt\': \'--with-libmetalink={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '66bd19a0a159abc7'}
{'name': 'linux/x86_64/pl/musl.py', 'path': '/Users/pg83/newhope/plugins/musl.py', 'data': '#if defined(__LINUX__)\n    def musl0():\n        return {\n            \'code\': """\n                source fetch "https://www.musl-libc.org/releases/musl-{version}.tar.gz" 1\n                export CFLAGS="-Diconv=musl_iconv -Diconv_open=musl_iconv_open -Diconv_close=musl_iconv_close -Ddlopen=musl_dlopen -Ddlclose=musl_dlclose -Ddlerror=musl_dlerror -Ddlsym=musl_dlsym $CFLAGS"\n                rm src/ldso/x86_64/dlsym.s\n                $YSHELL ./configure --prefix=$IDIR --enable-static --disable-shared || exit 1\n                $YMAKE -j $NTHRS || exit 1\n                $YMAKE install || exit 2\n                $(APPLY_EXTRA_PLAN_2)\n                source ./malloc.sh\n                (cd $IDIR/lib && $AR q libc.a crt1.o crti.o crtn.o && rm *crt* && $RANLIB libc.a && ln -s libc.a libmuslc.a && rm libdl.a)\n                rm $IDIR/include/iconv.h\n                source fetch_url "$IDIR/include/stdatomic.h" "https://raw.githubusercontent.com/llvm-mirror/clang/master/lib/Headers/stdatomic.h"\n            """,\n            \'version\': \'1.1.24\', \n            \'extra\': [\n                {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_musl.sh\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'crt/dso.c\', \'data\': y.globals.by_name[\'data/dso.c\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'malloc.sh\', \'data\': y.globals.by_name[\'data/malloc.sh\'][\'data\']},\n            ],\n            \'meta\': {\n                \'kind\': [\'library\'],\n                #\'contains\': [\'musl-boot\'],\n                #\'depends\': [\'bestbox\', \'make-boot\', \'mimalloc\'],\n                \'provides\': [\n                    {\'lib\': \'muslc\'},\n                    {\'env\': \'CPPFLAGS\', \'value\': \'"$CPPFLAGS -I{pkgroot}/include"\'},\n                    {\'env\': \'CFLAGS\', \'value\': \'"-w $CFLAGS"\'},\n                ],\n            },\n        }\n#endif\n', 'burn': 'f6f44dd6936d9110'}
{'name': 'linux/x86_64/pl/git.py', 'path': '/Users/pg83/newhope/plugins/git.py', 'data': '#@y.ygenerator()\ndef git0():\n    return {\n        \'code\': """\n             source fetch "https://mirrors.edge.kernel.org/pub/software/scm/git/git-{version}.tar.xz" 1\n\n             export CFLAGS="-w -Icompat/regex -iquote$(pwd) $CFLAGS"\n             export CPPFLAGS="-w -Icompat/regex $CPPFLAGS"\n             export LDFLAGS="$LDFLAGS $LIBS"\n\n             ln -s $PYTHON ./python \n             export PATH="$(pwd):$PATH"\n\n             $YSHELL ./configure --prefix="$IDIR" --with-python=$PYTHON --with-perl=$YPERL --with-shell=$YSHELL --with-libpcre1 --with-openssl\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.24.1\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'pcre\', \'curl\', \'openssl\', \'expat\', \'python\', \'iconv\', \'perl5\', \'zlib\'],\n            \'provides\': [\n                {\'env\': \'GIT\', \'value\': \'{pkgroot}/bin/git\'},\n                {\'env\': \'GIT_EXEC_PATH\', \'value\': \'{pkgroot}/bin\'},\n            ],\n        },\n    }\n', 'burn': '8eb8f8b3ebe30ac9'}
{'name': 'linux/x86_64/pl/python3.py', 'path': '/Users/pg83/newhope/plugins/python3.py', 'data': 'def python_base(kind):\n    version = \'3.8.0\'\n    ver = \'.\'.join(version.split(\'.\')[:2])\n\n    return {\n        \'code\': """\n            source fetch "https://www.python.org/ftp/python/{version}/Python-{version}.tar.xz" 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $(APPLY_EXTRA_PLAN_1)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-system-libmpdec --enable-static --disable-shared --with-signal-module --with-system-ffi || exit1\n            $YMAKE -j $NTHRS || exit 1\n            PY=`which ./python.exe || which ./python`\n            $PY ./fix.py patch ./setup.py\n            DUMP=1 $PY ./setup.py build > data.json\n            $PY ./fix.py ./data.json > Modules/Setup.local\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            cp -R Tools $IDIR/\n            mv $IDIR/Tools $IDIR/tools \n\n            (cd $IDIR/lib/python{ver} && ln -s config-{ver}* config-{ver})\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_2)\n            $(APPLY_EXTRA_PLAN_3)\n            source ./mk_staticpython.sh "$IDIR/bin/python{ver}" "{ver}" "3" "Py_BytesMain"\n        """.replace(\'{ver}\', ver),\n        \'version\': version,\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'Modules/Setup\', \'data\': y.builtin_data(\'data/Setup.local\')},\n            {\'kind\': \'file\', \'path\': \'fix.py\', \'data\': y.builtin_data(\'data/python3_bc.py\')},\n            {\'kind\': \'file\', \'path\': \'find_modules.py\', \'data\': y.builtin_data(\'data/find_modules.py\')},\n            {\'kind\': \'file\', \'path\': \'mk_staticpython.sh\', \'data\': y.builtin_data(\'data/mk_staticpython.sh\')},\n        ],\n        \'meta\': {\n            \'kind\': kind,\n            \'depends\': [\n                \'ncurses\', \'iconv\', \'intl\', \'zlib\',\n                \'pkg-config\', \'libffi\', \'readline\',\n                \'termcap\', \'mpdecimal\', \'xz\', \'bzip2\',\n                \'sqlite3\', \'openssl\', \'dl\',\n            ],\n            \'provides\': [\n                {\'lib\': \'python3.8\'},\n                {\'env\': \'PYTHON3\', \'value\': \'{pkgroot}/bin/staticpython3\'},\n                {\'env\': \'PYTHON3HOME\', \'value\': \'{pkgroot}/lib/python3.8\'},\n            ],\n        },\n    }\n\n\n@y.package\ndef python30():\n    return python_base([\'tool\', \'box\'])\n', 'burn': '46340505cc620ed8'}
{'name': 'linux/x86_64/pl/bash.py', 'path': '/Users/pg83/newhope/plugins/bash.py', 'data': '@y.package\ndef bash0():\n    def do():\n        yield \'--disable-extended-glob-default\'\n        yield \'--enable-extended-glob\'\n        yield \'--enable-job-control\'\n\n    return {\n        \'code\': """\n            export CFLAGS="-fpermissive $CFLAGS -w"\n            export LIBS="$LDFLAGS $LIBS"\n            source fetch "https://ftp.gnu.org/gnu/bash/bash-{version}.tar.gz" 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-bash-malloc --disable-nls  {extra}\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        """.replace(\'{extra}\', \' \'.join(do())),\n        \'version\': \'5.0\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'readline\', \'ncurses\', \'intl\', \'iconv\']\n        }\n    }\n', 'burn': 'a23fd060980e45c9'}
{'name': 'linux/x86_64/pl/cmake.py', 'path': '/Users/pg83/newhope/plugins/cmake.py', 'data': '@y.package\ndef cmake0():\n    extra = []\n\n    #if defined(__LINUX__)\n        extra = [\'kernel-h\']\n    #endif\n\n    return {\n        \'code\': """\n             source fetch "https://github.com/Kitware/CMake/releases/download/v{version}/cmake-{version}.tar.gz" 1\n             export CFLAGS="-w $CFLAGS $LDFLAGS $LIBS"\n             export CXXFLAGS="-w $CXXFLAGS $LDFLAGS $LIBS"\n             $YSHELL ./bootstrap --system-expat --system-zlib --system-bzip2 --system-liblzma --system-libarchive --prefix=$IDIR --parallel=$NTHRS -- -DCMAKE_USE_OPENSSL=OFF -Dfortran=OFF -DBUILD_TESTING=OFF || true\n             echo > .clang-tidy\n             ./Bootstrap.cmk/cmake .\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'3.16.1\',\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\n                \'c++\',\n                \'zlib\',\n                \'bzip2\',\n                \'xz\',\n                \'libarchive\',\n                \'expat\',\n                \'dl\',\n                \'iconv\',\n            ] + extra,\n            \'provides\': [\n                {\'env\': \'CMAKE\', \'value\': \'{pkgroot}/bin/cmake\'},\n            ],\n        }\n    }\n', 'burn': '2daa4ff5af280e70'}
{'name': 'linux/x86_64/pl/expat.py', 'path': '/Users/pg83/newhope/plugins/expat.py', 'data': '@y.package\ndef expat0():\n    return {\n        \'code\': """\n             source fetch "https://github.com/libexpat/libexpat/releases/download/R_{_version_}/expat-{version}.tar.bz2" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-examples --enable-static --disable-shared || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.2.9\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'expat\', \'configure\': {\'opt\': \'--with-expat={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '13857abf72a4a617'}
{'name': 'linux/x86_64/pl/slibtool.py', 'path': '/Users/pg83/newhope/plugins/slibtool.py', 'data': '@y.package\ndef slibtool0():\n    return {\n        \'code\': """\n             source fetch "https://git.foss21.org/slibtool/snapshot/slibtool-{version}.tar.xz" 1\n             $YSHELL ./configure --prefix=$IDIR || exit1 \n             $YMAKE -j $NTHRS install || exit 1\n        """,\n        \'version\': \'0.5.28\',\n        \'meta\': {\n            \'kind\': [\'tool\', \'box\'],\n            \'provides\': [\n                {\'env\': \'LIBTOOL\', \'value\': \'export LIBTOOL="{pkgroot}/bin/dlibtool"\'},\n            ],\n        },\n    }\n', 'burn': '2766f9c056a42c1d'}
{'name': 'linux/x86_64/pl/mimalloc.py', 'path': '/Users/pg83/newhope/plugins/mimalloc.py', 'data': '@y.package\ndef mimalloc0():\n    depends = []\n\n    #if defined(__LINUX__)\n        depends1 = [\'musl-boot\', \'kernel-h\']\n    #endif\n\n    return {\n        \'code\': """\n             source fetch "https://github.com/microsoft/mimalloc/archive/acb03c54971c4b0a43a6d17ea55a9d5feb88972f.zip" 0\n             (mv mim* xxx && mv xxx/* ./)\n             $CC $CFLAGS -DMI_MALLOC_OVERRIDE=1 -std=c11 -Iinclude -Dasm=__asm__ -c src/static.c -o static.o\n             $AR q libmimalloc.a static.o\n             $RANLIB libmimalloc.a\n             mkdir $IDIR/lib\n             mv libmimalloc.a $IDIR/lib/ \n        """,\n        \'version\': \'\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': depends,\n            \'provides\': [\n                {\'lib\': \'mimalloc\'},\n            ],\n        },\n    }\n', 'burn': '1fce9b2d809c68d6'}
{'name': 'linux/x86_64/pl/pcre.py', 'path': '/Users/pg83/newhope/plugins/pcre.py', 'data': '@y.package\ndef pcre0():\n    return {\n        \'code\': """\n             source fetch "https://downloads.sourceforge.net/project/pcre/pcre/{version}/pcre-{version}.tar.bz2" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-newline-is-anycrlf --enable-utf8 --enable-jit --enable-c++ || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'8.43\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'pkg-config-int\', \'zlib\', \'bzip2\', \'c++\'],\n            \'provides\': [\n                {\'lib\': \'pcre\'},\n            ],\n        },\n    }\n', 'burn': '777b78834de7673f'}
{'name': 'linux/x86_64/pl/help2man.py', 'path': '/Users/pg83/newhope/plugins/help2man.py', 'data': '@y.package\ndef help2man0():\n    return {\n        \'code\': """\n             source fetch "https://mirror.tochlab.net/pub/gnu/help2man/help2man-{version}.tar.xz" 1\n             $YSHELL ./configure --prefix="$IDIR"\n             $YMAKE -j $NTHRS\n             $YMAKE install  \n        """,\n        \'version\': \'1.47.9\',\n        \'meta\': {\n            \'kind\': [\'box\', \'tool\'],\n            \'depends\': [\'perl5\'],\n            \'provides\': [\n                {\'env\': \'HELP2MAN\', \'value\': \'{pkgroot}/bin/help2man\'},\n            ],\n        },\n    }\n', 'burn': '9b6a17c776c51a24'}
{'name': 'linux/x86_64/pl/readline.py', 'path': '/Users/pg83/newhope/plugins/readline.py', 'data': '@y.package\ndef readline0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/readline/readline-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install 2>&1 | grep -v \'No such file or directory\'\n        """,\n        \'version\': \'8.0\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'ncurses\', \'termcap\'],\n            \'provides\': [\n                {\'lib\': \'readline\', \'configure\': {\'opts\': [\'--with-installed-readline={pkgroot}\', \'--with-readline={pkgroot}\']}},\n            ],\n        },\n    }\n', 'burn': 'e435ebf89f2665a6'}
{'name': 'linux/x86_64/pl/musl_boot.py', 'path': '/Users/pg83/newhope/plugins/musl_boot.py', 'data': '#if defined(__LINUX__)\n    def musl_boot0():\n        return {\n            \'code\': """\n                 source fetch "https://www.musl-libc.org/releases/musl-{version}.tar.gz" 1\n                 $(APPLY_EXTRA_PLAN_0)\n                 $(APPLY_EXTRA_PLAN_1)\n                 export CFLAGS="-Diconv=musl_iconv -Diconv_open=musl_iconv_open -Diconv_close=musl_iconv_close $CFLAGS"\n                 sh ./mk.sh x86_64 .\n                 SRC=$(pwd) BDIR=$BDIR/build IDIR=$IDIR CC=$CC sh run.sh\n                 (cd $IDIR/lib && ln -s libc.a libmuslc.a)\n                 rm $IDIR/include/iconv.h\n                 source fetch_url "$IDIR/include/stdatomic.h" "https://raw.githubusercontent.com/llvm-mirror/clang/master/lib/Headers/stdatomic.h"\n            """,\n            \'version\': \'1.1.24\', \n            \'extra\': [\n                {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_musl.sh\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'crt/dso.c\', \'data\': y.globals.by_name[\'data/dso.c\'][\'data\']},\n                {\'kind\': \'file\', \'path\': \'malloc.sh\', \'data\': y.globals.by_name[\'data/malloc.sh\'][\'data\']},\n            ],\n            \'meta\': {\n                \'kind\': [\'tool\'],\n                \'depends\': [\'bestbox\'],\n                \'provides\': [\n                    {\'lib\': \'muslc\'},\n                    {\'env\': \'CPPFLAGS\', \'value\': \'"$CPPFLAGS -I{pkgroot}/include"\'},\n                    {\'env\': \'CFLAGS\', \'value\': \'"-w $CFLAGS"\'},\n                ],\n            },\n        }\n#endif\n', 'burn': '023f3b2066b0c559'}
{'name': 'linux/x86_64/pl/libcxx.py', 'path': '/Users/pg83/newhope/plugins/libcxx.py', 'data': '@y.package\ndef libcxx0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "http://releases.llvm.org/{version}/libcxx-{version}.src.tar.xz" 0\n             mv libcxx* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        """,\n        \'version\': \'9.0.0\',\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'mk.sh\', \'data\': y.globals.by_name[\'data/mk_libcxx_darwin.sh\'][\'data\']},\n        ],\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [\'libcxxrt\'],\n            \'provides\': [\n                {\'env\': \'CPPFLAGS\', \'value\': \'"-w -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"\'},\n                {\'lib\': \'c++\'},\n            ],\n        },\n    }\n', 'burn': 'd69f2a91652992b9'}
{'name': 'linux/x86_64/pl/compiler_rt.py', 'path': '/Users/pg83/newhope/plugins/compiler_rt.py', 'data': '@y.package\ndef compiler_rt0():\n    return {\n        \'code\': """\n             #pragma cc\n             source fetch "http://releases.llvm.org/9.0.0/compiler-rt-9.0.0.src.tar.xz" 1\n        """,\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'crt\'},\n            ],\n        },\n    }\n', 'burn': '6b0652efd174d66f'}
{'name': 'linux/x86_64/pl/coreutils.py', 'path': '/Users/pg83/newhope/plugins/coreutils.py', 'data': 'def coreutils_impl(deps, kind):\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/coreutils/coreutils-{version}.tar.xz" 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin --without-gmp --enable-single-binary=symlinks --enable-no-install-program=stdbuf || exit 1\n             $YMAKE -j $NTHRS || true\n             echo >> src/libstdbuf.c\n             echo >> \'int main() {}\' >> src/libstdbuf.c\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'8.31\',\n        \'meta\': {\n            \'kind\': [\'tool\'] + kind,\n            \'depends\': [\'iconv\', \'intl\'] + deps,\n            \'provides\': [\n                {\'env\': \'COREUTILS\', \'value\': \'{pkgroot}/bin/coreutils\'},\n            ],\n        },\n    }\n\n\n@y.package\ndef coreutils0():\n    return coreutils_impl([\'openssl\'], [\'box\'])\n\n\n@y.package\ndef coreutils_boot0():\n    return coreutils_impl([], [])\n', 'burn': '11a7cd2c8925928b'}
{'name': 'linux/x86_64/pl/python.py', 'path': '/Users/pg83/newhope/plugins/python.py', 'data': '@y.package\ndef python0():\n    return {\n        \'code\': """\n            source fetch "https://www.python.org/ftp/python/{version}/Python-{version}.tar.xz" 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-signal-module --with-system-expat --with-system-ffi || exit1\n            ##echo "#define HAVE_PTH 1" >> pyconfig.h\n            ##echo "#undef HAVE_PTHREAD_H" >> pyconfig.h \n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_1)\n            $(APPLY_EXTRA_PLAN_2)\n            export PYTHONHOME="$IDIR"\n            source ./mk_staticpython.sh "$IDIR/bin/python2.7" "2.7" "2" "Py_Main"\n        """,\n        \'version\': \'2.7.17\',\n        \'extra\': [\n            {\'kind\': \'file\', \'path\': \'Modules/Setup.local\', \'data\': y.builtin_data(\'data/Setup.local2\')},\n            {\'kind\': \'file\', \'path\': \'find_modules.py\', \'data\': y.builtin_data(\'data/find_modules.py\')},\n            {\'kind\': \'file\', \'path\': \'mk_staticpython.sh\', \'data\': y.builtin_data(\'data/mk_staticpython.sh\')},\n        ],\n        \'meta\': {\n            \'kind\': [\'tool\'],\n            \'depends\': [\'ncurses\', \'iconv\', \'intl\', \'zlib\', \'pkg-config-int\', \'libffi\', \'readline\', \'termcap\', \'expat\', \'sqlite3\'],\n            \'provides\': [\n                {\'lib\': \'python2.7\'},\n                {\'env\': \'PYTHON\', \'value\': \'{pkgroot}/bin/staticpython2\'},\n                {\'env\': \'PYTHONHOME\', \'value\': \'{pkgroot}/lib/python2.7\'},\n            ],\n        },\n    }\n', 'burn': '37fbec8a4bc363a8'}
{'name': 'linux/x86_64/pl/mpdecimal.py', 'path': '/Users/pg83/newhope/plugins/mpdecimal.py', 'data': '@y.package\ndef mpdecimal0():\n    return {\n        \'code\': """\n             source fetch "http://deb.debian.org/debian/pool/main/m/mpdecimal/mpdecimal_{version}.orig.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             (cd libmpdec && $YMAKE -j $NTHRS libmpdec.a)\n             touch libmpdec/libmpdec.so.2.4.2\n             $YMAKE install\n             rm -rf $IDIR/lib/*.so.*\n             rm -rf $IDIR/lib/*.so\n        """,\n        \'version\': \'2.4.2\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'provides\': [\n                {\'lib\': \'mpdec\'},\n            ],\n        },\n    }\n', 'burn': 'a07a45790eb94f8f'}
{'name': 'linux/x86_64/pl/libsigsegv.py', 'path': '/Users/pg83/newhope/plugins/libsigsegv.py', 'data': '@y.package\ndef libsigsegv0():\n    return {\n        \'code\': """\n             source fetch "https://ftp.gnu.org/gnu/libsigsegv/libsigsegv-{version}.tar.gz" 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        """,\n        \'version\': \'2.12\',\n        \'meta\': {\n            \'kind\': [\'library\'],\n            \'depends\': [],\n            \'provides\': [\n                {\'lib\': \'sigsegv\', \'configure\': {\'opt\': \'--with-libsigsegv-prefix={pkgroot}\'}},\n            ],\n        },\n    }\n', 'burn': '4a48227b2da8db03'}
ygen linux.x86_64.pl.yash {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: yash
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104507310>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://github.com/magicant/yash/archive/ae772d184ae4362df66f646fc6b7ff8164030a7b.zip\ 0\n            mv ./yash* ./xxx\n            mv ./xxx/* ./\n            export LDFLAGS=\$LDFLAGS $LIBS\\n            export CFLAGS=\-Dwordfree=yash_wordfree $CFLAGS\\n            $YSHELL ./configure --prefix=$IDIR --enable-socket --enable-printf --enable-lineedit --enable-history --enable-double-bracket --enable-dirstack --enable-array\n            echo 'install-rec:' > doc/Makefile\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         
        meta: {
            depends: [
                intl
                ncurses
                xz
                tar
                asciidoc
                python
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YSHELL_OPT
                    value: {pkgroot}/bin/yash
                }
                {
                    env: YASH
                    value: {pkgroot}/bin/yash
                }
            ]
        }
        version: 2.49
    }
]
ygen linux.x86_64.pl.glib {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: glib
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104507ca0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \http://ftp.acc.umu.se/pub/gnome/sources/glib/2.30/glib-2.30.3.tar.xz\ 1\n             export CFLAGS=\-D_GNU_SOURCE=1 -I$(pwd)/inc $CFLAGS\\n             (mkdir inc && cd inc && mkdir sys && cd sys && echo '#include <sys/sysmacros.h>' > mkdev.h)\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libiconv=gnu --disable-nls || exit 1\n             echo '#!'$YSHELL > tmp && cat libtool >> tmp && mv tmp libtool && chmod +x libtool\n             $YMAKE -j $NTHRS || exit 1\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                libffi
                pkg-config-int
                coreutils
                python
                zlib
                dash
                pcre
                slibtool
            ]
            kind: [
                library
            ]
            provides: [
                {
                    extra: [
                        {
                            libs: -framework CoreServices -framework CoreFoundation
                        }
                        {
                            ipath: {pkgroot}/include/glib-2.0
                        }
                        {
                            ipath: {pkgroot}/lib/glib-2.0/include
                        }
                    ]
                    lib: glib-2.0
                }
            ]
        }
        version: 2.30.3
    }
]
ygen linux.x86_64.pl.make {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: make
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045105e0>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: source fetch \http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-4.2.tar.gz\ 1\n$YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\n$YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-load || exit 1\n$YMAKE -j $NTHRS\n$YMAKE install
        meta: {
            contains: [
                make-boot
            ]
            depends: [
                make-boot
            ]
            kind: [
                tool
                box
            ]
            provides: [
                {
                    env: YMAKE
                    value: {pkgroot}/bin/make
                }
            ]
        }
        version: 4.2
    }
]
ygen linux.x86_64.pl.zlib {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: zlib
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104510dc0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \http://zlib.net/zlib-1.2.11.tar.gz\ 1\n            export LDFLAGS=\$LDFLAGS $LIBS\\n            export TEST_LDFLAGS=\$LDFLAGS -L. libz.a\\n            $YSHELL ./configure $COFLAGS --static --64 --prefix=$IDIR || exit 1\n            $YMAKE -j $NTHRS TEST_LDFLAGS=\$TEST_LDFLAGS\\n            $YMAKE install\n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-z={pkgroot}
                    }
                    lib: z
                }
                {
                    env: ZLIB_CFLAGS
                    value: \-I{pkgroot}/include\
                }
                {
                    env: ZLIB_LIBS
                    value: \-L{pkgroot}/lib -lz\
                }
            ]
        }
        version: 1.2.11
    }
]
ygen linux.x86_64.pl.tar {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: tar
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104513670>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/tar/tar-1.32.tar.gz\ 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR\n             $YMAKE -j $NTHRS && $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                gzip
                bzip2
                xz
                unrar
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YGNUTAR
                    value: {pkgroot}/bin/tar
                }
            ]
        }
        version: 1.32
    }
]
ygen linux.x86_64.pl.libidn2 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libidn2
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104513ee0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/libidn/libidn2-2.2.0.tar.gz\ 1\n\n             ln -s \$CC\ ./gcc\n             ln -s \$CC\ ./cc\n             export PATH=\$(pwd):$PATH\\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                iconv
                libunistring
                pkg-config
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libidn2={pkgroot}
                    }
                    lib: idn2
                }
            ]
        }
        version: 2.2.0
    }
]
ygen linux.x86_64.pl.gawk {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: gawk
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10451f790>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://mirror.tochlab.net/pub/gnu/gawk/gawk-5.0.1.tar.xz\ 1\n\n             ln -s $AR ./ar\n             export PATH=\$(pwd):$PATH\\n             export CFLAGS=\-Derr=gawk_err $CFLAGS\\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin/awk_exec --disable-shared --enable-static --disable-extensions || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                readline
                libsigsegv
                c++
            ]
            kind: [
                box
                tool
            ]
            soft: [
                mpfr
                gmp
            ]
        }
        version: 5.0.1
    }
]
ygen linux.x86_64.pl.libffi {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libffi
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104526040>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://sourceware.org/ftp/libffi/libffi-3.2.1.tar.gz\ 1\n\n             sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/'                  -i include/Makefile.in\n\n             sed -e '/^includedir/ s/=.*$/=@includedir@/'                  -e 's/^Cflags: -I${includedir}/Cflags:/'                  -i libffi.pc.in\n\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                sed
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: ffi
                }
            ]
        }
        version: 3.2.1
    }
]
ygen linux.x86_64.pl.bison {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: bison
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045269d0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/bison/bison-3.4.2.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-relocatable || exit 1\n             $YMAKE -j $NTHRS || true\n             $YMAKE || true\n             $YMAKE\n             $YMAKE install\n        
        meta: {
            depends: [
                c++
                m4
                iconv
                intl
                xz
                perl5
            ]
            kind: [
                box
                tool
            ]
        }
        version: 3.4.2
    }
]
ygen linux.x86_64.pl.gettext_tiny {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.bzip2 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: bzip2
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10452b790>
        gen: human
        kind: [
            library
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz\ 1\n            $YMAKE -j $NTHRS CC=$CC AR=$AR RANLIB=$RANLIB LDFLAGS=\$LDFLAGS $LIBS\ CFLAGS=\$CFLAGS\ PREFIX=\$IDIR\ install\n        
        meta: {
            kind: [
                library
                box
                tool
            ]
            provides: [
                {
                    lib: bz2
                }
                {
                    env: YBZIP2
                    value: {pkgroot}/bin/bzip2
                }
            ]
        }
        version: 1.0.8
    }
]
ygen linux.x86_64.pl.libedit {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libedit
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10452e040>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \http://thrysoee.dk/editline/libedit-20191025-3.1.tar.gz\ 1\n             export CFLAGS=\-D__STDC_ISO_10646__=1 $CFLAGS\\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                ncurses
                termcap
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: edit
                }
            ]
        }
        version: 20191025-3.1
    }
]
ygen linux.x86_64.pl.toybox {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.busybox {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.xz {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: xz
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10452eee0>
        gen: human
        kind: [
            box
            library
            tool
        ]
    }
    {
        code: \n             source fetch \https://sourceforge.net/projects/lzmautils/files/xz-5.2.4.tar.gz/download\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --disable-threads && $YMAKE -j $NTHRS && $YMAKE install\n        
        meta: {
            kind: [
                box
                library
                tool
            ]
            provides: [
                {
                    lib: lzma
                }
                {
                    env: YXZ
                    value: {pkgroot}/bin/xz
                }
                {
                    env: YXZCAT
                    value: {pkgroot}/bin/xzcat
                }
            ]
        }
        version: 5.2.4
    }
]
ygen linux.x86_64.pl.libarchive {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libarchive
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045318b0>
        gen: human
        kind: [
            library
            tool
            box
        ]
    }
    {
        code: \n             source fetch \https://libarchive.org/downloads/libarchive-3.4.0.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                zlib
                bzip2
                xz
            ]
            kind: [
                library
                tool
                box
            ]
            provides: [
                {
                    lib: archive
                }
                {
                    env: YTAR
                    value: {pkgroot}/bin/bsdtar
                }
            ]
        }
        version: 3.4.0
    }
]
ygen linux.x86_64.pl.yasm {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.curl {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: curl
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10453b5e0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://curl.haxx.se/download/curl-7.67.0.tar.xz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                openssl
                libidn2
                libmetalink
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: CURL
                    value: {pkgroot}/bin/curl
                }
            ]
        }
        version: 7.67.0-20191011
    }
]
ygen linux.x86_64.pl.perl5 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: perl5
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10453bdc0>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            source fetch \https://www.cpan.org/src/5.0/perl-5.30.1.tar.gz\ 0\n            mv perl* xxx\n            cd xxx\n\n            ln -s $AR ./ar\n            ln -s $NM ./nm\n            ln -s $CC ./gcc\n            export PATH=\$(pwd):$PATH\\n\n            ./Configure -des -Accflags=\$CFLAGS\ -Aldflags=\$LDFLAGS $LIBS\ -Dusethreads -Duse64bitall -Dprefix=$IDIR -Duseperlio -Uusesfio -Duseshrplib=false -Dusedl=false -Dcc=\$CC $CFLAGS $LDFLAGS $LIBS\\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                zlib
                coreutils-boot
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: YPERL
                    value: {pkgroot}/bin/perl
                }
            ]
        }
        prepare: \n            source perl5_env\n        
        version: 5.30.1
    }
]
ygen linux.x86_64.pl.cxxrt {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libcxxrt
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104540670>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \https://github.com/pathscale/libcxxrt/archive/master.zip\ 0\n             mv libcxxrt* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        
        extra: [
            {
                data: set -e\n\nrm -rf obj || true\nmkdir obj\n\ncxx_srcs=$(ls src/*.cc)\nc_srcs=$(ls src/*.c)\n\nfor s in $cxx_srcs; do\n    n=$(basename $s)\n    $CXX $CFLAGS $CXXFLAGS -c $s -o obj/$n.o\ndone\n\nfor s in $c_srcs; do\n    n=$(basename $s)\n    $CC $CFLAGS -c $s -o obj/$n.o\ndone\n\n$AR q obj/libcxxrt.a obj/*.o \n$RANLIB obj/libcxxrt.a\n\nmkdir $IDIR/lib || true\nmkdir $IDIR/include || true\n\ncp obj/libcxxrt.a $IDIR/lib/\ncp src/*.h $IDIR/include/\n
                kind: file
                path: mk.sh
            }
        ]
        meta: {
            depends: [
                libunwind
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: cxxrt
                }
                {
                    env: LIBCXXRT_INC
                    value: \{pkgroot}/include\
                }
            ]
        }
    }
]
ygen linux.x86_64.pl.gzip {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: gzip
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104549040>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/gzip/gzip-1.10.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                slibtool
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YGZIP
                    value: {pkgroot}/bin/gzip
                }
            ]
        }
        version: 1.10
    }
]
ygen linux.x86_64.pl.ninja {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: ninja
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045498b0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://github.com/ninja-build/ninja/archive/v1.9.0.tar.gz\ 0\n             mv ninja* xxx\n             cd xxx\n             export CFLAGS=\-D_BSD_SOURCE=1 $CFLAGS\\n             export CXXFLAGS=\-D_BSD_SOURCE=1 $CXXFLAGS\\n             export LDFLAGS=\$LDFLAGS $LIBS\\n             $PYTHON ./configure.py --bootstrap\n             mkdir -p $IDIR/bin\n             install -v -m755 ninja $IDIR/bin\n        
        meta: {
            depends: [
                python
                c++
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YNINJA
                    value: {pkgroot}/bin/ninja
                }
                {
                    env: NINJA
                    value: {pkgroot}/bin/ninja
                }
            ]
        }
        version: 1.9.0
    }
]
ygen linux.x86_64.pl.diffutils {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: diffutils
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104547280>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/diffutils/diffutils-3.7.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-gcc-warnings || exit 1\n             (cd man && echo '#!'\$YPERL -w\ > tmp && cat help2man >> tmp && mv tmp help2man && chmod +x help2man)\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                libsigsegv
                perl5
                help2man
            ]
            kind: [
                box
                tool
            ]
        }
        version: 3.7
    }
]
ygen linux.x86_64.pl.unwind {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libunwind
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104547b80>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \http://releases.llvm.org/9.0.0/libunwind-9.0.0.src.tar.xz\ 0\n             mv libunwind* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             cat src/AddressSpace.hpp | grep -v 'pragma comment' > tmp && mv tmp src/AddressSpace.hpp\n             source mk.sh\n        
        extra: [
            {
                data: \nset -e\nset -x\n\nCOMMON=\-I./src -I./include -D_LIBUNWIND_HAS_COMMENT_LIB_PRAGMA -funwind-tables -nostdinc++ -D_DEBUG -D_LIBUNWIND_IS_NATIVE_ONLY\\nCXXFLAGS=\$COMMON -std=c++11 -fstrict-aliasing -fno-exceptions -fno-rtti $CXXFLAGS\\nCFLAGS=\$COMMON -std=c99 $CFLAGS\\n\nrm -rf obj || true\nmkdir obj\n\ncxx_src=\\nsrc/libunwind.cpp\nsrc/Unwind-EHABI.cpp\nsrc/Unwind-seh.cpp\nsrc/Unwind_AppleExtras.cpp\n\\n\ncc_srcs=\\nsrc/UnwindLevel1.c\nsrc/UnwindLevel1-gcc-ext.c\nsrc/Unwind-sjlj.c\n\\n\nasm_srcs=\\nsrc/UnwindRegistersRestore.S\nsrc/UnwindRegistersSave.S\nunwind.c\n\\n\necho 'extern *void_ZN9libunwind15Registers_arm646jumptoEv;' >> unwind.c\n\nfor s in $cxx_src; do\n    $CXX $CXXFLAGS -c $s -o obj/$(basename $s).o\ndone\n\nfor s in $cc_srcs $asm_srcs; do\n    $CC $CFLAGS -c $s -o obj/$(basename $s).o\ndone\n\n$AR q obj/libunwind.a obj/*.o\n$RANLIB obj/libunwind.a\n\nmkdir $IDIR/lib\ncp obj/libunwind.a $IDIR/lib\ncp -R include $IDIR/\n
                kind: file
                path: mk.sh
            }
        ]
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    lib: unwind
                }
            ]
        }
        version: 9.0.0
    }
]
ygen linux.x86_64.pl.ncurses {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: ncurses
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045565e0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.1.tar.gz\ 1\n            source add_strip\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-shared --without-debug --without-ada --enable-widec --enable-pc-files --enable-overwrite --enable-ext-colors --enable-termcap --with-pkg-config --with-termlib --without-cxx --without-cxx-binding\n            $YMAKE -j $NTHRS || true\n            $YMAKE -j $NTHRS\n            mv install install-tmp\n            ln -s install-sh install\n            $YMAKE install\n\n            cd $IDIR/lib && (for i in `ls *.a`; do q=`echo $i | tr -d 'w'`;  ln -s $i $q; done)\n        
        meta: {
            depends: [
                slibtool
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-curses={pkgroot}
                            --with-ncurses={pkgroot}
                        ]
                    }
                    lib: ncurses
                }
                {
                    env: LIBS
                    value: \$LIBS -lncurses -ltinfo -lpanel -lmenu -lform\
                }
            ]
        }
        version: 6.1
    }
]
ygen linux.x86_64.pl.slang {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: slang
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104556dc0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://www.jedsoft.org/snapshots/slang-pre2.3.3-15.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR --with-readline=gnu --without-png --without-pcre --without-onig || exit 1\n            $YMAKE install-static || exit 1\n        
        meta: {
            depends: [
                zlib
                readline
                iconv
            ]
            kind: [
                library
            ]
            provides: [
                slang
            ]
        }
        version: pre2.3.3-15
    }
]
ygen linux.x86_64.pl.termcap {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: termcap
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104552700>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/gnu/termcap/termcap-1.3.1.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static \n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    lib: termcap
                }
            ]
        }
        version: 1.3.1
    }
]
ygen linux.x86_64.pl.p7zip {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: p7zip
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104552f70>
        gen: human
        kind: [
            box
            tool
            library
        ]
    }
    {
        code: \n             source fetch \https://downloads.sourceforge.net/p7zip/p7zip_16.02_src_all.tar.bz2\ 1\n             cat makefile.linux_amd64  | grep -v 'PRE_COMP' | sed -e 's/CXX=.*/CXX=clang++/' | sed -e 's/CC=.*/CC=clang/' > makefile.machine\n             export CFLAGS=\-w $CFLAGS\\n             $YMAKE -j $NTHRS -f makefile DEST_DIR=$IDIR CC=$CC CXX=$CXX ALLFLAGS_C=\$CFLAGS\ ALLFLAGS_CPP=\$CXXFLAGS -std=c++03\ LDFLAGS=\$LDFLAGS $LIBS\ 7za install\n             (cd $IDIR/usr/local/ && mv * $IDIR/\n             rm -rf $IDIR/usr/local)\n             mkdir $IDIR/bin\n             install bin/7za $IDIR/bin\n        
        meta: {
            depends: [
                c++
            ]
            kind: [
                box
                tool
                library
            ]
            provides: [
                {
                    env: Y7ZA
                    value: {pkgroot}/bin/7za
                }
            ]
        }
        version: 16.02
    }
]
ygen linux.x86_64.pl.pth {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: pth
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104561820>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/pth/pth-2.0.7.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-optimize --disable-shared --enable-static || exit 1\n             $YMAKE \n             $YMAKE install\n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-libpth-prefix={pkgroot}
                            --with-pth
                        ]
                    }
                    lib: pth
                }
            ]
        }
        version: 2.0.7
    }
]
ygen linux.x86_64.pl.libiconv {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libiconv
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104566040>
        gen: human
        kind: [
            box
            library
            tool
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz\ 1\n            export LDFLAGS=\$LDFLAGS $LIBS\\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        
        meta: {
            kind: [
                box
                library
                tool
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-libiconv-prefix={pkgroot}
                            --with-iconv={pkgroot}
                        ]
                    }
                    extra: []
                    lib: iconv
                }
                {
                    lib: charset
                }
            ]
        }
        version: 1.16
    }
]
ygen linux.x86_64.pl.make_boot {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: make-boot
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045668b0>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n        source fetch \http://mirror.lihnidos.org/GNU/ftp/gnu/make/make-4.2.tar.gz\ 1\n        export CPPFLAGS=\-I./glob $CPPFLAGS\\n        $YSHELL ./configure --prefix=$IDIR --disable-load || exit 1\n        $YSHELL ./build.sh\n        mkdir $IDIR/bin && cp make $IDIR/bin/ && chmod +x $IDIR/bin/make\n    
        meta: {
            depends: []
            kind: [
                tool
            ]
            provides: [
                {
                    env: YMAKE
                    value: {pkgroot}/bin/make
                }
            ]
        }
        version: 4.2
    }
]
ygen linux.x86_64.pl.jemalloc {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: jemalloc
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10456c0d0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --disable-cxx --disable-prof --disable-libdl || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                make-boot
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: jemalloc
                }
            ]
        }
        version: 5.2.1
    }
]
ygen linux.x86_64.pl.mc {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: mc-slang
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10456ca60>
        gen: human
        kind: [
            program
        ]
    }
    {
        code: \n             source fetch \http://ftp.midnight-commander.org/mc-4.8.23.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-screen=slang  || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                iconv
                glib
                slang
            ]
            kind: [
                program
            ]
        }
        version: 4.8.23
    }
]
[
    {
        base: mc-ncurses
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10456ce50>
        gen: human
        kind: [
            program
        ]
    }
    {
        code: \n             source fetch \http://ftp.midnight-commander.org/mc-4.8.23.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-screen=ncurses  || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                iconv
                glib
                ncurses
            ]
            kind: [
                program
            ]
        }
        version: 4.8.23
    }
]
ygen linux.x86_64.pl.dash {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: dash
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104574700>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \http://gondor.apana.org.au/~herbert/dash/files/dash-0.5.10.2.tar.gz\ 1\n            export CFLAGS_FOR_BUILD=\$CFLAGS $LDFLAGS $LIBS\\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR\n            $YMAKE -j $NTHRS\n            $YMAKE install\n         
        meta: {
            depends: [
                libedit
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YSHELL
                    value: {pkgroot}/bin/dash
                }
                {
                    env: DASH
                    value: {pkgroot}/bin/dash
                }
            ]
        }
        version: 0.5.10.2
    }
]
ygen linux.x86_64.pl.grep {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: grep
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104574f70>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/grep/grep-3.3.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                intl
                libsigsegv
                iconv
            ]
            kind: [
                box
                tool
            ]
        }
        version: 3.3
    }
]
ygen linux.x86_64.pl.bestbox {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.sqlite3 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: sqlite3
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104575b80>
        gen: human
        kind: [
            library
            tool
            box
        ]
    }
    {
        code: \n            source fetch \https://www.sqlite.org/2019/sqlite-autoconf-3300100.tar.gz\ 1\n            export CFLAGS=\-DSQLITE_OMIT_LOAD_EXTENSION=1 $CFLAGS\\n            $YSHELL ./configure $COFLAGS --disable-shared --enable-static  --prefix=$IDIR || exit 1\n            $YMAKE install || exit 1\n        
        meta: {
            depends: [
                readline
            ]
            kind: [
                library
                tool
                box
            ]
            provides: [
                {
                    lib: sqlite3
                }
            ]
        }
        version: 3300100
    }
]
ygen linux.x86_64.pl.dl {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: dl
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045784c0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/pg83/newhope/archive/670037f6c15db5c0b46b7452124bce8bcc2f9801.zip\ 0\n             cd newhope* && cd support/libdl\n             $YMAKE CXX=\$CXX\ CXXFLAGS=\$CXXFLAGS\ LDFLAGS=\$LDFLAGS\ LIBS=\$LIBS\ AR=\$AR\ NM=\$NM\ RANLIB=\$RANLIB\ DESTDIR=\$IDIR\ install\n        
        meta: {
            depends: [
                c++
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: dl
                }
            ]
        }
        version: 670037f6c15db5c0b46b7452124bce8bcc2f9801
    }
]
ygen linux.x86_64.pl.unrar {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: unrar
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104578ca0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \http://www.rarlab.com/rar/unrarsrc-5.8.3.tar.gz\ 0\n             source add_strip\n             cd unrar\n             $YMAKE CC=$CC CXX=$CXX AR=$AR RANLIB=$RANLIB LDFLAGS=\$LDFLAGS\ CPPFLAGS=\\ CXXFLAGS=\$CXXFLAGS\ -f makefile\n             mkdir -p $IDIR/bin\n             install -v -m755 unrar $IDIR/bin\n        
        meta: {
            depends: [
                c++
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: YUNRAR
                    value: {pkgroot}/bin/unrar
                }
            ]
        }
        version: 5.8.3
    }
]
ygen linux.x86_64.pl.netbsd_curses {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: netbsd-curses
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10457d550>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://github.com/sabotage-linux/netbsd-curses/archive/5b0d21692c6c2db31e960961f7a846429e701c30.zip\ 0\n            cd netbsd*\n            $YMAKE -j 1 CC=\$CC\ AR=\$AR\ RANLIB=\$RANLIB\ CFLAGS=\$CFLAGS $LDFLAGS $LIBS\  LDFLAGS=\$LDFLAGS $LIBS\ LDFLAGS_HOST=\$LDFLAGS $LIBS\ PREFIX=/ DESTDIR=\$IDIR\ all-static install-static\n        
        meta: {
            depends: [
                make
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-curses={pkgroot}
                            --with-ncurses={pkgroot}
                        ]
                    }
                    lib: curses
                }
                {
                    env: LIBS
                    value: \$LIBS -lform -lmenu -lpanel -lcurses -lterminfo\
                }
            ]
        }
        version: 5b0d21692c6c2db31e960961f7a846429e701c30
    }
]
ygen linux.x86_64.pl.openssl {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: openssl
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10457dd30>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n            source fetch \https://www.openssl.org/source/old/1.1.1/openssl-1.1.1c.tar.gz\ 1\n            $YPERL ./Configure linux-x86_64-cc no-asm threads no-shared no-dso no-hw no-tests no-engine --prefix=$IDIR --openssldir=$IDIR -w -std=c99 -D_GNU_SOURCE=1 $CFLAGS $LDFLAGS $LIBS\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                perl5
                dl
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: ssl
                }
            ]
        }
        version: 1.1.1c
    }
]
ygen linux.x86_64.pl.sed {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: sed
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10458c670>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/sed/sed-4.7.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: SED
                    value: {pkgroot}/bin/sed
                }
            ]
        }
        version: 4.7
    }
]
ygen linux.x86_64.pl.scripts {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.libunistring {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libunistring
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045a98b0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/libunistring/libunistring-0.9.10.tar.xz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                xz
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libunistring-prefix={pkgroot}
                    }
                    lib: unistring
                }
            ]
        }
        version: 0.9.10
    }
]
ygen linux.x86_64.pl.kernel_h {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.m4 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: m4
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104598430>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n               source fetch \https://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.gz\ 1\n               $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-c++\n               $YMAKE -j $NTHRS\n               $YMAKE install\n        
        meta: {
            depends: [
                libsigsegv
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: M4
                    value: {pkgroot}/bin/m4
                }
            ]
        }
        version: 1.4.18
    }
]
ygen linux.x86_64.pl.quasar_m4 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: quasar-m4
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x104598d30>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n               source fetch \http://haddonthethird.net/m4/m4-2.tar.bz2\ 1\n               $YMAKE -j $NTHRS CFLAGS=\$CFLAGS\ LDFLAGS=\$LDFLAGS $LIBS\ CC=\$CC\ m4 \n               $YMAKE  PREFIX=/ DESTDIR=\$IDIR\ install\n        
        meta: {
            depends: [
                coreutils-boot
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: M4
                    value: {pkgroot}/bin/m4
                }
            ]
        }
        version: 2
    }
]
ygen linux.x86_64.pl.pkg_config {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: pkg-config
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10459d700>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n            source fetch \https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared \n            cd glib\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-libiconv=gnu --enable-static --disable-shared  --srcdir=.\n            $YMAKE -j $NTHRS\n            cd ..\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                glib
                slibtool
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: PKG_CONFIG
                    value: {pkgroot}/bin/pkg-config
                }
            ]
        }
        version: 0.29.2
    }
]
[
    {
        base: pkg-config-int
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x10459db80>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            source fetch \https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-internal-glib\n            cd glib\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-libiconv=gnu --enable-static --disable-shared --with-internal-glib --srcdir=.\n            $YMAKE -j $NTHRS\n            cd ..\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                slibtool
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: PKG_CONFIG
                    value: {pkgroot}/bin/pkg-config
                }
            ]
        }
        version: 0.29.2
    }
]
ygen linux.x86_64.pl.asciidoc {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: asciidoc
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045a53a0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://downloads.sourceforge.net/project/asciidoc/asciidoc/8.6.9/asciidoc-8.6.9.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            kind: [
                box
                tool
            ]
            provides: []
        }
        version: 8.6.9
    }
]
ygen linux.x86_64.pl.gettext {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: gettext
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045a5ca0>
        gen: human
        kind: [
            box
            library
            tool
        ]
    }
    {
        code: \n            source fetch \https://ftp.gnu.org/gnu/gettext/gettext-0.20.1.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-included-libunistring --with-included-libxml --with-included-gettext --enable-relocatable --disable-c++ || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n        
        meta: {
            depends: [
                iconv
                ncurses
            ]
            kind: [
                box
                library
                tool
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libintl-prefix={pkgroot}
                    }
                    lib: intl
                }
            ]
        }
        version: 0.20.1
    }
]
ygen linux.x86_64.pl.libmetalink {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libmetalink
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045aa670>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://launchpad.net/libmetalink/trunk/libmetalink-0.1.3/+download/libmetalink-0.1.3.tar.gz\ 1\n             export SHELL=`which dash` \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --with-libexpat=yes --with-libxml2=no || exit 1\n             $YMAKE -j $NTHRS SHELL=$SHELL\n             $YMAKE install\n        
        meta: {
            depends: [
                expat
                dash
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libmetalink={pkgroot}
                    }
                    lib: metalink
                }
            ]
        }
        version: 0.1.3
    }
]
ygen linux.x86_64.pl.musl {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.git {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.python3 {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: python3
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045ae700>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: \n            source fetch \https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz\ 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $(APPLY_EXTRA_PLAN_1)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --with-system-libmpdec --enable-static --disable-shared --with-signal-module --with-system-ffi || exit1\n            $YMAKE -j $NTHRS || exit 1\n            PY=`which ./python.exe || which ./python`\n            $PY ./fix.py patch ./setup.py\n            DUMP=1 $PY ./setup.py build > data.json\n            $PY ./fix.py ./data.json > Modules/Setup.local\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            cp -R Tools $IDIR/\n            mv $IDIR/Tools $IDIR/tools \n\n            (cd $IDIR/lib/python3.8 && ln -s config-3.8* config-3.8)\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_2)\n            $(APPLY_EXTRA_PLAN_3)\n            source ./mk_staticpython.sh \$IDIR/bin/python3.8\ \3.8\ \3\ \Py_BytesMain\\n        
        extra: [
            {
                data: # -*- makefile -*-\n# The file Setup is used by the makesetup script to construct the files\n# Makefile and config.c, from Makefile.pre and config.c.in,\n# respectively.  Note that Makefile.pre is created from Makefile.pre.in\n# by the toplevel configure script.\n\n*static*\n\n# (VPATH notes: Setup and Makefile.pre are in the build directory, as\n# are Makefile and config.c; the *.in files are in the source directory.)\n\n# Each line in this file describes one or more optional modules.\n# Modules configured here will not be compiled by the setup.py script,\n# so the file can be used to override setup.py's behavior.\n# Tag lines containing just the word \*static*\, \*shared*\ or \*disabled*\\n# (without the quotes but with the stars) are used to tag the following module\n# descriptions. Tag lines may alternate throughout this file.  Modules are\n# built statically when they are preceded by a \*static*\ tag line or when\n# there is no tag line between the start of the file and the module\n# description.  Modules are built as a shared library when they are preceded by\n# a \*shared*\ tag line.  Modules are not built at all, not by the Makefile,\n# nor by the setup.py script, when they are preceded by a \*disabled*\ tag\n# line.\n\n# Lines have the following structure:\n#\n# <module> ... [<sourcefile> ...] [<cpparg> ...] [<library> ...]\n#\n# <sourcefile> is anything ending in .c (.C, .cc, .c++ are C++ files)\n# <cpparg> is anything starting with -I, -D, -U or -C\n# <library> is anything ending in .a or beginning with -l or -L\n# <module> is anything else but should be a valid Python\n# identifier (letters, digits, underscores, beginning with non-digit)\n#\n# (As the makesetup script changes, it may recognize some other\n# arguments as well, e.g. *.so and *.sl as libraries.  See the big\n# case statement in the makesetup script.)\n#\n# Lines can also have the form\n#\n# <name> = <value>\n#\n# which defines a Make variable definition inserted into Makefile.in\n#\n# The build process works like this:\n#\n# 1. Build all modules that are declared as static in Modules/Setup,\n#    combine them into libpythonxy.a, combine that into python.\n# 2. Build all modules that are listed as shared in Modules/Setup.\n# 3. Invoke setup.py. That builds all modules that\n#    a) are not builtin, and\n#    b) are not listed in Modules/Setup, and\n#    c) can be build on the target\n#\n# Therefore, modules declared to be shared will not be\n# included in the config.c file, nor in the list of objects to be\n# added to the library archive, and their linker options won't be\n# added to the linker options. Rules to create their .o files and\n# their shared libraries will still be added to the Makefile, and\n# their names will be collected in the Make variable SHAREDMODS.  This\n# is used to build modules as shared libraries.  (They can be\n# installed using \make sharedinstall\, which is implied by the\n# toplevel \make install\ target.)  (For compatibility,\n# *noconfig* has the same effect as *shared*.)\n#\n# NOTE: As a standard policy, as many modules as can be supported by a\n# platform should be present.  The distribution comes with all modules\n# enabled that are supported by most platforms and don't require you\n# to ftp sources from elsewhere.\n\n\n# Some special rules to define PYTHONPATH.\n# Edit the definitions below to indicate which options you are using.\n# Don't add any whitespace or comments!\n\n# Directories where library files get installed.\n# DESTLIB is for Python modules; MACHDESTLIB for shared libraries.\nDESTLIB=$(LIBDEST)\nMACHDESTLIB=$(BINLIBDEST)\n\n# NOTE: all the paths are now relative to the prefix that is computed\n# at run time!\n\n# Standard path -- don't edit.\n# No leading colon since this is the first entry.\n# Empty since this is now just the runtime prefix.\nDESTPATH=\n\n# Site specific path components -- should begin with : if non-empty\nSITEPATH=\n\n# Standard path components for test modules\nTESTPATH=\n\nCOREPYTHONPATH=$(DESTPATH)$(SITEPATH)$(TESTPATH)\nPYTHONPATH=$(COREPYTHONPATH)\n\n\n# The modules listed here can't be built as shared libraries for\n# various reasons; therefore they are listed here instead of in the\n# normal order.\n\n# This only contains the minimal set of modules required to run the\n# setup.py script in the root of the Python source tree.\n\nposix -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal posixmodule.c # posix (UNIX) system calls\nerrno errnomodule.c\t\t\t# posix (UNIX) errno values\npwd pwdmodule.c\t\t\t\t# this is needed to find out the user's home dir\n\t\t\t\t\t# if $HOME is not set\n_sre _sre.c\t\t\t\t# Fredrik Lundh's new regular expressions\n_codecs _codecsmodule.c\t\t\t# access to the builtin codecs and codec registry\n_weakref _weakref.c\t\t\t# weak references\n_functools -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal _functoolsmodule.c   # Tools for working with functions and callable objects\n_operator _operator.c\t        \t# operator.add() and similar goodies\n_collections _collectionsmodule.c\t# Container types\n_abc _abc.c\t\t\t\t# Abstract base classes\nitertools itertoolsmodule.c\t\t# Functions creating iterators for efficient looping\natexit atexitmodule.c\t\t\t# Register functions to be run at interpreter-shutdown\n_signal -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal signalmodule.c\n_stat _stat.c\t\t\t\t# stat.h interface\ntime -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal timemodule.c\t# -lm # time operations and variables\n_thread -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal _threadmodule.c\t# low-level threading interface\n\n# access to ISO C locale support\n_locale -DPy_BUILD_CORE_BUILTIN _localemodule.c  # -lintl\n\n# Standard I/O baseline\n_io -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal -I$(srcdir)/Modules/_io _io/_iomodule.c _io/iobase.c _io/fileio.c _io/bytesio.c _io/bufferedio.c _io/textio.c _io/stringio.c\n\n# faulthandler module\nfaulthandler faulthandler.c\n\n# debug tool to trace memory blocks allocated by Python\n#\n# bpo-35053: The module must be builtin since _Py_NewReference()\n# can call _PyTraceMalloc_NewReference().\n_tracemalloc _tracemalloc.c hashtable.c\n\n# The rest of the modules listed in this file are all commented out by\n# default.  Usually they can be detected and built as dynamically\n# loaded modules by the new setup.py script added in Python 2.1.  If\n# you're on a platform that doesn't support dynamic loading, want to\n# compile modules statically into the Python binary, or need to\n# specify some odd set of compiler switches, you can uncomment the\n# appropriate lines below.\n\n# ======================================================================\n\n# The Python symtable module depends on .h files that setup.py doesn't track\n_symtable symtablemodule.c\n\n# Uncommenting the following line tells makesetup that all following\n# modules are to be built as shared libraries (see above for more\n# detail; also note that *static* or *disabled* cancels this effect):\n\n# GNU readline.  Unlike previous Python incarnations, GNU readline is\n# now incorporated in an optional module, configured in the Setup file\n# instead of by a configure script switch.  You may have to insert a\n# -L option pointing to the directory where libreadline.* lives,\n# and you may have to change -ltermcap to -ltermlib or perhaps remove\n# it, depending on your system -- see the GNU readline instructions.\n# It's okay for this to be a shared library, too.\n\nreadline readline.c\n\n\n# Modules that should always be present (non UNIX dependent):\n\narray arraymodule.c\t# array objects\ncmath cmathmodule.c _math.c # -lm # complex math library functions\nmath mathmodule.c _math.c # -lm # math library functions, e.g. sin()\n_contextvars _contextvarsmodule.c  # Context Variables\n_struct _struct.c\t# binary structure packing/unpacking\n_weakref _weakref.c\t# basic weak reference support\n#_testcapi _testcapimodule.c    # Python C API test module\n#_testinternalcapi _testinternalcapi.c -I$(srcdir)/Include/internal -DPy_BUILD_CORE_MODULE  # Python internal C API test module\n_random _randommodule.c\t# Random number generator\n_elementtree -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI _elementtree.c\t# elementtree accelerator\n_pickle _pickle.c\t# pickle accelerator\n_datetime _datetimemodule.c\t# datetime accelerator\n_bisect _bisectmodule.c\t# Bisection algorithms\n_heapq _heapqmodule.c\t# Heap queue algorithm\n_asyncio _asynciomodule.c  # Fast asyncio Future\n_json -I$(srcdir)/Include/internal -DPy_BUILD_CORE_BUILTIN _json.c\t# _json speedups\n_statistics _statisticsmodule.c # statistics accelerator\n\nunicodedata unicodedata.c    # static Unicode character database\n\n\n# Modules with some UNIX dependencies -- on by default:\n# (If you have a really backward UNIX, select and socket may not be\n# supported...)\n\nfcntl fcntlmodule.c\t# fcntl(2) and ioctl(2)\n#spwd spwdmodule.c\t\t# spwd(3)\ngrp grpmodule.c\t\t# grp(3)\nselect selectmodule.c\t# select(2); not on ancient System V\n\n# Memory-mapped files (also works on Win32).\nmmap mmapmodule.c\n\n# CSV file helper\n_csv _csv.c\n\n# Socket module helper for socket(2)\n#_socket socketmodule.c\n\n# Socket module helper for SSL support; you must comment out the other\n# socket line above, and possibly edit the SSL variable:\n#SSL=/usr/local/ssl\n_ssl _ssl.c -DUSE_SSL -lssl -lcrypto\n\n# The crypt module is now disabled by default because it breaks builds\n# on many systems (where -lcrypt is needed), e.g. Linux (I believe).\n\n#_crypt _cryptmodule.c # -lcrypt\t# crypt(3); needs -lcrypt on some systems\n\n\n# Some more UNIX dependent modules -- off by default, since these\n# are not supported by all UNIX systems:\n\n#nis nismodule.c -lnsl\t# Sun yellow pages -- not everywhere\ntermios termios.c\t# Steen Lumholt's termios module\n#resource resource.c\t# Jeremy Hylton's rlimit interface\n\n_posixsubprocess _posixsubprocess.c  # POSIX subprocess module helper\n\n# Multimedia modules -- off by default.\n# These don't work for 64-bit platforms!!!\n# #993173 says audioop works on 64-bit platforms, though.\n# These represent audio samples or images as strings:\n\n#audioop audioop.c\t# Operations on audio samples\n\n\n# Note that the _md5 and _sha modules are normally only built if the\n# system does not have the OpenSSL libs containing an optimized version.\n\n# The _md5 module implements the RSA Data Security, Inc. MD5\n# Message-Digest Algorithm, described in RFC 1321.\n\n_md5 md5module.c\n\n\n# The _sha module implements the SHA checksum algorithms.\n# (NIST's Secure Hash Algorithms.)\n_sha1 sha1module.c\n_sha256 sha256module.c\n_sha512 sha512module.c\n_sha3 _sha3/sha3module.c\n\n# _blake module\n_blake2 _blake2/blake2module.c _blake2/blake2b_impl.c _blake2/blake2s_impl.c\n\n# The _tkinter module.\n#\n# The command for _tkinter is long and site specific.  Please\n# uncomment and/or edit those parts as indicated.  If you don't have a\n# specific extension (e.g. Tix or BLT), leave the corresponding line\n# commented out.  (Leave the trailing backslashes in!  If you\n# experience strange errors, you may want to join all uncommented\n# lines and remove the backslashes -- the backslash interpretation is\n# done by the shell's \read\ command and it may not be implemented on\n# every system.\n\n# *** Always uncomment this (leave the leading underscore in!):\n# _tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \\\n# *** Uncomment and edit to reflect where your Tcl/Tk libraries are:\n#\t-L/usr/local/lib \\\n# *** Uncomment and edit to reflect where your Tcl/Tk headers are:\n#\t-I/usr/local/include \\\n# *** Uncomment and edit to reflect where your X11 header files are:\n#\t-I/usr/X11R6/include \\\n# *** Or uncomment this for Solaris:\n#\t-I/usr/openwin/include \\\n# *** Uncomment and edit for Tix extension only:\n#\t-DWITH_TIX -ltix8.1.8.2 \\\n# *** Uncomment and edit for BLT extension only:\n#\t-DWITH_BLT -I/usr/local/blt/blt8.0-unoff/include -lBLT8.0 \\\n# *** Uncomment and edit for PIL (TkImaging) extension only:\n#     (See http://www.pythonware.com/products/pil/ for more info)\n#\t-DWITH_PIL -I../Extensions/Imaging/libImaging  tkImaging.c \\\n# *** Uncomment and edit for TOGL extension only:\n#\t-DWITH_TOGL togl.c \\\n# *** Uncomment and edit to reflect your Tcl/Tk versions:\n#\t-ltk8.2 -ltcl8.2 \\\n# *** Uncomment and edit to reflect where your X11 libraries are:\n#\t-L/usr/X11R6/lib \\\n# *** Or uncomment this for Solaris:\n#\t-L/usr/openwin/lib \\\n# *** Uncomment these for TOGL extension only:\n#\t-lGL -lGLU -lXext -lXmu \\\n# *** Uncomment for AIX:\n#\t-lld \\\n# *** Always uncomment this; X11 libraries to link with:\n#\t-lX11\n\n# Lance Ellinghaus's syslog module\nsyslog syslogmodule.c\t\t# syslog daemon interface\n\n#h_paths_first\n# Curses support, requiring the System V version of curses, often\n# provided by the ncurses library.  e.g. on Linux, link with -lncurses\n# instead of -lcurses).\n\n_curses _cursesmodule.c\n# Wrapper for the panel library that's part of ncurses and SYSV curses.\n_curses_panel _curses_panel.c \n\n\n# Modules that provide persistent dictionary-like semantics.  You will\n# probably want to arrange for at least one of them to be available on\n# your machine, though none are defined by default because of library\n# dependencies.  The Python module dbm/__init__.py provides an\n# implementation independent wrapper for these; dbm/dumb.py provides\n# similar functionality (but slower of course) implemented in Python.\n\n#_dbm _dbmmodule.c \t# dbm(3) may require -lndbm or similar\n\n# Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:\n\n#_gdbm _gdbmmodule.c -I/usr/local/include -L/usr/local/lib -lgdbm\n\n\n# Helper module for various ascii-encoders\nbinascii binascii.c\n\n# Fred Drake's interface to the Python parser\nparser parsermodule.c\n\n\n# Andrew Kuchling's zlib module.\n# This require zlib 1.1.3 (or later).\n# See http://www.gzip.org/zlib/\nzlib zlibmodule.c\n\n# Interface to the Expat XML parser\n# More information on Expat can be found at www.libexpat.org.\n#\npyexpat expat/xmlparse.c expat/xmlrole.c expat/xmltok.c pyexpat.c -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DXML_POOR_ENTROPY -DUSE_PYEXPAT_CAPI\n\n# Hye-Shik Chang's CJKCodecs\n\n# multibytecodec is required for all the other CJK codec modules\n#_multibytecodec cjkcodecs/multibytecodec.c\n\n#_codecs_cn cjkcodecs/_codecs_cn.c\n#_codecs_hk cjkcodecs/_codecs_hk.c\n#_codecs_iso2022 cjkcodecs/_codecs_iso2022.c\n#_codecs_jp cjkcodecs/_codecs_jp.c\n#_codecs_kr cjkcodecs/_codecs_kr.c\n#_codecs_tw cjkcodecs/_codecs_tw.c\n\n*disabled*\n\n# Example -- included for reference only:\n# xx xxmodule.c\n\n# Another example -- the 'xxsubtype' module shows C-level subtyping in action\nxxsubtype xxsubtype.c\n\n# Uncommenting the following line tells makesetup that all following modules\n# are not built (see above for more detail).\n#\n#\n#\n#_sqlite3 _tkinter _curses pyexpat\n#_codecs_jp _codecs_kr _codecs_tw unicodedata\n
                kind: file
                path: Modules/Setup
            }
            {
                data: import json\nimport sys\n\n\npatch = \\\\n        import json\n\n        if os.environ.get('DUMP'):\n            print(json.dumps([x.__dict__ for x in extensions], sort_keys=True, indent=4))\n            sys.stdout.flush()\n            os._exit(0)\n\\\\n\nclass Skip(Exception):\n    pass\n\n\ndef build_descr(el):\n    pre = ''\n    after = ''\n\n    name = el['name']\n\n    if name.startswith('_test'):\n        pre = '*disabled*\\n'\n        after = '\\n*static*\\n'\n\n    if 'audio' in name:\n        raise Skip()\n\n    bad = [\n        'xxlimited',\n        '_decimal',\n        '_elementtree',\n        'pyexpat',\n    ]\n\n    if name in bad:\n        pre = '#'\n\n    sources = []\n    cflags = []\n    ldflags = []\n\n    cflags.extend(el['extra_compile_args'])\n    ldflags.extend(el['extra_link_args'])\n\n    def fix_inc(i):\n        if '/Modules' in i:\n            return '-I$(srcdir)' + i[i.find('/Modules'):]\n\n        return i\n\n    def flt_wl(l):\n        for x in l:\n            if 'h_path' in x:\n                pass\n            else:\n                yield x\n\n    def flt_wl_1(l):\n        return list(flt_wl(l))\n\n    for x in el['include_dirs']:\n        if '/usr' in x:\n            raise Skip()\n\n        cflags.append(fix_inc(('-I' + x).replace('-IMo', '-I$(srcdir)/Mo')))\n\n    for x in el['libraries']:\n        cflags.append('-l' + x)\n\n    for x in el['sources']:\n        sources.append(x)\n\n    cflags_d = []\n\n    for x in el['define_macros']:\n        if x[1]:\n            cflags_d.append('#define ' + str(x[0]) + ' ' + str(x[1]))\n        else:\n            cflags_d.append('#define ' + str(x[0]))\n\n    def flt_lib(ll):\n        for l in ll:\n            if l == '-lm':\n                pass\n            else:\n                if l == '-l:libmpdec.so.2':\n                    yield '-lmpdec'\n                else:\n                    yield l\n\n    if cflags_d:\n        add = '\\n'.join(cflags_d) + '\\n\\n'\n\n        for s in sources:\n            s = 'Modules/' + s\n\n            with open(s, 'r') as f:\n                data = add + f.read()\n\n            with open(s, 'w') as f:\n                f.write(data)\n\n    return pre + ' '.join([name] + flt_wl_1(sources) + flt_wl_1(list(flt_lib(cflags))) + flt_wl_1(list(flt_lib(ldflags)))) + after\n\n\ndef apply_patch(path, p, line):\n    with open(path) as f:\n        data = f.read()\n\n    def iter():\n        for ll in data.split('\\n'):\n            if line in ll:\n                yield p\n\n            yield ll\n\n    data = '\\n'.join(iter())\n\n    with open(path, 'w') as f:\n        f.write(data)\n\n\ndef main():\n    if sys.argv[1] == 'patch':\n        return apply_patch(sys.argv[2], patch, '# move ctypes to the end')\n\n    with open(sys.argv[1]) as f:\n        data = f.read()\n        data = json.loads(data[data.find('['):])\n\n    print('*static*')\n\n    for el in data:\n        try:\n            print(build_descr(el))\n        except Skip:\n            print('skip', str(el), file=sys.stderr)\n\n\nif __name__ == '__main__':\n    main()\n
                kind: file
                path: fix.py
            }
            {
                data: import os\nimport sys\n\n\ndef skip(x):\n    sys.stderr.write('skip ' + str(x) + '\\n')\n\n\ndef find_modules():\n    pr = sys.argv[1]\n    assert os.path.isdir(pr)\n    no = ['idlelib.idle', 'this', '_abcoll']\n\n    for a, b, c in os.walk(pr):\n        for d in b + c:\n            if d.endswith('.py'):\n                d = d[:-3]\n                p = a + '/' + d\n                p = p[len(pr) + 1:]\n\n                if '.' in p:\n                    skip(p)\n\n                    continue\n\n                m = p.replace('/', '.')\n\n                if m in no:\n                    skip(m)\n\n                    continue\n\n                if m.startswith('test.'):\n                    skip(m)\n\n                    continue\n\n                if '.test.' in m:\n                    skip(m)\n\n                    continue\n\n                if '.tests.' in m:\n                    skip(m)\n\n                    continue\n\n                cmd = '''\ntry: \n    sys.stderr.write(\{m}\\\\n\) \n    import  \nexcept:\n    pass\n\n'''\n                sys.stdout.write(cmd.format(m=m).replace('-', '_'))\n\nfind_modules()\n
                kind: file
                path: find_modules.py
            }
            {
                data: env\n$1 ./find_modules.py \$IDIR/lib/python$2\ > all_modules.py\ncat ./all_modules.py\n$1 ../Tools/freeze/freeze.py ./all_modules.py\necho '#'\define Py_FrozenMain $4\ >> frozen\ncat frozen.c | grep -v 'extern int Py_' >> frozen\nmv frozen frozen.c\n$YMAKE OPT=\$CFLAGS\ -j $NTHRS\nmv all_modules python\nmkdir -p \$IDIR/bin\\ninstall -v -m755 python \$IDIR/bin/staticpython$3\\n
                kind: file
                path: mk_staticpython.sh
            }
        ]
        meta: {
            depends: [
                ncurses
                iconv
                intl
                zlib
                pkg-config
                libffi
                readline
                termcap
                mpdecimal
                xz
                bzip2
                sqlite3
                openssl
                dl
            ]
            kind: [
                tool
                box
            ]
            provides: [
                {
                    lib: python3.8
                }
                {
                    env: PYTHON3
                    value: {pkgroot}/bin/staticpython3
                }
                {
                    env: PYTHON3HOME
                    value: {pkgroot}/lib/python3.8
                }
            ]
        }
        version: 3.8.0
    }
]
ygen linux.x86_64.pl.bash {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: bash
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045aef70>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            export CFLAGS=\-fpermissive $CFLAGS -w\\n            export LIBS=\$LDFLAGS $LIBS\\n            source fetch \https://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz\ 1\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-bash-malloc --disable-nls  --disable-extended-glob-default --enable-extended-glob --enable-job-control\n            $YMAKE -j $NTHRS\n            $YMAKE install\n        
        meta: {
            depends: [
                readline
                ncurses
                intl
                iconv
            ]
            kind: [
                tool
            ]
        }
        version: 5.0
    }
]
ygen linux.x86_64.pl.cmake {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: cmake
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045bd700>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n             source fetch \https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1.tar.gz\ 1\n             export CFLAGS=\-w $CFLAGS $LDFLAGS $LIBS\\n             export CXXFLAGS=\-w $CXXFLAGS $LDFLAGS $LIBS\\n             $YSHELL ./bootstrap --system-expat --system-zlib --system-bzip2 --system-liblzma --system-libarchive --prefix=$IDIR --parallel=$NTHRS -- -DCMAKE_USE_OPENSSL=OFF -Dfortran=OFF -DBUILD_TESTING=OFF || true\n             echo > .clang-tidy\n             ./Bootstrap.cmk/cmake .\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                c++
                zlib
                bzip2
                xz
                libarchive
                expat
                dl
                iconv
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: CMAKE
                    value: {pkgroot}/bin/cmake
                }
            ]
        }
        version: 3.16.1
    }
]
ygen linux.x86_64.pl.expat {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: expat
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045bdf70>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/libexpat/libexpat/releases/download/R_2_2_9/expat-2.2.9.tar.bz2\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --without-examples --enable-static --disable-shared || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-expat={pkgroot}
                    }
                    lib: expat
                }
            ]
        }
        version: 2.2.9
    }
]
ygen linux.x86_64.pl.slibtool {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: slibtool
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045bf820>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: \n             source fetch \https://git.foss21.org/slibtool/snapshot/slibtool-0.5.28.tar.xz\ 1\n             $YSHELL ./configure --prefix=$IDIR || exit1 \n             $YMAKE -j $NTHRS install || exit 1\n        
        meta: {
            kind: [
                tool
                box
            ]
            provides: [
                {
                    env: LIBTOOL
                    value: export LIBTOOL=\{pkgroot}/bin/dlibtool\
                }
            ]
        }
        version: 0.5.28
    }
]
ygen linux.x86_64.pl.mimalloc {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: mimalloc
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045c50d0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://github.com/microsoft/mimalloc/archive/acb03c54971c4b0a43a6d17ea55a9d5feb88972f.zip\ 0\n             (mv mim* xxx && mv xxx/* ./)\n             $CC $CFLAGS -DMI_MALLOC_OVERRIDE=1 -std=c11 -Iinclude -Dasm=__asm__ -c src/static.c -o static.o\n             $AR q libmimalloc.a static.o\n             $RANLIB libmimalloc.a\n             mkdir $IDIR/lib\n             mv libmimalloc.a $IDIR/lib/ \n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    lib: mimalloc
                }
            ]
        }
        version: 
    }
]
ygen linux.x86_64.pl.pcre {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: pcre
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045c58b0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://downloads.sourceforge.net/project/pcre/pcre/8.43/pcre-8.43.tar.bz2\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-newline-is-anycrlf --enable-utf8 --enable-jit --enable-c++ || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                pkg-config-int
                zlib
                bzip2
                c++
            ]
            kind: [
                library
            ]
            provides: [
                {
                    lib: pcre
                }
            ]
        }
        version: 8.43
    }
]
ygen linux.x86_64.pl.help2man {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: help2man
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045cc0d0>
        gen: human
        kind: [
            box
            tool
        ]
    }
    {
        code: \n             source fetch \https://mirror.tochlab.net/pub/gnu/help2man/help2man-1.47.9.tar.xz\ 1\n             $YSHELL ./configure --prefix=\$IDIR\\n             $YMAKE -j $NTHRS\n             $YMAKE install  \n        
        meta: {
            depends: [
                perl5
            ]
            kind: [
                box
                tool
            ]
            provides: [
                {
                    env: HELP2MAN
                    value: {pkgroot}/bin/help2man
                }
            ]
        }
        version: 1.47.9
    }
]
ygen linux.x86_64.pl.readline {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: readline
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045cca60>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared\n             $YMAKE -j $NTHRS\n             $YMAKE install 2>&1 | grep -v 'No such file or directory'\n        
        meta: {
            depends: [
                ncurses
                termcap
            ]
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opts: [
                            --with-installed-readline={pkgroot}
                            --with-readline={pkgroot}
                        ]
                    }
                    lib: readline
                }
            ]
        }
        version: 8.0
    }
]
ygen linux.x86_64.pl.musl_boot {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
ygen linux.x86_64.pl.libcxx {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libcxx
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045cf670>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \http://releases.llvm.org/9.0.0/libcxx-9.0.0.src.tar.xz\ 0\n             mv libcxx* xxx\n             mv xxx/* ./\n             $(APPLY_EXTRA_PLAN_0)\n             source mk.sh\n        
        extra: [
            {
                data: set -e\nset -x\n\nDEFINES=\\n#if !defined(uiygfuiertyuiwetuyt)\n#define uiygfuiertyuiwetuyt\n\n#define _LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT 0\n\n#endif\n\\n\nX_CXXFLAGS=\-DNDEBUG -D_LIBCPP_BUILDING_LIBRARY -D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER -iquote src -I$IDIR/include -I$LIBCXXRT_INC -DLIBCXXRT -std=c++14 -nostdinc++ -fvisibility-inlines-hidden\\n\nrm -rf obj || true\nmkdir obj\n\necho \$DEFINES\ > obj/__config\ncat include/__config >> obj/__config\n\nrm -rf $IDIR/include || true\nmkdir $IDIR/include\n\nrm -rf $IDIR/lib || true\nmkdir $IDIR/lib\n\ncp -R \include/\* $IDIR/include/\nmv obj/__config $IDIR/include/\n\nSRCS=\\nsrc/algorithm.cpp\nsrc/any.cpp\nsrc/bind.cpp\nsrc/charconv.cpp\nsrc/chrono.cpp\nsrc/condition_variable.cpp\nsrc/condition_variable_destructor.cpp\nsrc/debug.cpp\nsrc/exception.cpp\nsrc/functional.cpp\nsrc/future.cpp\nsrc/hash.cpp\nsrc/ios.cpp\nsrc/iostream.cpp\nsrc/locale.cpp\nsrc/memory.cpp\nsrc/mutex.cpp\nsrc/mutex_destructor.cpp\nsrc/new.cpp\nsrc/optional.cpp\nsrc/random.cpp\nsrc/regex.cpp\nsrc/shared_mutex.cpp\nsrc/stdexcept.cpp\nsrc/string.cpp\nsrc/strstream.cpp\nsrc/system_error.cpp\nsrc/thread.cpp\nsrc/typeinfo.cpp\nsrc/utility.cpp\nsrc/valarray.cpp\nsrc/variant.cpp\nsrc/vector.cpp\nsrc/filesystem/operations.cpp\nsrc/filesystem/directory_iterator.cpp\nsrc/filesystem/int128_builtins.cpp\n\\n\nfor s in $SRCS; do\n    out=$(echo $s | tr '/' '_' | tr -d '\\n').o\n    $CXX $X_CXXFLAGS $CXXFLAGS -c $s -o obj/$out\ndone\n\n$AR q obj/libc++.a \obj/\*.o\n$RANLIB obj/libc++.a\n\nmv obj/libc++.a $IDIR/lib/\n
                kind: file
                path: mk.sh
            }
        ]
        meta: {
            depends: [
                libcxxrt
            ]
            kind: [
                library
            ]
            provides: [
                {
                    env: CPPFLAGS
                    value: \-w -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk\
                }
                {
                    lib: c++
                }
            ]
        }
        version: 9.0.0
    }
]
ygen linux.x86_64.pl.compiler_rt {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: compiler-rt
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045cfee0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             #pragma cc\n             source fetch \http://releases.llvm.org/9.0.0/compiler-rt-9.0.0.src.tar.xz\ 1\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    lib: crt
                }
            ]
        }
    }
]
ygen linux.x86_64.pl.coreutils {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: coreutils
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045d5820>
        gen: human
        kind: [
            tool
            box
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/coreutils/coreutils-8.31.tar.xz\ 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin --without-gmp --enable-single-binary=symlinks --enable-no-install-program=stdbuf || exit 1\n             $YMAKE -j $NTHRS || true\n             echo >> src/libstdbuf.c\n             echo >> 'int main() {}' >> src/libstdbuf.c\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
                openssl
            ]
            kind: [
                tool
                box
            ]
            provides: [
                {
                    env: COREUTILS
                    value: {pkgroot}/bin/coreutils
                }
            ]
        }
        version: 8.31
    }
]
[
    {
        base: coreutils-boot
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045d5d30>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/coreutils/coreutils-8.31.tar.xz\ 1\n             export FORCE_UNSAFE_CONFIGURE=1 \n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --libexecdir=$IDIR/bin --without-gmp --enable-single-binary=symlinks --enable-no-install-program=stdbuf || exit 1\n             $YMAKE -j $NTHRS || true\n             echo >> src/libstdbuf.c\n             echo >> 'int main() {}' >> src/libstdbuf.c\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: [
                iconv
                intl
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    env: COREUTILS
                    value: {pkgroot}/bin/coreutils
                }
            ]
        }
        version: 8.31
    }
]
ygen linux.x86_64.pl.python {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: python
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045dc550>
        gen: human
        kind: [
            tool
        ]
    }
    {
        code: \n            source fetch \https://www.python.org/ftp/python/2.7.17/Python-2.7.17.tar.xz\ 1\n            export PYTHONHOME=\n            $(APPLY_EXTRA_PLAN_0)\n            $YSHELL ./configure $COFLAGS --prefix=$IDIR --enable-static --disable-shared --with-signal-module --with-system-expat --with-system-ffi || exit1\n            ##echo \#define HAVE_PTH 1\ >> pyconfig.h\n            ##echo \#undef HAVE_PTHREAD_H\ >> pyconfig.h \n            $YMAKE -j $NTHRS || exit 1\n            $YMAKE install\n\n            mkdir good && cd good\n            $(APPLY_EXTRA_PLAN_1)\n            $(APPLY_EXTRA_PLAN_2)\n            export PYTHONHOME=\$IDIR\\n            source ./mk_staticpython.sh \$IDIR/bin/python2.7\ \2.7\ \2\ \Py_Main\\n        
        extra: [
            {
                data: # Fred Drake's interface to the Python parser\nparser parsermodule.c\n\nzlib zlibmodule.c\n\narray arraymodule.c    # array objects\ncmath cmathmodule.c _math.c # -lm # complex math library functions\nmath mathmodule.c _math.c # -lm # math library functions, e.g. sin()\n_struct _struct.c    # binary structure packing/unpacking\ntime timemodule.c # -lm # time operations and variables\noperator operator.c    # operator.add() and similar goodies\n#_testcapi _testcapimodule.c    # Python C API test module\n_random _randommodule.c    # Random number generator\n_collections _collectionsmodule.c # Container types\n_heapq _heapqmodule.c        # Heapq type\nitertools itertoolsmodule.c    # Functions creating iterators for efficient looping\nstrop stropmodule.c        # String manipulations\n_functools _functoolsmodule.c    # Tools for working with functions and callable objects\n_elementtree -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI _elementtree.c    # elementtree accelerator\n#_pickle _pickle.c    # pickle accelerator\ndatetime datetimemodule.c    # date/time type\n_bisect _bisectmodule.c    # Bisection algorithms\n\nunicodedata unicodedata.c    # static Unicode character database\n\n# access to ISO C locale support\n_locale _localemodule.c  # -lintl\n\n# Standard I/O baseline\n_io -I$(srcdir)/Modules/_io _io/bufferedio.c _io/bytesio.c _io/fileio.c _io/iobase.c _io/_iomodule.c _io/stringio.c _io/textio.c\n\n\n# Modules with some UNIX dependencies -- on by default:\n# (If you have a really backward UNIX, select and socket may not be\n# supported...)\n\nfcntl fcntlmodule.c    # fcntl(2) and ioctl(2)\n#spwd spwdmodule.c        # spwd(3)\ngrp grpmodule.c        # grp(3)\nselect selectmodule.c    # select(2); not on ancient System V\n\n# Memory-mapped files (also works on Win32).\nmmap mmapmodule.c\n\n# Helper module for various ascii-encoders\nbinascii binascii.c\n\n# Fred Drake's interface to the Python parser\nparser parsermodule.c\n\ncStringIO cStringIO.c\ncPickle cPickle.c\n\n_curses _cursesmodule.c\n_curses_panel _curses_panel.c\n\n_md5 md5module.c md5.c\n_sha shamodule.c\n_sha256 sha256module.c\n_sha512 sha512module.c\n\nreadline readline.c\n\npyexpat expat/xmlparse.c expat/xmlrole.c expat/xmltok.c pyexpat.c -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI\n\n_socket socketmodule.c timemodule.c\n
                kind: file
                path: Modules/Setup.local
            }
            {
                data: import os\nimport sys\n\n\ndef skip(x):\n    sys.stderr.write('skip ' + str(x) + '\\n')\n\n\ndef find_modules():\n    pr = sys.argv[1]\n    assert os.path.isdir(pr)\n    no = ['idlelib.idle', 'this', '_abcoll']\n\n    for a, b, c in os.walk(pr):\n        for d in b + c:\n            if d.endswith('.py'):\n                d = d[:-3]\n                p = a + '/' + d\n                p = p[len(pr) + 1:]\n\n                if '.' in p:\n                    skip(p)\n\n                    continue\n\n                m = p.replace('/', '.')\n\n                if m in no:\n                    skip(m)\n\n                    continue\n\n                if m.startswith('test.'):\n                    skip(m)\n\n                    continue\n\n                if '.test.' in m:\n                    skip(m)\n\n                    continue\n\n                if '.tests.' in m:\n                    skip(m)\n\n                    continue\n\n                cmd = '''\ntry: \n    sys.stderr.write(\{m}\\\\n\) \n    import  \nexcept:\n    pass\n\n'''\n                sys.stdout.write(cmd.format(m=m).replace('-', '_'))\n\nfind_modules()\n
                kind: file
                path: find_modules.py
            }
            {
                data: env\n$1 ./find_modules.py \$IDIR/lib/python$2\ > all_modules.py\ncat ./all_modules.py\n$1 ../Tools/freeze/freeze.py ./all_modules.py\necho '#'\define Py_FrozenMain $4\ >> frozen\ncat frozen.c | grep -v 'extern int Py_' >> frozen\nmv frozen frozen.c\n$YMAKE OPT=\$CFLAGS\ -j $NTHRS\nmv all_modules python\nmkdir -p \$IDIR/bin\\ninstall -v -m755 python \$IDIR/bin/staticpython$3\\n
                kind: file
                path: mk_staticpython.sh
            }
        ]
        meta: {
            depends: [
                ncurses
                iconv
                intl
                zlib
                pkg-config-int
                libffi
                readline
                termcap
                expat
                sqlite3
            ]
            kind: [
                tool
            ]
            provides: [
                {
                    lib: python2.7
                }
                {
                    env: PYTHON
                    value: {pkgroot}/bin/staticpython2
                }
                {
                    env: PYTHONHOME
                    value: {pkgroot}/lib/python2.7
                }
            ]
        }
        version: 2.7.17
    }
]
ygen linux.x86_64.pl.mpdecimal {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: mpdecimal
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045dcdc0>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \http://deb.debian.org/debian/pool/main/m/mpdecimal/mpdecimal_2.4.2.orig.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             (cd libmpdec && $YMAKE -j $NTHRS libmpdec.a)\n             touch libmpdec/libmpdec.so.2.4.2\n             $YMAKE install\n             rm -rf $IDIR/lib/*.so.*\n             rm -rf $IDIR/lib/*.so\n        
        meta: {
            kind: [
                library
            ]
            provides: [
                {
                    lib: mpdec
                }
            ]
        }
        version: 2.4.2
    }
]
ygen linux.x86_64.pl.libsigsegv {'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
[
    {
        base: libsigsegv
        cc: {
            arch: x86_64
            libc: musl
            os: linux
        }
        code: <function singleton.<locals>.wrapper at 0x1045e5670>
        gen: human
        kind: [
            library
        ]
    }
    {
        code: \n             source fetch \https://ftp.gnu.org/gnu/libsigsegv/libsigsegv-2.12.tar.gz\ 1\n             $YSHELL ./configure $COFLAGS --prefix=$IDIR --disable-shared --enable-static || exit 1\n             $YMAKE -j $NTHRS\n             $YMAKE install\n        
        meta: {
            depends: []
            kind: [
                library
            ]
            provides: [
                {
                    configure: {
                        opt: --with-libsigsegv-prefix={pkgroot}
                    }
                    lib: sigsegv
                }
            ]
        }
        version: 2.12
    }
]
{'arch': 'x86_64', 'libc': 'musl', 'os': 'linux'}
Exception of type <class 'KeyError'>: 'musl_boot':
